
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000560c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040560c  0040560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00405614  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000003a0  204009c0  00405fd4  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400d60  00406374  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402d60  00408374  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022f35  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004bcf  00000000  00000000  0004397c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000090e6  00000000  00000000  0004854b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001010  00000000  00000000  00051631  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001178  00000000  00000000  00052641  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024f1f  00000000  00000000  000537b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001493e  00000000  00000000  000786d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00095cd9  00000000  00000000  0008d016  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003150  00000000  00000000  00122cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 2d 40 20 d5 15 40 00 d3 15 40 00 d3 15 40 00     `-@ ..@...@...@.
  400010:	d3 15 40 00 d3 15 40 00 d3 15 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 18 40 00 d3 15 40 00 00 00 00 00 e9 18 40 00     ..@...@.......@.
  40003c:	51 19 40 00 d3 15 40 00 d3 15 40 00 8d 20 40 00     Q.@...@...@.. @.
  40004c:	a1 1f 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  40005c:	d3 15 40 00 d3 15 40 00 00 00 00 00 01 10 40 00     ..@...@.......@.
  40006c:	15 10 40 00 29 10 40 00 d3 15 40 00 d3 15 40 00     ..@.).@...@...@.
  40007c:	d3 15 40 00 3d 10 40 00 51 10 40 00 d3 15 40 00     ..@.=.@.Q.@...@.
  40008c:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  40009c:	d3 15 40 00 75 1f 40 00 45 1f 40 00 d3 15 40 00     ..@.u.@.E.@...@.
  4000ac:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  4000bc:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  4000cc:	d3 15 40 00 00 00 00 00 d3 15 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  4000ec:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  4000fc:	d3 15 40 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ..@...@...@...@.
  40010c:	d3 15 40 00 d3 15 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d3 15 40 00 d3 15 40 00 d3 15 40 00     ......@...@...@.
  40012c:	d3 15 40 00 d3 15 40 00 00 00 00 00 d3 15 40 00     ..@...@.......@.
  40013c:	d3 15 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00405614 	.word	0x00405614

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00405614 	.word	0x00405614
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00405614 	.word	0x00405614
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	204009dc 	.word	0x204009dc

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	204009dc 	.word	0x204009dc

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009dc 	.word	0x204009dc

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	204009dc 	.word	0x204009dc

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	00401185 	.word	0x00401185

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_set_framebuffer+0x8>)
  400792:	6018      	str	r0, [r3, #0]
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	204009e0 	.word	0x204009e0

0040079c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4007a4:	5442      	strb	r2, [r0, r1]
  4007a6:	4770      	bx	lr
  4007a8:	204009e0 	.word	0x204009e0

004007ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4007ac:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4007b4:	5c40      	ldrb	r0, [r0, r1]
  4007b6:	4770      	bx	lr
  4007b8:	204009e0 	.word	0x204009e0

004007bc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4007bc:	b570      	push	{r4, r5, r6, lr}
  4007be:	4604      	mov	r4, r0
  4007c0:	460d      	mov	r5, r1
  4007c2:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4007c4:	b91b      	cbnz	r3, 4007ce <gfx_mono_ssd1306_put_byte+0x12>
  4007c6:	4b0d      	ldr	r3, [pc, #52]	; (4007fc <gfx_mono_ssd1306_put_byte+0x40>)
  4007c8:	4798      	blx	r3
  4007ca:	42b0      	cmp	r0, r6
  4007cc:	d015      	beq.n	4007fa <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4007ce:	4632      	mov	r2, r6
  4007d0:	4629      	mov	r1, r5
  4007d2:	4620      	mov	r0, r4
  4007d4:	4b0a      	ldr	r3, [pc, #40]	; (400800 <gfx_mono_ssd1306_put_byte+0x44>)
  4007d6:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4007d8:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4007dc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4007e0:	4c08      	ldr	r4, [pc, #32]	; (400804 <gfx_mono_ssd1306_put_byte+0x48>)
  4007e2:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4007e4:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4007e8:	f040 0010 	orr.w	r0, r0, #16
  4007ec:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4007ee:	f005 000f 	and.w	r0, r5, #15
  4007f2:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4007f4:	4630      	mov	r0, r6
  4007f6:	4b04      	ldr	r3, [pc, #16]	; (400808 <gfx_mono_ssd1306_put_byte+0x4c>)
  4007f8:	4798      	blx	r3
  4007fa:	bd70      	pop	{r4, r5, r6, pc}
  4007fc:	004007ad 	.word	0x004007ad
  400800:	0040079d 	.word	0x0040079d
  400804:	0040085d 	.word	0x0040085d
  400808:	00400a7d 	.word	0x00400a7d

0040080c <gfx_mono_ssd1306_init>:
{
  40080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400810:	480d      	ldr	r0, [pc, #52]	; (400848 <gfx_mono_ssd1306_init+0x3c>)
  400812:	4b0e      	ldr	r3, [pc, #56]	; (40084c <gfx_mono_ssd1306_init+0x40>)
  400814:	4798      	blx	r3
	ssd1306_init();
  400816:	4b0e      	ldr	r3, [pc, #56]	; (400850 <gfx_mono_ssd1306_init+0x44>)
  400818:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40081a:	2040      	movs	r0, #64	; 0x40
  40081c:	4b0d      	ldr	r3, [pc, #52]	; (400854 <gfx_mono_ssd1306_init+0x48>)
  40081e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400820:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400822:	f04f 0801 	mov.w	r8, #1
  400826:	462f      	mov	r7, r5
  400828:	4e0b      	ldr	r6, [pc, #44]	; (400858 <gfx_mono_ssd1306_init+0x4c>)
{
  40082a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40082c:	4643      	mov	r3, r8
  40082e:	463a      	mov	r2, r7
  400830:	b2e1      	uxtb	r1, r4
  400832:	4628      	mov	r0, r5
  400834:	47b0      	blx	r6
  400836:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400838:	2c80      	cmp	r4, #128	; 0x80
  40083a:	d1f7      	bne.n	40082c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40083c:	3501      	adds	r5, #1
  40083e:	b2ed      	uxtb	r5, r5
  400840:	2d04      	cmp	r5, #4
  400842:	d1f2      	bne.n	40082a <gfx_mono_ssd1306_init+0x1e>
  400844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400848:	204009e4 	.word	0x204009e4
  40084c:	00400791 	.word	0x00400791
  400850:	0040089d 	.word	0x0040089d
  400854:	0040085d 	.word	0x0040085d
  400858:	004007bd 	.word	0x004007bd

0040085c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  40085c:	b538      	push	{r3, r4, r5, lr}
  40085e:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400860:	2208      	movs	r2, #8
  400862:	4b09      	ldr	r3, [pc, #36]	; (400888 <ssd1306_write_command+0x2c>)
  400864:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400866:	4c09      	ldr	r4, [pc, #36]	; (40088c <ssd1306_write_command+0x30>)
  400868:	2101      	movs	r1, #1
  40086a:	4620      	mov	r0, r4
  40086c:	4b08      	ldr	r3, [pc, #32]	; (400890 <ssd1306_write_command+0x34>)
  40086e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400870:	2301      	movs	r3, #1
  400872:	461a      	mov	r2, r3
  400874:	4629      	mov	r1, r5
  400876:	4620      	mov	r0, r4
  400878:	4c06      	ldr	r4, [pc, #24]	; (400894 <ssd1306_write_command+0x38>)
  40087a:	47a0      	blx	r4
	delay_us(10);
  40087c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400880:	4b05      	ldr	r3, [pc, #20]	; (400898 <ssd1306_write_command+0x3c>)
  400882:	4798      	blx	r3
  400884:	bd38      	pop	{r3, r4, r5, pc}
  400886:	bf00      	nop
  400888:	400e1000 	.word	0x400e1000
  40088c:	40008000 	.word	0x40008000
  400890:	004005c9 	.word	0x004005c9
  400894:	004005df 	.word	0x004005df
  400898:	20400001 	.word	0x20400001

0040089c <ssd1306_init>:
{
  40089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008a0:	4d66      	ldr	r5, [pc, #408]	; (400a3c <ssd1306_init+0x1a0>)
  4008a2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4008a6:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008a8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008ac:	4b64      	ldr	r3, [pc, #400]	; (400a40 <ssd1306_init+0x1a4>)
  4008ae:	2708      	movs	r7, #8
  4008b0:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008b2:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008b6:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008b8:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008bc:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4008be:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4008c0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008c4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4008c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4008ca:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008cc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4008ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4008d2:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4008d4:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008d6:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008da:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4008dc:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4008de:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008e4:	f022 0208 	bic.w	r2, r2, #8
  4008e8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008ec:	f022 0208 	bic.w	r2, r2, #8
  4008f0:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4008f2:	601f      	str	r7, [r3, #0]
  4008f4:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008f6:	631f      	str	r7, [r3, #48]	; 0x30
  4008f8:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008fa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400a78 <ssd1306_init+0x1dc>
  4008fe:	2300      	movs	r3, #0
  400900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400904:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400908:	4640      	mov	r0, r8
  40090a:	4c4e      	ldr	r4, [pc, #312]	; (400a44 <ssd1306_init+0x1a8>)
  40090c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40090e:	2300      	movs	r3, #0
  400910:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400914:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400918:	4640      	mov	r0, r8
  40091a:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40091c:	2300      	movs	r3, #0
  40091e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400922:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400926:	4640      	mov	r0, r8
  400928:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40092a:	2300      	movs	r3, #0
  40092c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400930:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400934:	4640      	mov	r0, r8
  400936:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400938:	2300      	movs	r3, #0
  40093a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40093e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400942:	4640      	mov	r0, r8
  400944:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400946:	2300      	movs	r3, #0
  400948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40094c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400950:	4640      	mov	r0, r8
  400952:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400954:	4c3c      	ldr	r4, [pc, #240]	; (400a48 <ssd1306_init+0x1ac>)
  400956:	f04f 0902 	mov.w	r9, #2
  40095a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40095e:	f04f 0880 	mov.w	r8, #128	; 0x80
  400962:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400966:	6863      	ldr	r3, [r4, #4]
  400968:	f043 0301 	orr.w	r3, r3, #1
  40096c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40096e:	463a      	mov	r2, r7
  400970:	2101      	movs	r1, #1
  400972:	4620      	mov	r0, r4
  400974:	4b35      	ldr	r3, [pc, #212]	; (400a4c <ssd1306_init+0x1b0>)
  400976:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400978:	2200      	movs	r2, #0
  40097a:	2101      	movs	r1, #1
  40097c:	4620      	mov	r0, r4
  40097e:	4b34      	ldr	r3, [pc, #208]	; (400a50 <ssd1306_init+0x1b4>)
  400980:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400982:	2200      	movs	r2, #0
  400984:	2101      	movs	r1, #1
  400986:	4620      	mov	r0, r4
  400988:	4b32      	ldr	r3, [pc, #200]	; (400a54 <ssd1306_init+0x1b8>)
  40098a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40098c:	6863      	ldr	r3, [r4, #4]
  40098e:	f023 0302 	bic.w	r3, r3, #2
  400992:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400994:	2200      	movs	r2, #0
  400996:	2101      	movs	r1, #1
  400998:	4620      	mov	r0, r4
  40099a:	4b2f      	ldr	r3, [pc, #188]	; (400a58 <ssd1306_init+0x1bc>)
  40099c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40099e:	6863      	ldr	r3, [r4, #4]
  4009a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4009a4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4009a6:	6863      	ldr	r3, [r4, #4]
  4009a8:	f043 0310 	orr.w	r3, r3, #16
  4009ac:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  4009ae:	492b      	ldr	r1, [pc, #172]	; (400a5c <ssd1306_init+0x1c0>)
  4009b0:	482b      	ldr	r0, [pc, #172]	; (400a60 <ssd1306_init+0x1c4>)
  4009b2:	4b2c      	ldr	r3, [pc, #176]	; (400a64 <ssd1306_init+0x1c8>)
  4009b4:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  4009b6:	b2c2      	uxtb	r2, r0
  4009b8:	2101      	movs	r1, #1
  4009ba:	4620      	mov	r0, r4
  4009bc:	4b2a      	ldr	r3, [pc, #168]	; (400a68 <ssd1306_init+0x1cc>)
  4009be:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4009c0:	4620      	mov	r0, r4
  4009c2:	4b2a      	ldr	r3, [pc, #168]	; (400a6c <ssd1306_init+0x1d0>)
  4009c4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4009c6:	2301      	movs	r3, #1
  4009c8:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009ca:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4009cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4009d0:	4c27      	ldr	r4, [pc, #156]	; (400a70 <ssd1306_init+0x1d4>)
  4009d2:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009d4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4009d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4009da:	47a0      	blx	r4
  4009dc:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4009de:	20a8      	movs	r0, #168	; 0xa8
  4009e0:	4c24      	ldr	r4, [pc, #144]	; (400a74 <ssd1306_init+0x1d8>)
  4009e2:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4009e4:	201f      	movs	r0, #31
  4009e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4009e8:	20d3      	movs	r0, #211	; 0xd3
  4009ea:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4009ec:	2000      	movs	r0, #0
  4009ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4009f0:	2040      	movs	r0, #64	; 0x40
  4009f2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4009f4:	20a1      	movs	r0, #161	; 0xa1
  4009f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4009f8:	20c8      	movs	r0, #200	; 0xc8
  4009fa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4009fc:	20da      	movs	r0, #218	; 0xda
  4009fe:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400a00:	4648      	mov	r0, r9
  400a02:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400a04:	2081      	movs	r0, #129	; 0x81
  400a06:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400a08:	208f      	movs	r0, #143	; 0x8f
  400a0a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400a0c:	20a4      	movs	r0, #164	; 0xa4
  400a0e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400a10:	20a6      	movs	r0, #166	; 0xa6
  400a12:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400a14:	20d5      	movs	r0, #213	; 0xd5
  400a16:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400a18:	4640      	mov	r0, r8
  400a1a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400a1c:	208d      	movs	r0, #141	; 0x8d
  400a1e:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400a20:	2014      	movs	r0, #20
  400a22:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400a24:	20db      	movs	r0, #219	; 0xdb
  400a26:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400a28:	2040      	movs	r0, #64	; 0x40
  400a2a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400a2c:	20d9      	movs	r0, #217	; 0xd9
  400a2e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400a30:	20f1      	movs	r0, #241	; 0xf1
  400a32:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400a34:	20af      	movs	r0, #175	; 0xaf
  400a36:	47a0      	blx	r4
  400a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a3c:	400e1200 	.word	0x400e1200
  400a40:	400e1000 	.word	0x400e1000
  400a44:	00400e65 	.word	0x00400e65
  400a48:	40008000 	.word	0x40008000
  400a4c:	0040064f 	.word	0x0040064f
  400a50:	00400613 	.word	0x00400613
  400a54:	00400631 	.word	0x00400631
  400a58:	00400695 	.word	0x00400695
  400a5c:	08f0d180 	.word	0x08f0d180
  400a60:	001e8480 	.word	0x001e8480
  400a64:	004006a9 	.word	0x004006a9
  400a68:	004006bf 	.word	0x004006bf
  400a6c:	0040059d 	.word	0x0040059d
  400a70:	20400001 	.word	0x20400001
  400a74:	0040085d 	.word	0x0040085d
  400a78:	400e1400 	.word	0x400e1400

00400a7c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400a7c:	b538      	push	{r3, r4, r5, lr}
  400a7e:	4605      	mov	r5, r0
  400a80:	2208      	movs	r2, #8
  400a82:	4b09      	ldr	r3, [pc, #36]	; (400aa8 <ssd1306_write_data+0x2c>)
  400a84:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a86:	4c09      	ldr	r4, [pc, #36]	; (400aac <ssd1306_write_data+0x30>)
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <ssd1306_write_data+0x34>)
  400a8e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400a90:	2301      	movs	r3, #1
  400a92:	461a      	mov	r2, r3
  400a94:	4629      	mov	r1, r5
  400a96:	4620      	mov	r0, r4
  400a98:	4c06      	ldr	r4, [pc, #24]	; (400ab4 <ssd1306_write_data+0x38>)
  400a9a:	47a0      	blx	r4
	delay_us(10);
  400a9c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400aa0:	4b05      	ldr	r3, [pc, #20]	; (400ab8 <ssd1306_write_data+0x3c>)
  400aa2:	4798      	blx	r3
  400aa4:	bd38      	pop	{r3, r4, r5, pc}
  400aa6:	bf00      	nop
  400aa8:	400e1000 	.word	0x400e1000
  400aac:	40008000 	.word	0x40008000
  400ab0:	004005c9 	.word	0x004005c9
  400ab4:	004005df 	.word	0x004005df
  400ab8:	20400001 	.word	0x20400001

00400abc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400abc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400abe:	4810      	ldr	r0, [pc, #64]	; (400b00 <sysclk_init+0x44>)
  400ac0:	4b10      	ldr	r3, [pc, #64]	; (400b04 <sysclk_init+0x48>)
  400ac2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ac4:	213e      	movs	r1, #62	; 0x3e
  400ac6:	2000      	movs	r0, #0
  400ac8:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <sysclk_init+0x4c>)
  400aca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400acc:	4c0f      	ldr	r4, [pc, #60]	; (400b0c <sysclk_init+0x50>)
  400ace:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400ad0:	2800      	cmp	r0, #0
  400ad2:	d0fc      	beq.n	400ace <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400ad4:	4b0e      	ldr	r3, [pc, #56]	; (400b10 <sysclk_init+0x54>)
  400ad6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ad8:	4a0e      	ldr	r2, [pc, #56]	; (400b14 <sysclk_init+0x58>)
  400ada:	4b0f      	ldr	r3, [pc, #60]	; (400b18 <sysclk_init+0x5c>)
  400adc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400ade:	4c0f      	ldr	r4, [pc, #60]	; (400b1c <sysclk_init+0x60>)
  400ae0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400ae2:	2800      	cmp	r0, #0
  400ae4:	d0fc      	beq.n	400ae0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ae6:	2002      	movs	r0, #2
  400ae8:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <sysclk_init+0x64>)
  400aea:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400aec:	2000      	movs	r0, #0
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <sysclk_init+0x68>)
  400af0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400af2:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <sysclk_init+0x6c>)
  400af4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400af6:	4802      	ldr	r0, [pc, #8]	; (400b00 <sysclk_init+0x44>)
  400af8:	4b02      	ldr	r3, [pc, #8]	; (400b04 <sysclk_init+0x48>)
  400afa:	4798      	blx	r3
  400afc:	bd10      	pop	{r4, pc}
  400afe:	bf00      	nop
  400b00:	11e1a300 	.word	0x11e1a300
  400b04:	004017a9 	.word	0x004017a9
  400b08:	00401101 	.word	0x00401101
  400b0c:	00401155 	.word	0x00401155
  400b10:	00401165 	.word	0x00401165
  400b14:	20183f01 	.word	0x20183f01
  400b18:	400e0600 	.word	0x400e0600
  400b1c:	00401175 	.word	0x00401175
  400b20:	00401065 	.word	0x00401065
  400b24:	0040109d 	.word	0x0040109d
  400b28:	0040169d 	.word	0x0040169d

00400b2c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400b30:	b980      	cbnz	r0, 400b54 <_read+0x28>
  400b32:	460c      	mov	r4, r1
  400b34:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400b36:	2a00      	cmp	r2, #0
  400b38:	dd0f      	ble.n	400b5a <_read+0x2e>
  400b3a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400b3c:	4e08      	ldr	r6, [pc, #32]	; (400b60 <_read+0x34>)
  400b3e:	4d09      	ldr	r5, [pc, #36]	; (400b64 <_read+0x38>)
  400b40:	6830      	ldr	r0, [r6, #0]
  400b42:	4621      	mov	r1, r4
  400b44:	682b      	ldr	r3, [r5, #0]
  400b46:	4798      	blx	r3
		ptr++;
  400b48:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400b4a:	42bc      	cmp	r4, r7
  400b4c:	d1f8      	bne.n	400b40 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400b4e:	4640      	mov	r0, r8
  400b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b54:	f04f 38ff 	mov.w	r8, #4294967295
  400b58:	e7f9      	b.n	400b4e <_read+0x22>
	for (; len > 0; --len) {
  400b5a:	4680      	mov	r8, r0
  400b5c:	e7f7      	b.n	400b4e <_read+0x22>
  400b5e:	bf00      	nop
  400b60:	20400d34 	.word	0x20400d34
  400b64:	20400d2c 	.word	0x20400d2c

00400b68 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400b68:	3801      	subs	r0, #1
  400b6a:	2802      	cmp	r0, #2
  400b6c:	d815      	bhi.n	400b9a <_write+0x32>
{
  400b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b72:	460e      	mov	r6, r1
  400b74:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400b76:	b19a      	cbz	r2, 400ba0 <_write+0x38>
  400b78:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400b7a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400bb4 <_write+0x4c>
  400b7e:	4f0c      	ldr	r7, [pc, #48]	; (400bb0 <_write+0x48>)
  400b80:	f8d8 0000 	ldr.w	r0, [r8]
  400b84:	f815 1b01 	ldrb.w	r1, [r5], #1
  400b88:	683b      	ldr	r3, [r7, #0]
  400b8a:	4798      	blx	r3
  400b8c:	2800      	cmp	r0, #0
  400b8e:	db0a      	blt.n	400ba6 <_write+0x3e>
  400b90:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b92:	3c01      	subs	r4, #1
  400b94:	d1f4      	bne.n	400b80 <_write+0x18>
  400b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b9a:	f04f 30ff 	mov.w	r0, #4294967295
  400b9e:	4770      	bx	lr
	for (; len != 0; --len) {
  400ba0:	4610      	mov	r0, r2
  400ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ba6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bae:	bf00      	nop
  400bb0:	20400d30 	.word	0x20400d30
  400bb4:	20400d34 	.word	0x20400d34

00400bb8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bbe:	4b5c      	ldr	r3, [pc, #368]	; (400d30 <board_init+0x178>)
  400bc0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bc6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400bca:	4b5a      	ldr	r3, [pc, #360]	; (400d34 <board_init+0x17c>)
  400bcc:	2200      	movs	r2, #0
  400bce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400bd2:	695a      	ldr	r2, [r3, #20]
  400bd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400bd8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bde:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400be2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400be6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400bea:	f007 0007 	and.w	r0, r7, #7
  400bee:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400bf0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400bf4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400bf8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400bfc:	f3bf 8f4f 	dsb	sy
  400c00:	f04f 34ff 	mov.w	r4, #4294967295
  400c04:	fa04 fc00 	lsl.w	ip, r4, r0
  400c08:	fa06 f000 	lsl.w	r0, r6, r0
  400c0c:	fa04 f40e 	lsl.w	r4, r4, lr
  400c10:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c14:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c16:	463a      	mov	r2, r7
  400c18:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c1a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c1e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c22:	3a01      	subs	r2, #1
  400c24:	4423      	add	r3, r4
  400c26:	f1b2 3fff 	cmp.w	r2, #4294967295
  400c2a:	d1f6      	bne.n	400c1a <board_init+0x62>
        } while(sets--);
  400c2c:	3e01      	subs	r6, #1
  400c2e:	4460      	add	r0, ip
  400c30:	f1b6 3fff 	cmp.w	r6, #4294967295
  400c34:	d1ef      	bne.n	400c16 <board_init+0x5e>
  400c36:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400c3a:	4b3e      	ldr	r3, [pc, #248]	; (400d34 <board_init+0x17c>)
  400c3c:	695a      	ldr	r2, [r3, #20]
  400c3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400c42:	615a      	str	r2, [r3, #20]
  400c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c48:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c4c:	4a3a      	ldr	r2, [pc, #232]	; (400d38 <board_init+0x180>)
  400c4e:	493b      	ldr	r1, [pc, #236]	; (400d3c <board_init+0x184>)
  400c50:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c52:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400c56:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c5c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400c60:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400c64:	f022 0201 	bic.w	r2, r2, #1
  400c68:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400c6c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400c70:	f022 0201 	bic.w	r2, r2, #1
  400c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400c78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c7c:	f3bf 8f6f 	isb	sy
  400c80:	200a      	movs	r0, #10
  400c82:	4c2f      	ldr	r4, [pc, #188]	; (400d40 <board_init+0x188>)
  400c84:	47a0      	blx	r4
  400c86:	200b      	movs	r0, #11
  400c88:	47a0      	blx	r4
  400c8a:	200c      	movs	r0, #12
  400c8c:	47a0      	blx	r4
  400c8e:	2010      	movs	r0, #16
  400c90:	47a0      	blx	r4
  400c92:	2011      	movs	r0, #17
  400c94:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c96:	4b2b      	ldr	r3, [pc, #172]	; (400d44 <board_init+0x18c>)
  400c98:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c9c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ca2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ca4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400cac:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400cb2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cb8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400cba:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cc2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cc6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400cca:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cce:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400cd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400cd4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400cdc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ce0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ce6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ce8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cee:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cf0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400cf4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cf6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400cf8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400cfc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cfe:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400d00:	4a11      	ldr	r2, [pc, #68]	; (400d48 <board_init+0x190>)
  400d02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400d06:	f043 0310 	orr.w	r3, r3, #16
  400d0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400d0e:	4b0f      	ldr	r3, [pc, #60]	; (400d4c <board_init+0x194>)
  400d10:	2210      	movs	r2, #16
  400d12:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d18:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d1a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400d20:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400d22:	4311      	orrs	r1, r2
  400d24:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400d26:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d28:	4311      	orrs	r1, r2
  400d2a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d2c:	605a      	str	r2, [r3, #4]
  400d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d30:	400e1850 	.word	0x400e1850
  400d34:	e000ed00 	.word	0xe000ed00
  400d38:	400e0c00 	.word	0x400e0c00
  400d3c:	5a00080c 	.word	0x5a00080c
  400d40:	00401185 	.word	0x00401185
  400d44:	400e1200 	.word	0x400e1200
  400d48:	40088000 	.word	0x40088000
  400d4c:	400e1000 	.word	0x400e1000

00400d50 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400d50:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400d54:	0053      	lsls	r3, r2, #1
  400d56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d5a:	fbb2 f2f3 	udiv	r2, r2, r3
  400d5e:	3a01      	subs	r2, #1
  400d60:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400d64:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400d68:	4770      	bx	lr

00400d6a <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d6a:	6301      	str	r1, [r0, #48]	; 0x30
  400d6c:	4770      	bx	lr

00400d6e <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400d6e:	6341      	str	r1, [r0, #52]	; 0x34
  400d70:	4770      	bx	lr

00400d72 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d72:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d74:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d78:	d03a      	beq.n	400df0 <pio_set_peripheral+0x7e>
  400d7a:	d813      	bhi.n	400da4 <pio_set_peripheral+0x32>
  400d7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d80:	d025      	beq.n	400dce <pio_set_peripheral+0x5c>
  400d82:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d86:	d10a      	bne.n	400d9e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d8a:	4313      	orrs	r3, r2
  400d8c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d90:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d92:	400b      	ands	r3, r1
  400d94:	ea23 0302 	bic.w	r3, r3, r2
  400d98:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d9a:	6042      	str	r2, [r0, #4]
  400d9c:	4770      	bx	lr
	switch (ul_type) {
  400d9e:	2900      	cmp	r1, #0
  400da0:	d1fb      	bne.n	400d9a <pio_set_peripheral+0x28>
  400da2:	4770      	bx	lr
  400da4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400da8:	d021      	beq.n	400dee <pio_set_peripheral+0x7c>
  400daa:	d809      	bhi.n	400dc0 <pio_set_peripheral+0x4e>
  400dac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400db0:	d1f3      	bne.n	400d9a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400db2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400db4:	4313      	orrs	r3, r2
  400db6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400db8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dba:	4313      	orrs	r3, r2
  400dbc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400dbe:	e7ec      	b.n	400d9a <pio_set_peripheral+0x28>
	switch (ul_type) {
  400dc0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400dc4:	d013      	beq.n	400dee <pio_set_peripheral+0x7c>
  400dc6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400dca:	d010      	beq.n	400dee <pio_set_peripheral+0x7c>
  400dcc:	e7e5      	b.n	400d9a <pio_set_peripheral+0x28>
{
  400dce:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dd0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dd2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400dd4:	43d3      	mvns	r3, r2
  400dd6:	4021      	ands	r1, r4
  400dd8:	461c      	mov	r4, r3
  400dda:	4019      	ands	r1, r3
  400ddc:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dde:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400de0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400de2:	400b      	ands	r3, r1
  400de4:	4023      	ands	r3, r4
  400de6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400de8:	6042      	str	r2, [r0, #4]
}
  400dea:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dee:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400df0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400df2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400df4:	400b      	ands	r3, r1
  400df6:	ea23 0302 	bic.w	r3, r3, r2
  400dfa:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dfc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dfe:	4313      	orrs	r3, r2
  400e00:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e02:	e7ca      	b.n	400d9a <pio_set_peripheral+0x28>

00400e04 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e04:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e06:	f012 0f01 	tst.w	r2, #1
  400e0a:	d10d      	bne.n	400e28 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400e0c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e0e:	f012 0f0a 	tst.w	r2, #10
  400e12:	d00b      	beq.n	400e2c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400e14:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400e16:	f012 0f02 	tst.w	r2, #2
  400e1a:	d109      	bne.n	400e30 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400e1c:	f012 0f08 	tst.w	r2, #8
  400e20:	d008      	beq.n	400e34 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400e22:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400e26:	e005      	b.n	400e34 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400e28:	6641      	str	r1, [r0, #100]	; 0x64
  400e2a:	e7f0      	b.n	400e0e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400e2c:	6241      	str	r1, [r0, #36]	; 0x24
  400e2e:	e7f2      	b.n	400e16 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400e30:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400e34:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e36:	6001      	str	r1, [r0, #0]
  400e38:	4770      	bx	lr

00400e3a <pio_set_output>:
{
  400e3a:	b410      	push	{r4}
  400e3c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400e3e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e40:	b94c      	cbnz	r4, 400e56 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400e42:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400e44:	b14b      	cbz	r3, 400e5a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400e46:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400e48:	b94a      	cbnz	r2, 400e5e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400e4a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400e4c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e4e:	6001      	str	r1, [r0, #0]
}
  400e50:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e54:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400e56:	6641      	str	r1, [r0, #100]	; 0x64
  400e58:	e7f4      	b.n	400e44 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400e5a:	6541      	str	r1, [r0, #84]	; 0x54
  400e5c:	e7f4      	b.n	400e48 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400e5e:	6301      	str	r1, [r0, #48]	; 0x30
  400e60:	e7f4      	b.n	400e4c <pio_set_output+0x12>
	...

00400e64 <pio_configure>:
{
  400e64:	b570      	push	{r4, r5, r6, lr}
  400e66:	b082      	sub	sp, #8
  400e68:	4605      	mov	r5, r0
  400e6a:	4616      	mov	r6, r2
  400e6c:	461c      	mov	r4, r3
	switch (ul_type) {
  400e6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e72:	d014      	beq.n	400e9e <pio_configure+0x3a>
  400e74:	d90a      	bls.n	400e8c <pio_configure+0x28>
  400e76:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e7a:	d024      	beq.n	400ec6 <pio_configure+0x62>
  400e7c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e80:	d021      	beq.n	400ec6 <pio_configure+0x62>
  400e82:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e86:	d017      	beq.n	400eb8 <pio_configure+0x54>
		return 0;
  400e88:	2000      	movs	r0, #0
  400e8a:	e01a      	b.n	400ec2 <pio_configure+0x5e>
	switch (ul_type) {
  400e8c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e90:	d005      	beq.n	400e9e <pio_configure+0x3a>
  400e92:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e96:	d002      	beq.n	400e9e <pio_configure+0x3a>
  400e98:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e9c:	d1f4      	bne.n	400e88 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400e9e:	4632      	mov	r2, r6
  400ea0:	4628      	mov	r0, r5
  400ea2:	4b11      	ldr	r3, [pc, #68]	; (400ee8 <pio_configure+0x84>)
  400ea4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400ea6:	f014 0f01 	tst.w	r4, #1
  400eaa:	d102      	bne.n	400eb2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400eac:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400eae:	2001      	movs	r0, #1
  400eb0:	e007      	b.n	400ec2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400eb2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400eb4:	2001      	movs	r0, #1
  400eb6:	e004      	b.n	400ec2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400eb8:	461a      	mov	r2, r3
  400eba:	4631      	mov	r1, r6
  400ebc:	4b0b      	ldr	r3, [pc, #44]	; (400eec <pio_configure+0x88>)
  400ebe:	4798      	blx	r3
	return 1;
  400ec0:	2001      	movs	r0, #1
}
  400ec2:	b002      	add	sp, #8
  400ec4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400ec6:	f004 0301 	and.w	r3, r4, #1
  400eca:	9300      	str	r3, [sp, #0]
  400ecc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ed0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ed4:	bf14      	ite	ne
  400ed6:	2200      	movne	r2, #0
  400ed8:	2201      	moveq	r2, #1
  400eda:	4631      	mov	r1, r6
  400edc:	4628      	mov	r0, r5
  400ede:	4c04      	ldr	r4, [pc, #16]	; (400ef0 <pio_configure+0x8c>)
  400ee0:	47a0      	blx	r4
	return 1;
  400ee2:	2001      	movs	r0, #1
		break;
  400ee4:	e7ed      	b.n	400ec2 <pio_configure+0x5e>
  400ee6:	bf00      	nop
  400ee8:	00400d73 	.word	0x00400d73
  400eec:	00400e05 	.word	0x00400e05
  400ef0:	00400e3b 	.word	0x00400e3b

00400ef4 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400ef4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400ef6:	420b      	tst	r3, r1
}
  400ef8:	bf14      	ite	ne
  400efa:	2001      	movne	r0, #1
  400efc:	2000      	moveq	r0, #0
  400efe:	4770      	bx	lr

00400f00 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400f00:	f012 0f10 	tst.w	r2, #16
  400f04:	d012      	beq.n	400f2c <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400f06:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400f0a:	f012 0f20 	tst.w	r2, #32
  400f0e:	d007      	beq.n	400f20 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400f10:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400f14:	f012 0f40 	tst.w	r2, #64	; 0x40
  400f18:	d005      	beq.n	400f26 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400f1a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400f1e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400f20:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400f24:	e7f6      	b.n	400f14 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400f26:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400f2a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400f2c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400f30:	4770      	bx	lr

00400f32 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400f32:	6401      	str	r1, [r0, #64]	; 0x40
  400f34:	4770      	bx	lr

00400f36 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f38:	4770      	bx	lr

00400f3a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f3c:	4770      	bx	lr
	...

00400f40 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f44:	4604      	mov	r4, r0
  400f46:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f48:	4b0e      	ldr	r3, [pc, #56]	; (400f84 <pio_handler_process+0x44>)
  400f4a:	4798      	blx	r3
  400f4c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f4e:	4620      	mov	r0, r4
  400f50:	4b0d      	ldr	r3, [pc, #52]	; (400f88 <pio_handler_process+0x48>)
  400f52:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f54:	4005      	ands	r5, r0
  400f56:	d013      	beq.n	400f80 <pio_handler_process+0x40>
  400f58:	4c0c      	ldr	r4, [pc, #48]	; (400f8c <pio_handler_process+0x4c>)
  400f5a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f5e:	e003      	b.n	400f68 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f60:	42b4      	cmp	r4, r6
  400f62:	d00d      	beq.n	400f80 <pio_handler_process+0x40>
  400f64:	3410      	adds	r4, #16
		while (status != 0) {
  400f66:	b15d      	cbz	r5, 400f80 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f68:	6820      	ldr	r0, [r4, #0]
  400f6a:	4540      	cmp	r0, r8
  400f6c:	d1f8      	bne.n	400f60 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f6e:	6861      	ldr	r1, [r4, #4]
  400f70:	4229      	tst	r1, r5
  400f72:	d0f5      	beq.n	400f60 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f74:	68e3      	ldr	r3, [r4, #12]
  400f76:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f78:	6863      	ldr	r3, [r4, #4]
  400f7a:	ea25 0503 	bic.w	r5, r5, r3
  400f7e:	e7ef      	b.n	400f60 <pio_handler_process+0x20>
  400f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f84:	00400f37 	.word	0x00400f37
  400f88:	00400f3b 	.word	0x00400f3b
  400f8c:	20400be4 	.word	0x20400be4

00400f90 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400f92:	4c18      	ldr	r4, [pc, #96]	; (400ff4 <pio_handler_set+0x64>)
  400f94:	6826      	ldr	r6, [r4, #0]
  400f96:	2e06      	cmp	r6, #6
  400f98:	d82a      	bhi.n	400ff0 <pio_handler_set+0x60>
  400f9a:	f04f 0c00 	mov.w	ip, #0
  400f9e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fa0:	4f15      	ldr	r7, [pc, #84]	; (400ff8 <pio_handler_set+0x68>)
  400fa2:	e004      	b.n	400fae <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400fa4:	3401      	adds	r4, #1
  400fa6:	b2e4      	uxtb	r4, r4
  400fa8:	46a4      	mov	ip, r4
  400faa:	42a6      	cmp	r6, r4
  400fac:	d309      	bcc.n	400fc2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400fae:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fb0:	0125      	lsls	r5, r4, #4
  400fb2:	597d      	ldr	r5, [r7, r5]
  400fb4:	428d      	cmp	r5, r1
  400fb6:	d1f5      	bne.n	400fa4 <pio_handler_set+0x14>
  400fb8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400fbc:	686d      	ldr	r5, [r5, #4]
  400fbe:	4295      	cmp	r5, r2
  400fc0:	d1f0      	bne.n	400fa4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400fc2:	4d0d      	ldr	r5, [pc, #52]	; (400ff8 <pio_handler_set+0x68>)
  400fc4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400fc8:	eb05 040e 	add.w	r4, r5, lr
  400fcc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400fd0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400fd2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400fd4:	9906      	ldr	r1, [sp, #24]
  400fd6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400fd8:	3601      	adds	r6, #1
  400fda:	4566      	cmp	r6, ip
  400fdc:	d005      	beq.n	400fea <pio_handler_set+0x5a>
  400fde:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400fe0:	461a      	mov	r2, r3
  400fe2:	4b06      	ldr	r3, [pc, #24]	; (400ffc <pio_handler_set+0x6c>)
  400fe4:	4798      	blx	r3

	return 0;
  400fe6:	2000      	movs	r0, #0
  400fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400fea:	4902      	ldr	r1, [pc, #8]	; (400ff4 <pio_handler_set+0x64>)
  400fec:	600e      	str	r6, [r1, #0]
  400fee:	e7f6      	b.n	400fde <pio_handler_set+0x4e>
		return 1;
  400ff0:	2001      	movs	r0, #1
}
  400ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff4:	20400c54 	.word	0x20400c54
  400ff8:	20400be4 	.word	0x20400be4
  400ffc:	00400f01 	.word	0x00400f01

00401000 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401000:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401002:	210a      	movs	r1, #10
  401004:	4801      	ldr	r0, [pc, #4]	; (40100c <PIOA_Handler+0xc>)
  401006:	4b02      	ldr	r3, [pc, #8]	; (401010 <PIOA_Handler+0x10>)
  401008:	4798      	blx	r3
  40100a:	bd08      	pop	{r3, pc}
  40100c:	400e0e00 	.word	0x400e0e00
  401010:	00400f41 	.word	0x00400f41

00401014 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401014:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401016:	210b      	movs	r1, #11
  401018:	4801      	ldr	r0, [pc, #4]	; (401020 <PIOB_Handler+0xc>)
  40101a:	4b02      	ldr	r3, [pc, #8]	; (401024 <PIOB_Handler+0x10>)
  40101c:	4798      	blx	r3
  40101e:	bd08      	pop	{r3, pc}
  401020:	400e1000 	.word	0x400e1000
  401024:	00400f41 	.word	0x00400f41

00401028 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401028:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40102a:	210c      	movs	r1, #12
  40102c:	4801      	ldr	r0, [pc, #4]	; (401034 <PIOC_Handler+0xc>)
  40102e:	4b02      	ldr	r3, [pc, #8]	; (401038 <PIOC_Handler+0x10>)
  401030:	4798      	blx	r3
  401032:	bd08      	pop	{r3, pc}
  401034:	400e1200 	.word	0x400e1200
  401038:	00400f41 	.word	0x00400f41

0040103c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40103c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40103e:	2110      	movs	r1, #16
  401040:	4801      	ldr	r0, [pc, #4]	; (401048 <PIOD_Handler+0xc>)
  401042:	4b02      	ldr	r3, [pc, #8]	; (40104c <PIOD_Handler+0x10>)
  401044:	4798      	blx	r3
  401046:	bd08      	pop	{r3, pc}
  401048:	400e1400 	.word	0x400e1400
  40104c:	00400f41 	.word	0x00400f41

00401050 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401050:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401052:	2111      	movs	r1, #17
  401054:	4801      	ldr	r0, [pc, #4]	; (40105c <PIOE_Handler+0xc>)
  401056:	4b02      	ldr	r3, [pc, #8]	; (401060 <PIOE_Handler+0x10>)
  401058:	4798      	blx	r3
  40105a:	bd08      	pop	{r3, pc}
  40105c:	400e1600 	.word	0x400e1600
  401060:	00400f41 	.word	0x00400f41

00401064 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401064:	2803      	cmp	r0, #3
  401066:	d011      	beq.n	40108c <pmc_mck_set_division+0x28>
  401068:	2804      	cmp	r0, #4
  40106a:	d012      	beq.n	401092 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40106c:	2802      	cmp	r0, #2
  40106e:	bf0c      	ite	eq
  401070:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401074:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401076:	4a08      	ldr	r2, [pc, #32]	; (401098 <pmc_mck_set_division+0x34>)
  401078:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40107a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40107e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401080:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401082:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401084:	f013 0f08 	tst.w	r3, #8
  401088:	d0fb      	beq.n	401082 <pmc_mck_set_division+0x1e>
}
  40108a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40108c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401090:	e7f1      	b.n	401076 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401092:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401096:	e7ee      	b.n	401076 <pmc_mck_set_division+0x12>
  401098:	400e0600 	.word	0x400e0600

0040109c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40109c:	4a17      	ldr	r2, [pc, #92]	; (4010fc <pmc_switch_mck_to_pllack+0x60>)
  40109e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4010a4:	4318      	orrs	r0, r3
  4010a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010aa:	f013 0f08 	tst.w	r3, #8
  4010ae:	d10a      	bne.n	4010c6 <pmc_switch_mck_to_pllack+0x2a>
  4010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010b4:	4911      	ldr	r1, [pc, #68]	; (4010fc <pmc_switch_mck_to_pllack+0x60>)
  4010b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010b8:	f012 0f08 	tst.w	r2, #8
  4010bc:	d103      	bne.n	4010c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010be:	3b01      	subs	r3, #1
  4010c0:	d1f9      	bne.n	4010b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4010c2:	2001      	movs	r0, #1
  4010c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4010c6:	4a0d      	ldr	r2, [pc, #52]	; (4010fc <pmc_switch_mck_to_pllack+0x60>)
  4010c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ca:	f023 0303 	bic.w	r3, r3, #3
  4010ce:	f043 0302 	orr.w	r3, r3, #2
  4010d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010d6:	f013 0f08 	tst.w	r3, #8
  4010da:	d10a      	bne.n	4010f2 <pmc_switch_mck_to_pllack+0x56>
  4010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010e0:	4906      	ldr	r1, [pc, #24]	; (4010fc <pmc_switch_mck_to_pllack+0x60>)
  4010e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010e4:	f012 0f08 	tst.w	r2, #8
  4010e8:	d105      	bne.n	4010f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010ea:	3b01      	subs	r3, #1
  4010ec:	d1f9      	bne.n	4010e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4010ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4010f0:	4770      	bx	lr
	return 0;
  4010f2:	2000      	movs	r0, #0
  4010f4:	4770      	bx	lr
  4010f6:	2000      	movs	r0, #0
  4010f8:	4770      	bx	lr
  4010fa:	bf00      	nop
  4010fc:	400e0600 	.word	0x400e0600

00401100 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401100:	b9a0      	cbnz	r0, 40112c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401102:	480e      	ldr	r0, [pc, #56]	; (40113c <pmc_switch_mainck_to_xtal+0x3c>)
  401104:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401106:	0209      	lsls	r1, r1, #8
  401108:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40110a:	4a0d      	ldr	r2, [pc, #52]	; (401140 <pmc_switch_mainck_to_xtal+0x40>)
  40110c:	401a      	ands	r2, r3
  40110e:	4b0d      	ldr	r3, [pc, #52]	; (401144 <pmc_switch_mainck_to_xtal+0x44>)
  401110:	4313      	orrs	r3, r2
  401112:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401114:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401116:	4602      	mov	r2, r0
  401118:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40111a:	f013 0f01 	tst.w	r3, #1
  40111e:	d0fb      	beq.n	401118 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401120:	4a06      	ldr	r2, [pc, #24]	; (40113c <pmc_switch_mainck_to_xtal+0x3c>)
  401122:	6a11      	ldr	r1, [r2, #32]
  401124:	4b08      	ldr	r3, [pc, #32]	; (401148 <pmc_switch_mainck_to_xtal+0x48>)
  401126:	430b      	orrs	r3, r1
  401128:	6213      	str	r3, [r2, #32]
  40112a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40112c:	4903      	ldr	r1, [pc, #12]	; (40113c <pmc_switch_mainck_to_xtal+0x3c>)
  40112e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401130:	4a06      	ldr	r2, [pc, #24]	; (40114c <pmc_switch_mainck_to_xtal+0x4c>)
  401132:	401a      	ands	r2, r3
  401134:	4b06      	ldr	r3, [pc, #24]	; (401150 <pmc_switch_mainck_to_xtal+0x50>)
  401136:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401138:	620b      	str	r3, [r1, #32]
  40113a:	4770      	bx	lr
  40113c:	400e0600 	.word	0x400e0600
  401140:	ffc8fffc 	.word	0xffc8fffc
  401144:	00370001 	.word	0x00370001
  401148:	01370000 	.word	0x01370000
  40114c:	fec8fffc 	.word	0xfec8fffc
  401150:	01370002 	.word	0x01370002

00401154 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401154:	4b02      	ldr	r3, [pc, #8]	; (401160 <pmc_osc_is_ready_mainck+0xc>)
  401156:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401158:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop
  401160:	400e0600 	.word	0x400e0600

00401164 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401164:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401168:	4b01      	ldr	r3, [pc, #4]	; (401170 <pmc_disable_pllack+0xc>)
  40116a:	629a      	str	r2, [r3, #40]	; 0x28
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	400e0600 	.word	0x400e0600

00401174 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401174:	4b02      	ldr	r3, [pc, #8]	; (401180 <pmc_is_locked_pllack+0xc>)
  401176:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401178:	f000 0002 	and.w	r0, r0, #2
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	400e0600 	.word	0x400e0600

00401184 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401184:	283f      	cmp	r0, #63	; 0x3f
  401186:	d81e      	bhi.n	4011c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401188:	281f      	cmp	r0, #31
  40118a:	d80c      	bhi.n	4011a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40118c:	4b11      	ldr	r3, [pc, #68]	; (4011d4 <pmc_enable_periph_clk+0x50>)
  40118e:	699a      	ldr	r2, [r3, #24]
  401190:	2301      	movs	r3, #1
  401192:	4083      	lsls	r3, r0
  401194:	4393      	bics	r3, r2
  401196:	d018      	beq.n	4011ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401198:	2301      	movs	r3, #1
  40119a:	fa03 f000 	lsl.w	r0, r3, r0
  40119e:	4b0d      	ldr	r3, [pc, #52]	; (4011d4 <pmc_enable_periph_clk+0x50>)
  4011a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4011a2:	2000      	movs	r0, #0
  4011a4:	4770      	bx	lr
		ul_id -= 32;
  4011a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4011a8:	4b0a      	ldr	r3, [pc, #40]	; (4011d4 <pmc_enable_periph_clk+0x50>)
  4011aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4011ae:	2301      	movs	r3, #1
  4011b0:	4083      	lsls	r3, r0
  4011b2:	4393      	bics	r3, r2
  4011b4:	d00b      	beq.n	4011ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011b6:	2301      	movs	r3, #1
  4011b8:	fa03 f000 	lsl.w	r0, r3, r0
  4011bc:	4b05      	ldr	r3, [pc, #20]	; (4011d4 <pmc_enable_periph_clk+0x50>)
  4011be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4011c2:	2000      	movs	r0, #0
  4011c4:	4770      	bx	lr
		return 1;
  4011c6:	2001      	movs	r0, #1
  4011c8:	4770      	bx	lr
	return 0;
  4011ca:	2000      	movs	r0, #0
  4011cc:	4770      	bx	lr
  4011ce:	2000      	movs	r0, #0
}
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	400e0600 	.word	0x400e0600

004011d8 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4011d8:	4770      	bx	lr
	...

004011dc <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4011dc:	4a10      	ldr	r2, [pc, #64]	; (401220 <pmc_enable_waitmode+0x44>)
  4011de:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4011e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4011e8:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4011ea:	6a11      	ldr	r1, [r2, #32]
  4011ec:	4b0d      	ldr	r3, [pc, #52]	; (401224 <pmc_enable_waitmode+0x48>)
  4011ee:	430b      	orrs	r3, r1
  4011f0:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011f2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011f4:	f013 0f08 	tst.w	r3, #8
  4011f8:	d0fb      	beq.n	4011f2 <pmc_enable_waitmode+0x16>
  4011fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4011fe:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401200:	3b01      	subs	r3, #1
  401202:	d1fc      	bne.n	4011fe <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  401204:	4a06      	ldr	r2, [pc, #24]	; (401220 <pmc_enable_waitmode+0x44>)
  401206:	6a13      	ldr	r3, [r2, #32]
  401208:	f013 0f08 	tst.w	r3, #8
  40120c:	d0fb      	beq.n	401206 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40120e:	4a04      	ldr	r2, [pc, #16]	; (401220 <pmc_enable_waitmode+0x44>)
  401210:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401212:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40121a:	6713      	str	r3, [r2, #112]	; 0x70
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop
  401220:	400e0600 	.word	0x400e0600
  401224:	00370004 	.word	0x00370004

00401228 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  40122c:	1e43      	subs	r3, r0, #1
  40122e:	2b04      	cmp	r3, #4
  401230:	f200 8107 	bhi.w	401442 <pmc_sleep+0x21a>
  401234:	e8df f013 	tbh	[pc, r3, lsl #1]
  401238:	00050005 	.word	0x00050005
  40123c:	00150015 	.word	0x00150015
  401240:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401242:	4a81      	ldr	r2, [pc, #516]	; (401448 <pmc_sleep+0x220>)
  401244:	6913      	ldr	r3, [r2, #16]
  401246:	f023 0304 	bic.w	r3, r3, #4
  40124a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40124c:	2201      	movs	r2, #1
  40124e:	4b7f      	ldr	r3, [pc, #508]	; (40144c <pmc_sleep+0x224>)
  401250:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401252:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401256:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401258:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  40125c:	bf30      	wfi
  40125e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401262:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401264:	2803      	cmp	r0, #3
  401266:	bf0c      	ite	eq
  401268:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40126a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40126e:	4b78      	ldr	r3, [pc, #480]	; (401450 <pmc_sleep+0x228>)
  401270:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401272:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401274:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401278:	2200      	movs	r2, #0
  40127a:	4b74      	ldr	r3, [pc, #464]	; (40144c <pmc_sleep+0x224>)
  40127c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40127e:	2201      	movs	r2, #1
  401280:	4b74      	ldr	r3, [pc, #464]	; (401454 <pmc_sleep+0x22c>)
  401282:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401284:	4b74      	ldr	r3, [pc, #464]	; (401458 <pmc_sleep+0x230>)
  401286:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401288:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40128a:	4a74      	ldr	r2, [pc, #464]	; (40145c <pmc_sleep+0x234>)
  40128c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401290:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401292:	4a73      	ldr	r2, [pc, #460]	; (401460 <pmc_sleep+0x238>)
  401294:	433a      	orrs	r2, r7
  401296:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401298:	f005 0903 	and.w	r9, r5, #3
  40129c:	f1b9 0f01 	cmp.w	r9, #1
  4012a0:	f240 8089 	bls.w	4013b6 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4012a4:	f025 0103 	bic.w	r1, r5, #3
  4012a8:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4012ac:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012ae:	461a      	mov	r2, r3
  4012b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012b2:	f013 0f08 	tst.w	r3, #8
  4012b6:	d0fb      	beq.n	4012b0 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4012b8:	f011 0f70 	tst.w	r1, #112	; 0x70
  4012bc:	d008      	beq.n	4012d0 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4012be:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4012c2:	4b65      	ldr	r3, [pc, #404]	; (401458 <pmc_sleep+0x230>)
  4012c4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012c6:	461a      	mov	r2, r3
  4012c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ca:	f013 0f08 	tst.w	r3, #8
  4012ce:	d0fb      	beq.n	4012c8 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4012d0:	4b64      	ldr	r3, [pc, #400]	; (401464 <pmc_sleep+0x23c>)
  4012d2:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012d4:	4a60      	ldr	r2, [pc, #384]	; (401458 <pmc_sleep+0x230>)
  4012d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4012dc:	d0fb      	beq.n	4012d6 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012de:	4a5e      	ldr	r2, [pc, #376]	; (401458 <pmc_sleep+0x230>)
  4012e0:	6a11      	ldr	r1, [r2, #32]
  4012e2:	4b61      	ldr	r3, [pc, #388]	; (401468 <pmc_sleep+0x240>)
  4012e4:	400b      	ands	r3, r1
  4012e6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012ea:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4012ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012f2:	d0fb      	beq.n	4012ec <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4012f4:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4012f8:	4a58      	ldr	r2, [pc, #352]	; (40145c <pmc_sleep+0x234>)
  4012fa:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4012fc:	2c04      	cmp	r4, #4
  4012fe:	d05c      	beq.n	4013ba <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401300:	4c52      	ldr	r4, [pc, #328]	; (40144c <pmc_sleep+0x224>)
  401302:	2301      	movs	r3, #1
  401304:	7023      	strb	r3, [r4, #0]
  401306:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40130a:	b662      	cpsie	i

		pmc_enable_waitmode();
  40130c:	4b57      	ldr	r3, [pc, #348]	; (40146c <pmc_sleep+0x244>)
  40130e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401310:	b672      	cpsid	i
  401312:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401316:	2300      	movs	r3, #0
  401318:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40131a:	f017 0f02 	tst.w	r7, #2
  40131e:	d055      	beq.n	4013cc <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401320:	4a4d      	ldr	r2, [pc, #308]	; (401458 <pmc_sleep+0x230>)
  401322:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401324:	4952      	ldr	r1, [pc, #328]	; (401470 <pmc_sleep+0x248>)
  401326:	4019      	ands	r1, r3
  401328:	4b52      	ldr	r3, [pc, #328]	; (401474 <pmc_sleep+0x24c>)
  40132a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40132c:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40132e:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401330:	4b51      	ldr	r3, [pc, #324]	; (401478 <pmc_sleep+0x250>)
  401332:	400b      	ands	r3, r1
  401334:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401338:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40133a:	4b50      	ldr	r3, [pc, #320]	; (40147c <pmc_sleep+0x254>)
  40133c:	4033      	ands	r3, r6
  40133e:	2b00      	cmp	r3, #0
  401340:	d06e      	beq.n	401420 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401342:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401346:	4b44      	ldr	r3, [pc, #272]	; (401458 <pmc_sleep+0x230>)
  401348:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40134a:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40134c:	f1b9 0f02 	cmp.w	r9, #2
  401350:	d104      	bne.n	40135c <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401352:	4a41      	ldr	r2, [pc, #260]	; (401458 <pmc_sleep+0x230>)
  401354:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401356:	f013 0f02 	tst.w	r3, #2
  40135a:	d0fb      	beq.n	401354 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  40135c:	4a3e      	ldr	r2, [pc, #248]	; (401458 <pmc_sleep+0x230>)
  40135e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401364:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401368:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40136a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40136c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40136e:	f013 0f08 	tst.w	r3, #8
  401372:	d0fb      	beq.n	40136c <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401374:	4b39      	ldr	r3, [pc, #228]	; (40145c <pmc_sleep+0x234>)
  401376:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40137a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40137e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401380:	461a      	mov	r2, r3
  401382:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401384:	f013 0f08 	tst.w	r3, #8
  401388:	d0fb      	beq.n	401382 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40138a:	4a33      	ldr	r2, [pc, #204]	; (401458 <pmc_sleep+0x230>)
  40138c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40138e:	420b      	tst	r3, r1
  401390:	d0fc      	beq.n	40138c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401392:	2200      	movs	r2, #0
  401394:	4b2f      	ldr	r3, [pc, #188]	; (401454 <pmc_sleep+0x22c>)
  401396:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401398:	4b39      	ldr	r3, [pc, #228]	; (401480 <pmc_sleep+0x258>)
  40139a:	681b      	ldr	r3, [r3, #0]
  40139c:	b11b      	cbz	r3, 4013a6 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40139e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4013a0:	2200      	movs	r2, #0
  4013a2:	4b37      	ldr	r3, [pc, #220]	; (401480 <pmc_sleep+0x258>)
  4013a4:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4013a6:	2201      	movs	r2, #1
  4013a8:	4b28      	ldr	r3, [pc, #160]	; (40144c <pmc_sleep+0x224>)
  4013aa:	701a      	strb	r2, [r3, #0]
  4013ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013b0:	b662      	cpsie	i
  4013b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4013b6:	4629      	mov	r1, r5
  4013b8:	e77e      	b.n	4012b8 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013ba:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4013be:	6a11      	ldr	r1, [r2, #32]
  4013c0:	4b30      	ldr	r3, [pc, #192]	; (401484 <pmc_sleep+0x25c>)
  4013c2:	400b      	ands	r3, r1
  4013c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013c8:	6213      	str	r3, [r2, #32]
  4013ca:	e799      	b.n	401300 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013cc:	f017 0f01 	tst.w	r7, #1
  4013d0:	d0b3      	beq.n	40133a <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013d2:	4b21      	ldr	r3, [pc, #132]	; (401458 <pmc_sleep+0x230>)
  4013d4:	6a1b      	ldr	r3, [r3, #32]
  4013d6:	f013 0f01 	tst.w	r3, #1
  4013da:	d10b      	bne.n	4013f4 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013dc:	491e      	ldr	r1, [pc, #120]	; (401458 <pmc_sleep+0x230>)
  4013de:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4013e0:	4a29      	ldr	r2, [pc, #164]	; (401488 <pmc_sleep+0x260>)
  4013e2:	401a      	ands	r2, r3
  4013e4:	4b29      	ldr	r3, [pc, #164]	; (40148c <pmc_sleep+0x264>)
  4013e6:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013e8:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013ea:	460a      	mov	r2, r1
  4013ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ee:	f013 0f01 	tst.w	r3, #1
  4013f2:	d0fb      	beq.n	4013ec <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4013f4:	4b18      	ldr	r3, [pc, #96]	; (401458 <pmc_sleep+0x230>)
  4013f6:	6a1b      	ldr	r3, [r3, #32]
  4013f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013fc:	d108      	bne.n	401410 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4013fe:	4a16      	ldr	r2, [pc, #88]	; (401458 <pmc_sleep+0x230>)
  401400:	6a11      	ldr	r1, [r2, #32]
  401402:	4b23      	ldr	r3, [pc, #140]	; (401490 <pmc_sleep+0x268>)
  401404:	430b      	orrs	r3, r1
  401406:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401408:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40140a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40140e:	d0fb      	beq.n	401408 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401410:	4a11      	ldr	r2, [pc, #68]	; (401458 <pmc_sleep+0x230>)
  401412:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401414:	4b18      	ldr	r3, [pc, #96]	; (401478 <pmc_sleep+0x250>)
  401416:	400b      	ands	r3, r1
  401418:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40141c:	6213      	str	r3, [r2, #32]
  40141e:	e78c      	b.n	40133a <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401420:	2100      	movs	r1, #0
  401422:	e793      	b.n	40134c <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401424:	4a08      	ldr	r2, [pc, #32]	; (401448 <pmc_sleep+0x220>)
  401426:	6913      	ldr	r3, [r2, #16]
  401428:	f043 0304 	orr.w	r3, r3, #4
  40142c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40142e:	4a19      	ldr	r2, [pc, #100]	; (401494 <pmc_sleep+0x26c>)
  401430:	4b19      	ldr	r3, [pc, #100]	; (401498 <pmc_sleep+0x270>)
  401432:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401434:	2201      	movs	r2, #1
  401436:	4b05      	ldr	r3, [pc, #20]	; (40144c <pmc_sleep+0x224>)
  401438:	701a      	strb	r2, [r3, #0]
  40143a:	f3bf 8f5f 	dmb	sy
  40143e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401440:	bf30      	wfi
  401442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401446:	bf00      	nop
  401448:	e000ed00 	.word	0xe000ed00
  40144c:	2040000a 	.word	0x2040000a
  401450:	004011d9 	.word	0x004011d9
  401454:	20400c58 	.word	0x20400c58
  401458:	400e0600 	.word	0x400e0600
  40145c:	400e0c00 	.word	0x400e0c00
  401460:	00370008 	.word	0x00370008
  401464:	00401165 	.word	0x00401165
  401468:	fec8ffff 	.word	0xfec8ffff
  40146c:	004011dd 	.word	0x004011dd
  401470:	fec8fffc 	.word	0xfec8fffc
  401474:	01370002 	.word	0x01370002
  401478:	ffc8ff87 	.word	0xffc8ff87
  40147c:	07ff0000 	.word	0x07ff0000
  401480:	20400c5c 	.word	0x20400c5c
  401484:	ffc8fffe 	.word	0xffc8fffe
  401488:	ffc8fffc 	.word	0xffc8fffc
  40148c:	00370001 	.word	0x00370001
  401490:	01370000 	.word	0x01370000
  401494:	a5000004 	.word	0xa5000004
  401498:	400e1810 	.word	0x400e1810

0040149c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40149c:	6943      	ldr	r3, [r0, #20]
  40149e:	f013 0f02 	tst.w	r3, #2
  4014a2:	d002      	beq.n	4014aa <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4014a4:	61c1      	str	r1, [r0, #28]
	return 0;
  4014a6:	2000      	movs	r0, #0
  4014a8:	4770      	bx	lr
		return 1;
  4014aa:	2001      	movs	r0, #1
}
  4014ac:	4770      	bx	lr

004014ae <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4014ae:	6943      	ldr	r3, [r0, #20]
  4014b0:	f013 0f01 	tst.w	r3, #1
  4014b4:	d003      	beq.n	4014be <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4014b6:	6983      	ldr	r3, [r0, #24]
  4014b8:	700b      	strb	r3, [r1, #0]
	return 0;
  4014ba:	2000      	movs	r0, #0
  4014bc:	4770      	bx	lr
		return 1;
  4014be:	2001      	movs	r0, #1
}
  4014c0:	4770      	bx	lr

004014c2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4014c2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4014c4:	010b      	lsls	r3, r1, #4
  4014c6:	4293      	cmp	r3, r2
  4014c8:	d914      	bls.n	4014f4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4014ca:	00c9      	lsls	r1, r1, #3
  4014cc:	084b      	lsrs	r3, r1, #1
  4014ce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4014d2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4014d6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4014d8:	1e5c      	subs	r4, r3, #1
  4014da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4014de:	428c      	cmp	r4, r1
  4014e0:	d901      	bls.n	4014e6 <usart_set_async_baudrate+0x24>
		return 1;
  4014e2:	2001      	movs	r0, #1
  4014e4:	e017      	b.n	401516 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4014e6:	6841      	ldr	r1, [r0, #4]
  4014e8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4014ec:	6041      	str	r1, [r0, #4]
  4014ee:	e00c      	b.n	40150a <usart_set_async_baudrate+0x48>
		return 1;
  4014f0:	2001      	movs	r0, #1
  4014f2:	e010      	b.n	401516 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4014f4:	0859      	lsrs	r1, r3, #1
  4014f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4014fa:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4014fe:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401500:	1e5c      	subs	r4, r3, #1
  401502:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401506:	428c      	cmp	r4, r1
  401508:	d8f2      	bhi.n	4014f0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40150a:	0412      	lsls	r2, r2, #16
  40150c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401510:	431a      	orrs	r2, r3
  401512:	6202      	str	r2, [r0, #32]

	return 0;
  401514:	2000      	movs	r0, #0
}
  401516:	f85d 4b04 	ldr.w	r4, [sp], #4
  40151a:	4770      	bx	lr

0040151c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40151c:	4b08      	ldr	r3, [pc, #32]	; (401540 <usart_reset+0x24>)
  40151e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401522:	2300      	movs	r3, #0
  401524:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401526:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401528:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40152a:	2388      	movs	r3, #136	; 0x88
  40152c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40152e:	2324      	movs	r3, #36	; 0x24
  401530:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401532:	f44f 7380 	mov.w	r3, #256	; 0x100
  401536:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401538:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40153c:	6003      	str	r3, [r0, #0]
  40153e:	4770      	bx	lr
  401540:	55534100 	.word	0x55534100

00401544 <usart_init_rs232>:
{
  401544:	b570      	push	{r4, r5, r6, lr}
  401546:	4605      	mov	r5, r0
  401548:	460c      	mov	r4, r1
  40154a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40154c:	4b0f      	ldr	r3, [pc, #60]	; (40158c <usart_init_rs232+0x48>)
  40154e:	4798      	blx	r3
	ul_reg_val = 0;
  401550:	2200      	movs	r2, #0
  401552:	4b0f      	ldr	r3, [pc, #60]	; (401590 <usart_init_rs232+0x4c>)
  401554:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401556:	b1a4      	cbz	r4, 401582 <usart_init_rs232+0x3e>
  401558:	4632      	mov	r2, r6
  40155a:	6821      	ldr	r1, [r4, #0]
  40155c:	4628      	mov	r0, r5
  40155e:	4b0d      	ldr	r3, [pc, #52]	; (401594 <usart_init_rs232+0x50>)
  401560:	4798      	blx	r3
  401562:	4602      	mov	r2, r0
  401564:	b978      	cbnz	r0, 401586 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401566:	6863      	ldr	r3, [r4, #4]
  401568:	68a1      	ldr	r1, [r4, #8]
  40156a:	430b      	orrs	r3, r1
  40156c:	6921      	ldr	r1, [r4, #16]
  40156e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401570:	68e1      	ldr	r1, [r4, #12]
  401572:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401574:	4906      	ldr	r1, [pc, #24]	; (401590 <usart_init_rs232+0x4c>)
  401576:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401578:	6869      	ldr	r1, [r5, #4]
  40157a:	430b      	orrs	r3, r1
  40157c:	606b      	str	r3, [r5, #4]
}
  40157e:	4610      	mov	r0, r2
  401580:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401582:	2201      	movs	r2, #1
  401584:	e7fb      	b.n	40157e <usart_init_rs232+0x3a>
  401586:	2201      	movs	r2, #1
  401588:	e7f9      	b.n	40157e <usart_init_rs232+0x3a>
  40158a:	bf00      	nop
  40158c:	0040151d 	.word	0x0040151d
  401590:	20400c60 	.word	0x20400c60
  401594:	004014c3 	.word	0x004014c3

00401598 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401598:	2340      	movs	r3, #64	; 0x40
  40159a:	6003      	str	r3, [r0, #0]
  40159c:	4770      	bx	lr

0040159e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40159e:	2310      	movs	r3, #16
  4015a0:	6003      	str	r3, [r0, #0]
  4015a2:	4770      	bx	lr

004015a4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4015a4:	6943      	ldr	r3, [r0, #20]
  4015a6:	f013 0f02 	tst.w	r3, #2
  4015aa:	d004      	beq.n	4015b6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4015ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4015b0:	61c1      	str	r1, [r0, #28]
	return 0;
  4015b2:	2000      	movs	r0, #0
  4015b4:	4770      	bx	lr
		return 1;
  4015b6:	2001      	movs	r0, #1
}
  4015b8:	4770      	bx	lr

004015ba <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4015ba:	6943      	ldr	r3, [r0, #20]
  4015bc:	f013 0f01 	tst.w	r3, #1
  4015c0:	d005      	beq.n	4015ce <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4015c2:	6983      	ldr	r3, [r0, #24]
  4015c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4015c8:	600b      	str	r3, [r1, #0]
	return 0;
  4015ca:	2000      	movs	r0, #0
  4015cc:	4770      	bx	lr
		return 1;
  4015ce:	2001      	movs	r0, #1
}
  4015d0:	4770      	bx	lr

004015d2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015d2:	e7fe      	b.n	4015d2 <Dummy_Handler>

004015d4 <Reset_Handler>:
{
  4015d4:	b500      	push	{lr}
  4015d6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4015d8:	4b25      	ldr	r3, [pc, #148]	; (401670 <Reset_Handler+0x9c>)
  4015da:	4a26      	ldr	r2, [pc, #152]	; (401674 <Reset_Handler+0xa0>)
  4015dc:	429a      	cmp	r2, r3
  4015de:	d010      	beq.n	401602 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4015e0:	4b25      	ldr	r3, [pc, #148]	; (401678 <Reset_Handler+0xa4>)
  4015e2:	4a23      	ldr	r2, [pc, #140]	; (401670 <Reset_Handler+0x9c>)
  4015e4:	429a      	cmp	r2, r3
  4015e6:	d20c      	bcs.n	401602 <Reset_Handler+0x2e>
  4015e8:	3b01      	subs	r3, #1
  4015ea:	1a9b      	subs	r3, r3, r2
  4015ec:	f023 0303 	bic.w	r3, r3, #3
  4015f0:	3304      	adds	r3, #4
  4015f2:	4413      	add	r3, r2
  4015f4:	491f      	ldr	r1, [pc, #124]	; (401674 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4015f6:	f851 0b04 	ldr.w	r0, [r1], #4
  4015fa:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4015fe:	429a      	cmp	r2, r3
  401600:	d1f9      	bne.n	4015f6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401602:	4b1e      	ldr	r3, [pc, #120]	; (40167c <Reset_Handler+0xa8>)
  401604:	4a1e      	ldr	r2, [pc, #120]	; (401680 <Reset_Handler+0xac>)
  401606:	429a      	cmp	r2, r3
  401608:	d20a      	bcs.n	401620 <Reset_Handler+0x4c>
  40160a:	3b01      	subs	r3, #1
  40160c:	1a9b      	subs	r3, r3, r2
  40160e:	f023 0303 	bic.w	r3, r3, #3
  401612:	3304      	adds	r3, #4
  401614:	4413      	add	r3, r2
                *pDest++ = 0;
  401616:	2100      	movs	r1, #0
  401618:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40161c:	4293      	cmp	r3, r2
  40161e:	d1fb      	bne.n	401618 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401620:	4a18      	ldr	r2, [pc, #96]	; (401684 <Reset_Handler+0xb0>)
  401622:	4b19      	ldr	r3, [pc, #100]	; (401688 <Reset_Handler+0xb4>)
  401624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401628:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40162a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40162e:	fab3 f383 	clz	r3, r3
  401632:	095b      	lsrs	r3, r3, #5
  401634:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401636:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401638:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40163c:	2200      	movs	r2, #0
  40163e:	4b13      	ldr	r3, [pc, #76]	; (40168c <Reset_Handler+0xb8>)
  401640:	701a      	strb	r2, [r3, #0]
	return flags;
  401642:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401644:	4a12      	ldr	r2, [pc, #72]	; (401690 <Reset_Handler+0xbc>)
  401646:	6813      	ldr	r3, [r2, #0]
  401648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40164c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40164e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401652:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401656:	b129      	cbz	r1, 401664 <Reset_Handler+0x90>
		cpu_irq_enable();
  401658:	2201      	movs	r2, #1
  40165a:	4b0c      	ldr	r3, [pc, #48]	; (40168c <Reset_Handler+0xb8>)
  40165c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40165e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401662:	b662      	cpsie	i
        __libc_init_array();
  401664:	4b0b      	ldr	r3, [pc, #44]	; (401694 <Reset_Handler+0xc0>)
  401666:	4798      	blx	r3
        main();
  401668:	4b0b      	ldr	r3, [pc, #44]	; (401698 <Reset_Handler+0xc4>)
  40166a:	4798      	blx	r3
  40166c:	e7fe      	b.n	40166c <Reset_Handler+0x98>
  40166e:	bf00      	nop
  401670:	20400000 	.word	0x20400000
  401674:	00405614 	.word	0x00405614
  401678:	204009c0 	.word	0x204009c0
  40167c:	20400d60 	.word	0x20400d60
  401680:	204009c0 	.word	0x204009c0
  401684:	e000ed00 	.word	0xe000ed00
  401688:	00400000 	.word	0x00400000
  40168c:	2040000a 	.word	0x2040000a
  401690:	e000ed88 	.word	0xe000ed88
  401694:	004027a9 	.word	0x004027a9
  401698:	0040228d 	.word	0x0040228d

0040169c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40169c:	4b3b      	ldr	r3, [pc, #236]	; (40178c <SystemCoreClockUpdate+0xf0>)
  40169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016a0:	f003 0303 	and.w	r3, r3, #3
  4016a4:	2b01      	cmp	r3, #1
  4016a6:	d01d      	beq.n	4016e4 <SystemCoreClockUpdate+0x48>
  4016a8:	b183      	cbz	r3, 4016cc <SystemCoreClockUpdate+0x30>
  4016aa:	2b02      	cmp	r3, #2
  4016ac:	d036      	beq.n	40171c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4016ae:	4b37      	ldr	r3, [pc, #220]	; (40178c <SystemCoreClockUpdate+0xf0>)
  4016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016b6:	2b70      	cmp	r3, #112	; 0x70
  4016b8:	d05f      	beq.n	40177a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016ba:	4b34      	ldr	r3, [pc, #208]	; (40178c <SystemCoreClockUpdate+0xf0>)
  4016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4016be:	4934      	ldr	r1, [pc, #208]	; (401790 <SystemCoreClockUpdate+0xf4>)
  4016c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4016c4:	680b      	ldr	r3, [r1, #0]
  4016c6:	40d3      	lsrs	r3, r2
  4016c8:	600b      	str	r3, [r1, #0]
  4016ca:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4016cc:	4b31      	ldr	r3, [pc, #196]	; (401794 <SystemCoreClockUpdate+0xf8>)
  4016ce:	695b      	ldr	r3, [r3, #20]
  4016d0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016d4:	bf14      	ite	ne
  4016d6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016da:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4016de:	4b2c      	ldr	r3, [pc, #176]	; (401790 <SystemCoreClockUpdate+0xf4>)
  4016e0:	601a      	str	r2, [r3, #0]
  4016e2:	e7e4      	b.n	4016ae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016e4:	4b29      	ldr	r3, [pc, #164]	; (40178c <SystemCoreClockUpdate+0xf0>)
  4016e6:	6a1b      	ldr	r3, [r3, #32]
  4016e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016ec:	d003      	beq.n	4016f6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4016ee:	4a2a      	ldr	r2, [pc, #168]	; (401798 <SystemCoreClockUpdate+0xfc>)
  4016f0:	4b27      	ldr	r3, [pc, #156]	; (401790 <SystemCoreClockUpdate+0xf4>)
  4016f2:	601a      	str	r2, [r3, #0]
  4016f4:	e7db      	b.n	4016ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016f6:	4a29      	ldr	r2, [pc, #164]	; (40179c <SystemCoreClockUpdate+0x100>)
  4016f8:	4b25      	ldr	r3, [pc, #148]	; (401790 <SystemCoreClockUpdate+0xf4>)
  4016fa:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016fc:	4b23      	ldr	r3, [pc, #140]	; (40178c <SystemCoreClockUpdate+0xf0>)
  4016fe:	6a1b      	ldr	r3, [r3, #32]
  401700:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401704:	2b10      	cmp	r3, #16
  401706:	d005      	beq.n	401714 <SystemCoreClockUpdate+0x78>
  401708:	2b20      	cmp	r3, #32
  40170a:	d1d0      	bne.n	4016ae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40170c:	4a22      	ldr	r2, [pc, #136]	; (401798 <SystemCoreClockUpdate+0xfc>)
  40170e:	4b20      	ldr	r3, [pc, #128]	; (401790 <SystemCoreClockUpdate+0xf4>)
  401710:	601a      	str	r2, [r3, #0]
          break;
  401712:	e7cc      	b.n	4016ae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401714:	4a22      	ldr	r2, [pc, #136]	; (4017a0 <SystemCoreClockUpdate+0x104>)
  401716:	4b1e      	ldr	r3, [pc, #120]	; (401790 <SystemCoreClockUpdate+0xf4>)
  401718:	601a      	str	r2, [r3, #0]
          break;
  40171a:	e7c8      	b.n	4016ae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40171c:	4b1b      	ldr	r3, [pc, #108]	; (40178c <SystemCoreClockUpdate+0xf0>)
  40171e:	6a1b      	ldr	r3, [r3, #32]
  401720:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401724:	d016      	beq.n	401754 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401726:	4a1c      	ldr	r2, [pc, #112]	; (401798 <SystemCoreClockUpdate+0xfc>)
  401728:	4b19      	ldr	r3, [pc, #100]	; (401790 <SystemCoreClockUpdate+0xf4>)
  40172a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40172c:	4b17      	ldr	r3, [pc, #92]	; (40178c <SystemCoreClockUpdate+0xf0>)
  40172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401730:	f003 0303 	and.w	r3, r3, #3
  401734:	2b02      	cmp	r3, #2
  401736:	d1ba      	bne.n	4016ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401738:	4a14      	ldr	r2, [pc, #80]	; (40178c <SystemCoreClockUpdate+0xf0>)
  40173a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40173c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40173e:	4814      	ldr	r0, [pc, #80]	; (401790 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401740:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401744:	6803      	ldr	r3, [r0, #0]
  401746:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40174a:	b2d2      	uxtb	r2, r2
  40174c:	fbb3 f3f2 	udiv	r3, r3, r2
  401750:	6003      	str	r3, [r0, #0]
  401752:	e7ac      	b.n	4016ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401754:	4a11      	ldr	r2, [pc, #68]	; (40179c <SystemCoreClockUpdate+0x100>)
  401756:	4b0e      	ldr	r3, [pc, #56]	; (401790 <SystemCoreClockUpdate+0xf4>)
  401758:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40175a:	4b0c      	ldr	r3, [pc, #48]	; (40178c <SystemCoreClockUpdate+0xf0>)
  40175c:	6a1b      	ldr	r3, [r3, #32]
  40175e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401762:	2b10      	cmp	r3, #16
  401764:	d005      	beq.n	401772 <SystemCoreClockUpdate+0xd6>
  401766:	2b20      	cmp	r3, #32
  401768:	d1e0      	bne.n	40172c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40176a:	4a0b      	ldr	r2, [pc, #44]	; (401798 <SystemCoreClockUpdate+0xfc>)
  40176c:	4b08      	ldr	r3, [pc, #32]	; (401790 <SystemCoreClockUpdate+0xf4>)
  40176e:	601a      	str	r2, [r3, #0]
          break;
  401770:	e7dc      	b.n	40172c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401772:	4a0b      	ldr	r2, [pc, #44]	; (4017a0 <SystemCoreClockUpdate+0x104>)
  401774:	4b06      	ldr	r3, [pc, #24]	; (401790 <SystemCoreClockUpdate+0xf4>)
  401776:	601a      	str	r2, [r3, #0]
          break;
  401778:	e7d8      	b.n	40172c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40177a:	4a05      	ldr	r2, [pc, #20]	; (401790 <SystemCoreClockUpdate+0xf4>)
  40177c:	6813      	ldr	r3, [r2, #0]
  40177e:	4909      	ldr	r1, [pc, #36]	; (4017a4 <SystemCoreClockUpdate+0x108>)
  401780:	fba1 1303 	umull	r1, r3, r1, r3
  401784:	085b      	lsrs	r3, r3, #1
  401786:	6013      	str	r3, [r2, #0]
  401788:	4770      	bx	lr
  40178a:	bf00      	nop
  40178c:	400e0600 	.word	0x400e0600
  401790:	2040000c 	.word	0x2040000c
  401794:	400e1810 	.word	0x400e1810
  401798:	00b71b00 	.word	0x00b71b00
  40179c:	003d0900 	.word	0x003d0900
  4017a0:	007a1200 	.word	0x007a1200
  4017a4:	aaaaaaab 	.word	0xaaaaaaab

004017a8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4017a8:	4b16      	ldr	r3, [pc, #88]	; (401804 <system_init_flash+0x5c>)
  4017aa:	4298      	cmp	r0, r3
  4017ac:	d913      	bls.n	4017d6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4017ae:	4b16      	ldr	r3, [pc, #88]	; (401808 <system_init_flash+0x60>)
  4017b0:	4298      	cmp	r0, r3
  4017b2:	d915      	bls.n	4017e0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4017b4:	4b15      	ldr	r3, [pc, #84]	; (40180c <system_init_flash+0x64>)
  4017b6:	4298      	cmp	r0, r3
  4017b8:	d916      	bls.n	4017e8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4017ba:	4b15      	ldr	r3, [pc, #84]	; (401810 <system_init_flash+0x68>)
  4017bc:	4298      	cmp	r0, r3
  4017be:	d917      	bls.n	4017f0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4017c0:	4b14      	ldr	r3, [pc, #80]	; (401814 <system_init_flash+0x6c>)
  4017c2:	4298      	cmp	r0, r3
  4017c4:	d918      	bls.n	4017f8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4017c6:	4b14      	ldr	r3, [pc, #80]	; (401818 <system_init_flash+0x70>)
  4017c8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017ca:	bf94      	ite	ls
  4017cc:	4a13      	ldrls	r2, [pc, #76]	; (40181c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4017ce:	4a14      	ldrhi	r2, [pc, #80]	; (401820 <system_init_flash+0x78>)
  4017d0:	4b14      	ldr	r3, [pc, #80]	; (401824 <system_init_flash+0x7c>)
  4017d2:	601a      	str	r2, [r3, #0]
  4017d4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017da:	4b12      	ldr	r3, [pc, #72]	; (401824 <system_init_flash+0x7c>)
  4017dc:	601a      	str	r2, [r3, #0]
  4017de:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4017e0:	4a11      	ldr	r2, [pc, #68]	; (401828 <system_init_flash+0x80>)
  4017e2:	4b10      	ldr	r3, [pc, #64]	; (401824 <system_init_flash+0x7c>)
  4017e4:	601a      	str	r2, [r3, #0]
  4017e6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017e8:	4a10      	ldr	r2, [pc, #64]	; (40182c <system_init_flash+0x84>)
  4017ea:	4b0e      	ldr	r3, [pc, #56]	; (401824 <system_init_flash+0x7c>)
  4017ec:	601a      	str	r2, [r3, #0]
  4017ee:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017f0:	4a0f      	ldr	r2, [pc, #60]	; (401830 <system_init_flash+0x88>)
  4017f2:	4b0c      	ldr	r3, [pc, #48]	; (401824 <system_init_flash+0x7c>)
  4017f4:	601a      	str	r2, [r3, #0]
  4017f6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017f8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4017fc:	4b09      	ldr	r3, [pc, #36]	; (401824 <system_init_flash+0x7c>)
  4017fe:	601a      	str	r2, [r3, #0]
  401800:	4770      	bx	lr
  401802:	bf00      	nop
  401804:	015ef3bf 	.word	0x015ef3bf
  401808:	02bde77f 	.word	0x02bde77f
  40180c:	041cdb3f 	.word	0x041cdb3f
  401810:	057bceff 	.word	0x057bceff
  401814:	06dac2bf 	.word	0x06dac2bf
  401818:	0839b67f 	.word	0x0839b67f
  40181c:	04000500 	.word	0x04000500
  401820:	04000600 	.word	0x04000600
  401824:	400e0c00 	.word	0x400e0c00
  401828:	04000100 	.word	0x04000100
  40182c:	04000200 	.word	0x04000200
  401830:	04000300 	.word	0x04000300

00401834 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401834:	4b0a      	ldr	r3, [pc, #40]	; (401860 <_sbrk+0x2c>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	b153      	cbz	r3, 401850 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40183a:	4b09      	ldr	r3, [pc, #36]	; (401860 <_sbrk+0x2c>)
  40183c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40183e:	181a      	adds	r2, r3, r0
  401840:	4908      	ldr	r1, [pc, #32]	; (401864 <_sbrk+0x30>)
  401842:	4291      	cmp	r1, r2
  401844:	db08      	blt.n	401858 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401846:	4610      	mov	r0, r2
  401848:	4a05      	ldr	r2, [pc, #20]	; (401860 <_sbrk+0x2c>)
  40184a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40184c:	4618      	mov	r0, r3
  40184e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401850:	4a05      	ldr	r2, [pc, #20]	; (401868 <_sbrk+0x34>)
  401852:	4b03      	ldr	r3, [pc, #12]	; (401860 <_sbrk+0x2c>)
  401854:	601a      	str	r2, [r3, #0]
  401856:	e7f0      	b.n	40183a <_sbrk+0x6>
		return (caddr_t) -1;	
  401858:	f04f 30ff 	mov.w	r0, #4294967295
}
  40185c:	4770      	bx	lr
  40185e:	bf00      	nop
  401860:	20400c64 	.word	0x20400c64
  401864:	2045fffc 	.word	0x2045fffc
  401868:	20402f60 	.word	0x20402f60

0040186c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40186c:	f04f 30ff 	mov.w	r0, #4294967295
  401870:	4770      	bx	lr

00401872 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401876:	604b      	str	r3, [r1, #4]

	return 0;
}
  401878:	2000      	movs	r0, #0
  40187a:	4770      	bx	lr

0040187c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40187c:	2001      	movs	r0, #1
  40187e:	4770      	bx	lr

00401880 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401880:	2000      	movs	r0, #0
  401882:	4770      	bx	lr

00401884 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401884:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401886:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401888:	689a      	ldr	r2, [r3, #8]
  40188a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40188c:	689a      	ldr	r2, [r3, #8]
  40188e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401890:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401892:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401894:	6803      	ldr	r3, [r0, #0]
  401896:	3301      	adds	r3, #1
  401898:	6003      	str	r3, [r0, #0]
  40189a:	4770      	bx	lr

0040189c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40189c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40189e:	6842      	ldr	r2, [r0, #4]
  4018a0:	6881      	ldr	r1, [r0, #8]
  4018a2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4018a4:	6882      	ldr	r2, [r0, #8]
  4018a6:	6841      	ldr	r1, [r0, #4]
  4018a8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4018aa:	685a      	ldr	r2, [r3, #4]
  4018ac:	4290      	cmp	r0, r2
  4018ae:	d005      	beq.n	4018bc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4018b0:	2200      	movs	r2, #0
  4018b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4018b4:	6818      	ldr	r0, [r3, #0]
  4018b6:	3801      	subs	r0, #1
  4018b8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4018ba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4018bc:	6882      	ldr	r2, [r0, #8]
  4018be:	605a      	str	r2, [r3, #4]
  4018c0:	e7f6      	b.n	4018b0 <uxListRemove+0x14>
	...

004018c4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4018c4:	4b06      	ldr	r3, [pc, #24]	; (4018e0 <pxCurrentTCBConst2>)
  4018c6:	6819      	ldr	r1, [r3, #0]
  4018c8:	6808      	ldr	r0, [r1, #0]
  4018ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018ce:	f380 8809 	msr	PSP, r0
  4018d2:	f3bf 8f6f 	isb	sy
  4018d6:	f04f 0000 	mov.w	r0, #0
  4018da:	f380 8811 	msr	BASEPRI, r0
  4018de:	4770      	bx	lr

004018e0 <pxCurrentTCBConst2>:
  4018e0:	20400c68 	.word	0x20400c68
  4018e4:	4770      	bx	lr
  4018e6:	bf00      	nop

004018e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  4018e8:	f3ef 8009 	mrs	r0, PSP
  4018ec:	f3bf 8f6f 	isb	sy
  4018f0:	4b15      	ldr	r3, [pc, #84]	; (401948 <pxCurrentTCBConst>)
  4018f2:	681a      	ldr	r2, [r3, #0]
  4018f4:	f01e 0f10 	tst.w	lr, #16
  4018f8:	bf08      	it	eq
  4018fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4018fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401902:	6010      	str	r0, [r2, #0]
  401904:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401908:	f04f 0080 	mov.w	r0, #128	; 0x80
  40190c:	b672      	cpsid	i
  40190e:	f380 8811 	msr	BASEPRI, r0
  401912:	f3bf 8f4f 	dsb	sy
  401916:	f3bf 8f6f 	isb	sy
  40191a:	b662      	cpsie	i
  40191c:	f000 f8f0 	bl	401b00 <vTaskSwitchContext>
  401920:	f04f 0000 	mov.w	r0, #0
  401924:	f380 8811 	msr	BASEPRI, r0
  401928:	bc08      	pop	{r3}
  40192a:	6819      	ldr	r1, [r3, #0]
  40192c:	6808      	ldr	r0, [r1, #0]
  40192e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401932:	f01e 0f10 	tst.w	lr, #16
  401936:	bf08      	it	eq
  401938:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40193c:	f380 8809 	msr	PSP, r0
  401940:	f3bf 8f6f 	isb	sy
  401944:	4770      	bx	lr
  401946:	bf00      	nop

00401948 <pxCurrentTCBConst>:
  401948:	20400c68 	.word	0x20400c68
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop

00401950 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  401950:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401952:	f3ef 8311 	mrs	r3, BASEPRI
  401956:	f04f 0280 	mov.w	r2, #128	; 0x80
  40195a:	b672      	cpsid	i
  40195c:	f382 8811 	msr	BASEPRI, r2
  401960:	f3bf 8f6f 	isb	sy
  401964:	f3bf 8f4f 	dsb	sy
  401968:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40196a:	4b05      	ldr	r3, [pc, #20]	; (401980 <SysTick_Handler+0x30>)
  40196c:	4798      	blx	r3
  40196e:	b118      	cbz	r0, 401978 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401974:	4b03      	ldr	r3, [pc, #12]	; (401984 <SysTick_Handler+0x34>)
  401976:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401978:	2300      	movs	r3, #0
  40197a:	f383 8811 	msr	BASEPRI, r3
  40197e:	bd08      	pop	{r3, pc}
  401980:	004019b5 	.word	0x004019b5
  401984:	e000ed04 	.word	0xe000ed04

00401988 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401988:	4b08      	ldr	r3, [pc, #32]	; (4019ac <prvResetNextTaskUnblockTime+0x24>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	681b      	ldr	r3, [r3, #0]
  40198e:	b13b      	cbz	r3, 4019a0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401990:	4b06      	ldr	r3, [pc, #24]	; (4019ac <prvResetNextTaskUnblockTime+0x24>)
  401992:	681b      	ldr	r3, [r3, #0]
  401994:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401996:	68db      	ldr	r3, [r3, #12]
  401998:	685a      	ldr	r2, [r3, #4]
  40199a:	4b05      	ldr	r3, [pc, #20]	; (4019b0 <prvResetNextTaskUnblockTime+0x28>)
  40199c:	601a      	str	r2, [r3, #0]
  40199e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4019a0:	f04f 32ff 	mov.w	r2, #4294967295
  4019a4:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <prvResetNextTaskUnblockTime+0x28>)
  4019a6:	601a      	str	r2, [r3, #0]
  4019a8:	4770      	bx	lr
  4019aa:	bf00      	nop
  4019ac:	20400c6c 	.word	0x20400c6c
  4019b0:	20400ce4 	.word	0x20400ce4

004019b4 <xTaskIncrementTick>:
{
  4019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4019b8:	4b42      	ldr	r3, [pc, #264]	; (401ac4 <xTaskIncrementTick+0x110>)
  4019ba:	681b      	ldr	r3, [r3, #0]
  4019bc:	2b00      	cmp	r3, #0
  4019be:	d178      	bne.n	401ab2 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4019c0:	4b41      	ldr	r3, [pc, #260]	; (401ac8 <xTaskIncrementTick+0x114>)
  4019c2:	681a      	ldr	r2, [r3, #0]
  4019c4:	3201      	adds	r2, #1
  4019c6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4019c8:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4019ca:	b9d6      	cbnz	r6, 401a02 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4019cc:	4b3f      	ldr	r3, [pc, #252]	; (401acc <xTaskIncrementTick+0x118>)
  4019ce:	681b      	ldr	r3, [r3, #0]
  4019d0:	681b      	ldr	r3, [r3, #0]
  4019d2:	b153      	cbz	r3, 4019ea <xTaskIncrementTick+0x36>
	__asm volatile
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
  4019e8:	e7fe      	b.n	4019e8 <xTaskIncrementTick+0x34>
  4019ea:	4a38      	ldr	r2, [pc, #224]	; (401acc <xTaskIncrementTick+0x118>)
  4019ec:	6811      	ldr	r1, [r2, #0]
  4019ee:	4b38      	ldr	r3, [pc, #224]	; (401ad0 <xTaskIncrementTick+0x11c>)
  4019f0:	6818      	ldr	r0, [r3, #0]
  4019f2:	6010      	str	r0, [r2, #0]
  4019f4:	6019      	str	r1, [r3, #0]
  4019f6:	4a37      	ldr	r2, [pc, #220]	; (401ad4 <xTaskIncrementTick+0x120>)
  4019f8:	6813      	ldr	r3, [r2, #0]
  4019fa:	3301      	adds	r3, #1
  4019fc:	6013      	str	r3, [r2, #0]
  4019fe:	4b36      	ldr	r3, [pc, #216]	; (401ad8 <xTaskIncrementTick+0x124>)
  401a00:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401a02:	4b36      	ldr	r3, [pc, #216]	; (401adc <xTaskIncrementTick+0x128>)
  401a04:	681b      	ldr	r3, [r3, #0]
  401a06:	429e      	cmp	r6, r3
  401a08:	d218      	bcs.n	401a3c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401a0a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401a0c:	4b34      	ldr	r3, [pc, #208]	; (401ae0 <xTaskIncrementTick+0x12c>)
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a16:	4a33      	ldr	r2, [pc, #204]	; (401ae4 <xTaskIncrementTick+0x130>)
  401a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401a1c:	2b02      	cmp	r3, #2
  401a1e:	bf28      	it	cs
  401a20:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401a22:	4b31      	ldr	r3, [pc, #196]	; (401ae8 <xTaskIncrementTick+0x134>)
  401a24:	681b      	ldr	r3, [r3, #0]
  401a26:	b90b      	cbnz	r3, 401a2c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401a28:	4b30      	ldr	r3, [pc, #192]	; (401aec <xTaskIncrementTick+0x138>)
  401a2a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401a2c:	4b30      	ldr	r3, [pc, #192]	; (401af0 <xTaskIncrementTick+0x13c>)
  401a2e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401a30:	2b00      	cmp	r3, #0
}
  401a32:	bf0c      	ite	eq
  401a34:	4620      	moveq	r0, r4
  401a36:	2001      	movne	r0, #1
  401a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a3c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a3e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401acc <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401a42:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401afc <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401a46:	4f2b      	ldr	r7, [pc, #172]	; (401af4 <xTaskIncrementTick+0x140>)
  401a48:	e01f      	b.n	401a8a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401a4a:	f04f 32ff 	mov.w	r2, #4294967295
  401a4e:	4b23      	ldr	r3, [pc, #140]	; (401adc <xTaskIncrementTick+0x128>)
  401a50:	601a      	str	r2, [r3, #0]
						break;
  401a52:	e7db      	b.n	401a0c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401a54:	4a21      	ldr	r2, [pc, #132]	; (401adc <xTaskIncrementTick+0x128>)
  401a56:	6013      	str	r3, [r2, #0]
							break;
  401a58:	e7d8      	b.n	401a0c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401a5a:	f105 0018 	add.w	r0, r5, #24
  401a5e:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401a60:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401a62:	683a      	ldr	r2, [r7, #0]
  401a64:	2301      	movs	r3, #1
  401a66:	4083      	lsls	r3, r0
  401a68:	4313      	orrs	r3, r2
  401a6a:	603b      	str	r3, [r7, #0]
  401a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a70:	4651      	mov	r1, sl
  401a72:	4b1c      	ldr	r3, [pc, #112]	; (401ae4 <xTaskIncrementTick+0x130>)
  401a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a78:	4b1f      	ldr	r3, [pc, #124]	; (401af8 <xTaskIncrementTick+0x144>)
  401a7a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401a7c:	4b18      	ldr	r3, [pc, #96]	; (401ae0 <xTaskIncrementTick+0x12c>)
  401a7e:	681b      	ldr	r3, [r3, #0]
  401a80:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401a84:	429a      	cmp	r2, r3
  401a86:	bf28      	it	cs
  401a88:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a8a:	f8d9 3000 	ldr.w	r3, [r9]
  401a8e:	681b      	ldr	r3, [r3, #0]
  401a90:	2b00      	cmp	r3, #0
  401a92:	d0da      	beq.n	401a4a <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a94:	f8d9 3000 	ldr.w	r3, [r9]
  401a98:	68db      	ldr	r3, [r3, #12]
  401a9a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401a9c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401a9e:	429e      	cmp	r6, r3
  401aa0:	d3d8      	bcc.n	401a54 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401aa2:	f105 0a04 	add.w	sl, r5, #4
  401aa6:	4650      	mov	r0, sl
  401aa8:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401aaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401aac:	2b00      	cmp	r3, #0
  401aae:	d1d4      	bne.n	401a5a <xTaskIncrementTick+0xa6>
  401ab0:	e7d6      	b.n	401a60 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401ab2:	4a0d      	ldr	r2, [pc, #52]	; (401ae8 <xTaskIncrementTick+0x134>)
  401ab4:	6813      	ldr	r3, [r2, #0]
  401ab6:	3301      	adds	r3, #1
  401ab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401aba:	4b0c      	ldr	r3, [pc, #48]	; (401aec <xTaskIncrementTick+0x138>)
  401abc:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401abe:	2400      	movs	r4, #0
  401ac0:	e7b4      	b.n	401a2c <xTaskIncrementTick+0x78>
  401ac2:	bf00      	nop
  401ac4:	20400cdc 	.word	0x20400cdc
  401ac8:	20400cec 	.word	0x20400cec
  401acc:	20400c6c 	.word	0x20400c6c
  401ad0:	20400c70 	.word	0x20400c70
  401ad4:	20400ce8 	.word	0x20400ce8
  401ad8:	00401989 	.word	0x00401989
  401adc:	20400ce4 	.word	0x20400ce4
  401ae0:	20400c68 	.word	0x20400c68
  401ae4:	20400c74 	.word	0x20400c74
  401ae8:	20400cd8 	.word	0x20400cd8
  401aec:	00401e6d 	.word	0x00401e6d
  401af0:	20400cf0 	.word	0x20400cf0
  401af4:	20400ce0 	.word	0x20400ce0
  401af8:	00401885 	.word	0x00401885
  401afc:	0040189d 	.word	0x0040189d

00401b00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401b00:	4b2d      	ldr	r3, [pc, #180]	; (401bb8 <vTaskSwitchContext+0xb8>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	2b00      	cmp	r3, #0
  401b06:	d12c      	bne.n	401b62 <vTaskSwitchContext+0x62>
{
  401b08:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401b0a:	2200      	movs	r2, #0
  401b0c:	4b2b      	ldr	r3, [pc, #172]	; (401bbc <vTaskSwitchContext+0xbc>)
  401b0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401b10:	4b2b      	ldr	r3, [pc, #172]	; (401bc0 <vTaskSwitchContext+0xc0>)
  401b12:	681b      	ldr	r3, [r3, #0]
  401b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b16:	681a      	ldr	r2, [r3, #0]
  401b18:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401b1c:	d103      	bne.n	401b26 <vTaskSwitchContext+0x26>
  401b1e:	685a      	ldr	r2, [r3, #4]
  401b20:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401b24:	d021      	beq.n	401b6a <vTaskSwitchContext+0x6a>
  401b26:	4b26      	ldr	r3, [pc, #152]	; (401bc0 <vTaskSwitchContext+0xc0>)
  401b28:	6818      	ldr	r0, [r3, #0]
  401b2a:	6819      	ldr	r1, [r3, #0]
  401b2c:	3134      	adds	r1, #52	; 0x34
  401b2e:	4b25      	ldr	r3, [pc, #148]	; (401bc4 <vTaskSwitchContext+0xc4>)
  401b30:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401b32:	4b25      	ldr	r3, [pc, #148]	; (401bc8 <vTaskSwitchContext+0xc8>)
  401b34:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401b36:	fab3 f383 	clz	r3, r3
  401b3a:	b2db      	uxtb	r3, r3
  401b3c:	f1c3 031f 	rsb	r3, r3, #31
  401b40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401b44:	4a21      	ldr	r2, [pc, #132]	; (401bcc <vTaskSwitchContext+0xcc>)
  401b46:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401b4a:	b9ba      	cbnz	r2, 401b7c <vTaskSwitchContext+0x7c>
	__asm volatile
  401b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b50:	b672      	cpsid	i
  401b52:	f383 8811 	msr	BASEPRI, r3
  401b56:	f3bf 8f6f 	isb	sy
  401b5a:	f3bf 8f4f 	dsb	sy
  401b5e:	b662      	cpsie	i
  401b60:	e7fe      	b.n	401b60 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401b62:	2201      	movs	r2, #1
  401b64:	4b15      	ldr	r3, [pc, #84]	; (401bbc <vTaskSwitchContext+0xbc>)
  401b66:	601a      	str	r2, [r3, #0]
  401b68:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401b6a:	689a      	ldr	r2, [r3, #8]
  401b6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401b70:	d1d9      	bne.n	401b26 <vTaskSwitchContext+0x26>
  401b72:	68db      	ldr	r3, [r3, #12]
  401b74:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401b78:	d1d5      	bne.n	401b26 <vTaskSwitchContext+0x26>
  401b7a:	e7da      	b.n	401b32 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401b7c:	4a13      	ldr	r2, [pc, #76]	; (401bcc <vTaskSwitchContext+0xcc>)
  401b7e:	0099      	lsls	r1, r3, #2
  401b80:	18c8      	adds	r0, r1, r3
  401b82:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401b86:	6844      	ldr	r4, [r0, #4]
  401b88:	6864      	ldr	r4, [r4, #4]
  401b8a:	6044      	str	r4, [r0, #4]
  401b8c:	4419      	add	r1, r3
  401b8e:	4602      	mov	r2, r0
  401b90:	3208      	adds	r2, #8
  401b92:	4294      	cmp	r4, r2
  401b94:	d009      	beq.n	401baa <vTaskSwitchContext+0xaa>
  401b96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b9a:	4a0c      	ldr	r2, [pc, #48]	; (401bcc <vTaskSwitchContext+0xcc>)
  401b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ba0:	685b      	ldr	r3, [r3, #4]
  401ba2:	68da      	ldr	r2, [r3, #12]
  401ba4:	4b06      	ldr	r3, [pc, #24]	; (401bc0 <vTaskSwitchContext+0xc0>)
  401ba6:	601a      	str	r2, [r3, #0]
  401ba8:	bd10      	pop	{r4, pc}
  401baa:	6860      	ldr	r0, [r4, #4]
  401bac:	4a07      	ldr	r2, [pc, #28]	; (401bcc <vTaskSwitchContext+0xcc>)
  401bae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401bb2:	6050      	str	r0, [r2, #4]
  401bb4:	e7ef      	b.n	401b96 <vTaskSwitchContext+0x96>
  401bb6:	bf00      	nop
  401bb8:	20400cdc 	.word	0x20400cdc
  401bbc:	20400cf0 	.word	0x20400cf0
  401bc0:	20400c68 	.word	0x20400c68
  401bc4:	00401e55 	.word	0x00401e55
  401bc8:	20400ce0 	.word	0x20400ce0
  401bcc:	20400c74 	.word	0x20400c74

00401bd0 <but1_callback>:
/* handlers / callbacks                                                 */
/************************************************************************/
volatile char but1_flag = 0;
volatile char flag_rtc_alarm = 0;

void but1_callback (void) {
  401bd0:	b508      	push	{r3, lr}
	printf("Callback ativado!!\n");
  401bd2:	4803      	ldr	r0, [pc, #12]	; (401be0 <but1_callback+0x10>)
  401bd4:	4b03      	ldr	r3, [pc, #12]	; (401be4 <but1_callback+0x14>)
  401bd6:	4798      	blx	r3
	but1_flag = 1;
  401bd8:	2201      	movs	r2, #1
  401bda:	4b03      	ldr	r3, [pc, #12]	; (401be8 <but1_callback+0x18>)
  401bdc:	701a      	strb	r2, [r3, #0]
  401bde:	bd08      	pop	{r3, pc}
  401be0:	00405434 	.word	0x00405434
  401be4:	004027f9 	.word	0x004027f9
  401be8:	20400cf4 	.word	0x20400cf4

00401bec <RTT_init>:
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);  
}

//**********CODIGO PARA O LED2*************//
static void RTT_init(float freqPrescale, uint32_t IrqNPulses,
uint32_t rttIRQSource) {
  401bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bf0:	ed2d 8b02 	vpush	{d8}
  401bf4:	b082      	sub	sp, #8
  401bf6:	eeb0 8a40 	vmov.f32	s16, s0
  401bfa:	4680      	mov	r8, r0
  401bfc:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  401bfe:	4c20      	ldr	r4, [pc, #128]	; (401c80 <RTT_init+0x94>)
  401c00:	2100      	movs	r1, #0
  401c02:	4620      	mov	r0, r4
  401c04:	4b1f      	ldr	r3, [pc, #124]	; (401c84 <RTT_init+0x98>)
  401c06:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  401c08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401c88 <RTT_init+0x9c>
  401c0c:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401c14:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  401c18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  401c1c:	4620      	mov	r0, r4
  401c1e:	4b1b      	ldr	r3, [pc, #108]	; (401c8c <RTT_init+0xa0>)
  401c20:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN) {
  401c22:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  401c26:	d116      	bne.n	401c56 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401c28:	4b19      	ldr	r3, [pc, #100]	; (401c90 <RTT_init+0xa4>)
  401c2a:	2208      	movs	r2, #8
  401c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401c30:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c34:	2180      	movs	r1, #128	; 0x80
  401c36:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c3a:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  401c3c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  401c40:	d119      	bne.n	401c76 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  401c42:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  401c46:	480e      	ldr	r0, [pc, #56]	; (401c80 <RTT_init+0x94>)
  401c48:	4b12      	ldr	r3, [pc, #72]	; (401c94 <RTT_init+0xa8>)
  401c4a:	4798      	blx	r3
}
  401c4c:	b002      	add	sp, #8
  401c4e:	ecbd 8b02 	vpop	{d8}
  401c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  401c56:	4620      	mov	r0, r4
  401c58:	4b0f      	ldr	r3, [pc, #60]	; (401c98 <RTT_init+0xac>)
  401c5a:	4798      	blx	r3
  401c5c:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  401c5e:	4e08      	ldr	r6, [pc, #32]	; (401c80 <RTT_init+0x94>)
  401c60:	4d0d      	ldr	r5, [pc, #52]	; (401c98 <RTT_init+0xac>)
  401c62:	4630      	mov	r0, r6
  401c64:	47a8      	blx	r5
  401c66:	4284      	cmp	r4, r0
  401c68:	d0fb      	beq.n	401c62 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  401c6a:	eb04 0108 	add.w	r1, r4, r8
  401c6e:	4804      	ldr	r0, [pc, #16]	; (401c80 <RTT_init+0x94>)
  401c70:	4b0a      	ldr	r3, [pc, #40]	; (401c9c <RTT_init+0xb0>)
  401c72:	4798      	blx	r3
  401c74:	e7d8      	b.n	401c28 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  401c76:	4639      	mov	r1, r7
  401c78:	4801      	ldr	r0, [pc, #4]	; (401c80 <RTT_init+0x94>)
  401c7a:	4b09      	ldr	r3, [pc, #36]	; (401ca0 <RTT_init+0xb4>)
  401c7c:	4798      	blx	r3
  401c7e:	e7e5      	b.n	401c4c <RTT_init+0x60>
  401c80:	400e1830 	.word	0x400e1830
  401c84:	004004ed 	.word	0x004004ed
  401c88:	47000000 	.word	0x47000000
  401c8c:	004004d9 	.word	0x004004d9
  401c90:	e000e100 	.word	0xe000e100
  401c94:	0040052d 	.word	0x0040052d
  401c98:	00400541 	.word	0x00400541
  401c9c:	00400559 	.word	0x00400559
  401ca0:	00400519 	.word	0x00400519

00401ca4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ca6:	b083      	sub	sp, #12
  401ca8:	4605      	mov	r5, r0
  401caa:	460c      	mov	r4, r1
	uint32_t val = 0;
  401cac:	2300      	movs	r3, #0
  401cae:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401cb0:	4b2a      	ldr	r3, [pc, #168]	; (401d5c <usart_serial_getchar+0xb8>)
  401cb2:	4298      	cmp	r0, r3
  401cb4:	d013      	beq.n	401cde <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401cb6:	4b2a      	ldr	r3, [pc, #168]	; (401d60 <usart_serial_getchar+0xbc>)
  401cb8:	4298      	cmp	r0, r3
  401cba:	d018      	beq.n	401cee <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401cbc:	4b29      	ldr	r3, [pc, #164]	; (401d64 <usart_serial_getchar+0xc0>)
  401cbe:	4298      	cmp	r0, r3
  401cc0:	d01d      	beq.n	401cfe <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cc2:	4b29      	ldr	r3, [pc, #164]	; (401d68 <usart_serial_getchar+0xc4>)
  401cc4:	429d      	cmp	r5, r3
  401cc6:	d022      	beq.n	401d0e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cc8:	4b28      	ldr	r3, [pc, #160]	; (401d6c <usart_serial_getchar+0xc8>)
  401cca:	429d      	cmp	r5, r3
  401ccc:	d027      	beq.n	401d1e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cce:	4b28      	ldr	r3, [pc, #160]	; (401d70 <usart_serial_getchar+0xcc>)
  401cd0:	429d      	cmp	r5, r3
  401cd2:	d02e      	beq.n	401d32 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401cd4:	4b27      	ldr	r3, [pc, #156]	; (401d74 <usart_serial_getchar+0xd0>)
  401cd6:	429d      	cmp	r5, r3
  401cd8:	d035      	beq.n	401d46 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401cda:	b003      	add	sp, #12
  401cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401cde:	461f      	mov	r7, r3
  401ce0:	4e25      	ldr	r6, [pc, #148]	; (401d78 <usart_serial_getchar+0xd4>)
  401ce2:	4621      	mov	r1, r4
  401ce4:	4638      	mov	r0, r7
  401ce6:	47b0      	blx	r6
  401ce8:	2800      	cmp	r0, #0
  401cea:	d1fa      	bne.n	401ce2 <usart_serial_getchar+0x3e>
  401cec:	e7e9      	b.n	401cc2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  401cee:	461f      	mov	r7, r3
  401cf0:	4e21      	ldr	r6, [pc, #132]	; (401d78 <usart_serial_getchar+0xd4>)
  401cf2:	4621      	mov	r1, r4
  401cf4:	4638      	mov	r0, r7
  401cf6:	47b0      	blx	r6
  401cf8:	2800      	cmp	r0, #0
  401cfa:	d1fa      	bne.n	401cf2 <usart_serial_getchar+0x4e>
  401cfc:	e7e4      	b.n	401cc8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  401cfe:	461f      	mov	r7, r3
  401d00:	4e1d      	ldr	r6, [pc, #116]	; (401d78 <usart_serial_getchar+0xd4>)
  401d02:	4621      	mov	r1, r4
  401d04:	4638      	mov	r0, r7
  401d06:	47b0      	blx	r6
  401d08:	2800      	cmp	r0, #0
  401d0a:	d1fa      	bne.n	401d02 <usart_serial_getchar+0x5e>
  401d0c:	e7df      	b.n	401cce <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  401d0e:	461f      	mov	r7, r3
  401d10:	4e19      	ldr	r6, [pc, #100]	; (401d78 <usart_serial_getchar+0xd4>)
  401d12:	4621      	mov	r1, r4
  401d14:	4638      	mov	r0, r7
  401d16:	47b0      	blx	r6
  401d18:	2800      	cmp	r0, #0
  401d1a:	d1fa      	bne.n	401d12 <usart_serial_getchar+0x6e>
  401d1c:	e7da      	b.n	401cd4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  401d1e:	461e      	mov	r6, r3
  401d20:	4d16      	ldr	r5, [pc, #88]	; (401d7c <usart_serial_getchar+0xd8>)
  401d22:	a901      	add	r1, sp, #4
  401d24:	4630      	mov	r0, r6
  401d26:	47a8      	blx	r5
  401d28:	2800      	cmp	r0, #0
  401d2a:	d1fa      	bne.n	401d22 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  401d2c:	9b01      	ldr	r3, [sp, #4]
  401d2e:	7023      	strb	r3, [r4, #0]
  401d30:	e7d3      	b.n	401cda <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401d32:	461e      	mov	r6, r3
  401d34:	4d11      	ldr	r5, [pc, #68]	; (401d7c <usart_serial_getchar+0xd8>)
  401d36:	a901      	add	r1, sp, #4
  401d38:	4630      	mov	r0, r6
  401d3a:	47a8      	blx	r5
  401d3c:	2800      	cmp	r0, #0
  401d3e:	d1fa      	bne.n	401d36 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  401d40:	9b01      	ldr	r3, [sp, #4]
  401d42:	7023      	strb	r3, [r4, #0]
  401d44:	e7c9      	b.n	401cda <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401d46:	461e      	mov	r6, r3
  401d48:	4d0c      	ldr	r5, [pc, #48]	; (401d7c <usart_serial_getchar+0xd8>)
  401d4a:	a901      	add	r1, sp, #4
  401d4c:	4630      	mov	r0, r6
  401d4e:	47a8      	blx	r5
  401d50:	2800      	cmp	r0, #0
  401d52:	d1fa      	bne.n	401d4a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  401d54:	9b01      	ldr	r3, [sp, #4]
  401d56:	7023      	strb	r3, [r4, #0]
}
  401d58:	e7bf      	b.n	401cda <usart_serial_getchar+0x36>
  401d5a:	bf00      	nop
  401d5c:	400e0800 	.word	0x400e0800
  401d60:	400e0a00 	.word	0x400e0a00
  401d64:	400e1a00 	.word	0x400e1a00
  401d68:	400e1c00 	.word	0x400e1c00
  401d6c:	40024000 	.word	0x40024000
  401d70:	40028000 	.word	0x40028000
  401d74:	4002c000 	.word	0x4002c000
  401d78:	004014af 	.word	0x004014af
  401d7c:	004015bb 	.word	0x004015bb

00401d80 <usart_serial_putchar>:
{
  401d80:	b570      	push	{r4, r5, r6, lr}
  401d82:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401d84:	4b2a      	ldr	r3, [pc, #168]	; (401e30 <usart_serial_putchar+0xb0>)
  401d86:	4298      	cmp	r0, r3
  401d88:	d013      	beq.n	401db2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401d8a:	4b2a      	ldr	r3, [pc, #168]	; (401e34 <usart_serial_putchar+0xb4>)
  401d8c:	4298      	cmp	r0, r3
  401d8e:	d019      	beq.n	401dc4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401d90:	4b29      	ldr	r3, [pc, #164]	; (401e38 <usart_serial_putchar+0xb8>)
  401d92:	4298      	cmp	r0, r3
  401d94:	d01f      	beq.n	401dd6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  401d96:	4b29      	ldr	r3, [pc, #164]	; (401e3c <usart_serial_putchar+0xbc>)
  401d98:	4298      	cmp	r0, r3
  401d9a:	d025      	beq.n	401de8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401d9c:	4b28      	ldr	r3, [pc, #160]	; (401e40 <usart_serial_putchar+0xc0>)
  401d9e:	4298      	cmp	r0, r3
  401da0:	d02b      	beq.n	401dfa <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  401da2:	4b28      	ldr	r3, [pc, #160]	; (401e44 <usart_serial_putchar+0xc4>)
  401da4:	4298      	cmp	r0, r3
  401da6:	d031      	beq.n	401e0c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401da8:	4b27      	ldr	r3, [pc, #156]	; (401e48 <usart_serial_putchar+0xc8>)
  401daa:	4298      	cmp	r0, r3
  401dac:	d037      	beq.n	401e1e <usart_serial_putchar+0x9e>
	return 0;
  401dae:	2000      	movs	r0, #0
}
  401db0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401db2:	461e      	mov	r6, r3
  401db4:	4d25      	ldr	r5, [pc, #148]	; (401e4c <usart_serial_putchar+0xcc>)
  401db6:	4621      	mov	r1, r4
  401db8:	4630      	mov	r0, r6
  401dba:	47a8      	blx	r5
  401dbc:	2800      	cmp	r0, #0
  401dbe:	d1fa      	bne.n	401db6 <usart_serial_putchar+0x36>
		return 1;
  401dc0:	2001      	movs	r0, #1
  401dc2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401dc4:	461e      	mov	r6, r3
  401dc6:	4d21      	ldr	r5, [pc, #132]	; (401e4c <usart_serial_putchar+0xcc>)
  401dc8:	4621      	mov	r1, r4
  401dca:	4630      	mov	r0, r6
  401dcc:	47a8      	blx	r5
  401dce:	2800      	cmp	r0, #0
  401dd0:	d1fa      	bne.n	401dc8 <usart_serial_putchar+0x48>
		return 1;
  401dd2:	2001      	movs	r0, #1
  401dd4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401dd6:	461e      	mov	r6, r3
  401dd8:	4d1c      	ldr	r5, [pc, #112]	; (401e4c <usart_serial_putchar+0xcc>)
  401dda:	4621      	mov	r1, r4
  401ddc:	4630      	mov	r0, r6
  401dde:	47a8      	blx	r5
  401de0:	2800      	cmp	r0, #0
  401de2:	d1fa      	bne.n	401dda <usart_serial_putchar+0x5a>
		return 1;
  401de4:	2001      	movs	r0, #1
  401de6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401de8:	461e      	mov	r6, r3
  401dea:	4d18      	ldr	r5, [pc, #96]	; (401e4c <usart_serial_putchar+0xcc>)
  401dec:	4621      	mov	r1, r4
  401dee:	4630      	mov	r0, r6
  401df0:	47a8      	blx	r5
  401df2:	2800      	cmp	r0, #0
  401df4:	d1fa      	bne.n	401dec <usart_serial_putchar+0x6c>
		return 1;
  401df6:	2001      	movs	r0, #1
  401df8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401dfa:	461e      	mov	r6, r3
  401dfc:	4d14      	ldr	r5, [pc, #80]	; (401e50 <usart_serial_putchar+0xd0>)
  401dfe:	4621      	mov	r1, r4
  401e00:	4630      	mov	r0, r6
  401e02:	47a8      	blx	r5
  401e04:	2800      	cmp	r0, #0
  401e06:	d1fa      	bne.n	401dfe <usart_serial_putchar+0x7e>
		return 1;
  401e08:	2001      	movs	r0, #1
  401e0a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401e0c:	461e      	mov	r6, r3
  401e0e:	4d10      	ldr	r5, [pc, #64]	; (401e50 <usart_serial_putchar+0xd0>)
  401e10:	4621      	mov	r1, r4
  401e12:	4630      	mov	r0, r6
  401e14:	47a8      	blx	r5
  401e16:	2800      	cmp	r0, #0
  401e18:	d1fa      	bne.n	401e10 <usart_serial_putchar+0x90>
		return 1;
  401e1a:	2001      	movs	r0, #1
  401e1c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401e1e:	461e      	mov	r6, r3
  401e20:	4d0b      	ldr	r5, [pc, #44]	; (401e50 <usart_serial_putchar+0xd0>)
  401e22:	4621      	mov	r1, r4
  401e24:	4630      	mov	r0, r6
  401e26:	47a8      	blx	r5
  401e28:	2800      	cmp	r0, #0
  401e2a:	d1fa      	bne.n	401e22 <usart_serial_putchar+0xa2>
		return 1;
  401e2c:	2001      	movs	r0, #1
  401e2e:	bd70      	pop	{r4, r5, r6, pc}
  401e30:	400e0800 	.word	0x400e0800
  401e34:	400e0a00 	.word	0x400e0a00
  401e38:	400e1a00 	.word	0x400e1a00
  401e3c:	400e1c00 	.word	0x400e1c00
  401e40:	40024000 	.word	0x40024000
  401e44:	40028000 	.word	0x40028000
  401e48:	4002c000 	.word	0x4002c000
  401e4c:	0040149d 	.word	0x0040149d
  401e50:	004015a5 	.word	0x004015a5

00401e54 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  401e54:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  401e56:	460a      	mov	r2, r1
  401e58:	4601      	mov	r1, r0
  401e5a:	4802      	ldr	r0, [pc, #8]	; (401e64 <vApplicationStackOverflowHook+0x10>)
  401e5c:	4b02      	ldr	r3, [pc, #8]	; (401e68 <vApplicationStackOverflowHook+0x14>)
  401e5e:	4798      	blx	r3
  401e60:	e7fe      	b.n	401e60 <vApplicationStackOverflowHook+0xc>
  401e62:	bf00      	nop
  401e64:	00405468 	.word	0x00405468
  401e68:	004027f9 	.word	0x004027f9

00401e6c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  401e6c:	4770      	bx	lr
	...

00401e70 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401e74:	b085      	sub	sp, #20
  401e76:	4606      	mov	r6, r0
  401e78:	460c      	mov	r4, r1
  401e7a:	4617      	mov	r7, r2
  401e7c:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  401e7e:	4608      	mov	r0, r1
  401e80:	4b1c      	ldr	r3, [pc, #112]	; (401ef4 <TC_init+0x84>)
  401e82:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401e84:	4d1c      	ldr	r5, [pc, #112]	; (401ef8 <TC_init+0x88>)
  401e86:	9500      	str	r5, [sp, #0]
  401e88:	ab02      	add	r3, sp, #8
  401e8a:	aa03      	add	r2, sp, #12
  401e8c:	4629      	mov	r1, r5
  401e8e:	4640      	mov	r0, r8
  401e90:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401f14 <TC_init+0xa4>
  401e94:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401e96:	9a02      	ldr	r2, [sp, #8]
  401e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401e9c:	4639      	mov	r1, r7
  401e9e:	4630      	mov	r0, r6
  401ea0:	4b16      	ldr	r3, [pc, #88]	; (401efc <TC_init+0x8c>)
  401ea2:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401ea4:	9a03      	ldr	r2, [sp, #12]
  401ea6:	fbb5 f2f2 	udiv	r2, r5, r2
  401eaa:	fbb2 f2f8 	udiv	r2, r2, r8
  401eae:	4639      	mov	r1, r7
  401eb0:	4630      	mov	r0, r6
  401eb2:	4b13      	ldr	r3, [pc, #76]	; (401f00 <TC_init+0x90>)
  401eb4:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  401eb6:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401eb8:	2b00      	cmp	r3, #0
  401eba:	db13      	blt.n	401ee4 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ebc:	4a11      	ldr	r2, [pc, #68]	; (401f04 <TC_init+0x94>)
  401ebe:	2180      	movs	r1, #128	; 0x80
  401ec0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ec2:	095b      	lsrs	r3, r3, #5
  401ec4:	f004 041f 	and.w	r4, r4, #31
  401ec8:	2201      	movs	r2, #1
  401eca:	fa02 f404 	lsl.w	r4, r2, r4
  401ece:	4a0e      	ldr	r2, [pc, #56]	; (401f08 <TC_init+0x98>)
  401ed0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401ed4:	2210      	movs	r2, #16
  401ed6:	4639      	mov	r1, r7
  401ed8:	4630      	mov	r0, r6
  401eda:	4b0c      	ldr	r3, [pc, #48]	; (401f0c <TC_init+0x9c>)
  401edc:	4798      	blx	r3
}
  401ede:	b005      	add	sp, #20
  401ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401ee4:	f004 010f 	and.w	r1, r4, #15
  401ee8:	4a09      	ldr	r2, [pc, #36]	; (401f10 <TC_init+0xa0>)
  401eea:	440a      	add	r2, r1
  401eec:	2180      	movs	r1, #128	; 0x80
  401eee:	7611      	strb	r1, [r2, #24]
  401ef0:	e7e7      	b.n	401ec2 <TC_init+0x52>
  401ef2:	bf00      	nop
  401ef4:	00401185 	.word	0x00401185
  401ef8:	11e1a300 	.word	0x11e1a300
  401efc:	004006e7 	.word	0x004006e7
  401f00:	00400709 	.word	0x00400709
  401f04:	e000e400 	.word	0xe000e400
  401f08:	e000e100 	.word	0xe000e100
  401f0c:	00400711 	.word	0x00400711
  401f10:	e000ecfc 	.word	0xe000ecfc
  401f14:	00400721 	.word	0x00400721

00401f18 <pin_toggle>:
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
	}
}

void pin_toggle(Pio *pio, uint32_t mask){
  401f18:	b538      	push	{r3, r4, r5, lr}
  401f1a:	4604      	mov	r4, r0
  401f1c:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  401f1e:	4b06      	ldr	r3, [pc, #24]	; (401f38 <pin_toggle+0x20>)
  401f20:	4798      	blx	r3
  401f22:	b920      	cbnz	r0, 401f2e <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  401f24:	4629      	mov	r1, r5
  401f26:	4620      	mov	r0, r4
  401f28:	4b04      	ldr	r3, [pc, #16]	; (401f3c <pin_toggle+0x24>)
  401f2a:	4798      	blx	r3
  401f2c:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  401f2e:	4629      	mov	r1, r5
  401f30:	4620      	mov	r0, r4
  401f32:	4b03      	ldr	r3, [pc, #12]	; (401f40 <pin_toggle+0x28>)
  401f34:	4798      	blx	r3
  401f36:	bd38      	pop	{r3, r4, r5, pc}
  401f38:	00400ef5 	.word	0x00400ef5
  401f3c:	00400d6b 	.word	0x00400d6b
  401f40:	00400d6f 	.word	0x00400d6f

00401f44 <TC2_Handler>:
void TC2_Handler(void) {
  401f44:	b500      	push	{lr}
  401f46:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 2);
  401f48:	2102      	movs	r1, #2
  401f4a:	4806      	ldr	r0, [pc, #24]	; (401f64 <TC2_Handler+0x20>)
  401f4c:	4b06      	ldr	r3, [pc, #24]	; (401f68 <TC2_Handler+0x24>)
  401f4e:	4798      	blx	r3
  401f50:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_PIO_IDX_MASK);  
  401f52:	f44f 7180 	mov.w	r1, #256	; 0x100
  401f56:	4805      	ldr	r0, [pc, #20]	; (401f6c <TC2_Handler+0x28>)
  401f58:	4b05      	ldr	r3, [pc, #20]	; (401f70 <TC2_Handler+0x2c>)
  401f5a:	4798      	blx	r3
}
  401f5c:	b003      	add	sp, #12
  401f5e:	f85d fb04 	ldr.w	pc, [sp], #4
  401f62:	bf00      	nop
  401f64:	4000c000 	.word	0x4000c000
  401f68:	00400719 	.word	0x00400719
  401f6c:	400e1200 	.word	0x400e1200
  401f70:	00401f19 	.word	0x00401f19

00401f74 <TC1_Handler>:
void TC1_Handler(void) {
  401f74:	b500      	push	{lr}
  401f76:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401f78:	2101      	movs	r1, #1
  401f7a:	4805      	ldr	r0, [pc, #20]	; (401f90 <TC1_Handler+0x1c>)
  401f7c:	4b05      	ldr	r3, [pc, #20]	; (401f94 <TC1_Handler+0x20>)
  401f7e:	4798      	blx	r3
  401f80:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);  
  401f82:	2101      	movs	r1, #1
  401f84:	4804      	ldr	r0, [pc, #16]	; (401f98 <TC1_Handler+0x24>)
  401f86:	4b05      	ldr	r3, [pc, #20]	; (401f9c <TC1_Handler+0x28>)
  401f88:	4798      	blx	r3
}
  401f8a:	b003      	add	sp, #12
  401f8c:	f85d fb04 	ldr.w	pc, [sp], #4
  401f90:	4000c000 	.word	0x4000c000
  401f94:	00400719 	.word	0x00400719
  401f98:	400e0e00 	.word	0x400e0e00
  401f9c:	00401f19 	.word	0x00401f19

00401fa0 <RTT_Handler>:
void RTT_Handler(void) {
  401fa0:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  401fa2:	480c      	ldr	r0, [pc, #48]	; (401fd4 <RTT_Handler+0x34>)
  401fa4:	4b0c      	ldr	r3, [pc, #48]	; (401fd8 <RTT_Handler+0x38>)
  401fa6:	4798      	blx	r3
  401fa8:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401faa:	f010 0f01 	tst.w	r0, #1
  401fae:	d103      	bne.n	401fb8 <RTT_Handler+0x18>
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  401fb0:	f014 0f02 	tst.w	r4, #2
  401fb4:	d108      	bne.n	401fc8 <RTT_Handler+0x28>
  401fb6:	bd10      	pop	{r4, pc}
		RTT_init(4, 0, RTT_MR_RTTINCIEN);
  401fb8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401fbc:	2000      	movs	r0, #0
  401fbe:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401fc2:	4b06      	ldr	r3, [pc, #24]	; (401fdc <RTT_Handler+0x3c>)
  401fc4:	4798      	blx	r3
  401fc6:	e7f3      	b.n	401fb0 <RTT_Handler+0x10>
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
  401fc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fcc:	4804      	ldr	r0, [pc, #16]	; (401fe0 <RTT_Handler+0x40>)
  401fce:	4b05      	ldr	r3, [pc, #20]	; (401fe4 <RTT_Handler+0x44>)
  401fd0:	4798      	blx	r3
}
  401fd2:	e7f0      	b.n	401fb6 <RTT_Handler+0x16>
  401fd4:	400e1830 	.word	0x400e1830
  401fd8:	00400555 	.word	0x00400555
  401fdc:	00401bed 	.word	0x00401bed
  401fe0:	400e1200 	.word	0x400e1200
  401fe4:	00401f19 	.word	0x00401f19

00401fe8 <RTC_init>:
}


//**********CODIGO PARA O LED3*************//
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401fe8:	b082      	sub	sp, #8
  401fea:	b570      	push	{r4, r5, r6, lr}
  401fec:	b082      	sub	sp, #8
  401fee:	4605      	mov	r5, r0
  401ff0:	460c      	mov	r4, r1
  401ff2:	a906      	add	r1, sp, #24
  401ff4:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401ff8:	2002      	movs	r0, #2
  401ffa:	4b1d      	ldr	r3, [pc, #116]	; (402070 <RTC_init+0x88>)
  401ffc:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401ffe:	2100      	movs	r1, #0
  402000:	4628      	mov	r0, r5
  402002:	4b1c      	ldr	r3, [pc, #112]	; (402074 <RTC_init+0x8c>)
  402004:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  402006:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402008:	9300      	str	r3, [sp, #0]
  40200a:	9b08      	ldr	r3, [sp, #32]
  40200c:	9a07      	ldr	r2, [sp, #28]
  40200e:	9906      	ldr	r1, [sp, #24]
  402010:	4628      	mov	r0, r5
  402012:	4e19      	ldr	r6, [pc, #100]	; (402078 <RTC_init+0x90>)
  402014:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  402016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40201a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40201c:	4628      	mov	r0, r5
  40201e:	4e17      	ldr	r6, [pc, #92]	; (40207c <RTC_init+0x94>)
  402020:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  402022:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402024:	b2e4      	uxtb	r4, r4
  402026:	f004 011f 	and.w	r1, r4, #31
  40202a:	2301      	movs	r3, #1
  40202c:	408b      	lsls	r3, r1
  40202e:	0956      	lsrs	r6, r2, #5
  402030:	4813      	ldr	r0, [pc, #76]	; (402080 <RTC_init+0x98>)
  402032:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  402036:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40203a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  40203e:	2a00      	cmp	r2, #0
  402040:	db0f      	blt.n	402062 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402042:	490f      	ldr	r1, [pc, #60]	; (402080 <RTC_init+0x98>)
  402044:	4411      	add	r1, r2
  402046:	2280      	movs	r2, #128	; 0x80
  402048:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40204c:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  402050:	990d      	ldr	r1, [sp, #52]	; 0x34
  402052:	4628      	mov	r0, r5
  402054:	4b0b      	ldr	r3, [pc, #44]	; (402084 <RTC_init+0x9c>)
  402056:	4798      	blx	r3
}
  402058:	b002      	add	sp, #8
  40205a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40205e:	b002      	add	sp, #8
  402060:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402062:	f004 040f 	and.w	r4, r4, #15
  402066:	4a08      	ldr	r2, [pc, #32]	; (402088 <RTC_init+0xa0>)
  402068:	2180      	movs	r1, #128	; 0x80
  40206a:	5511      	strb	r1, [r2, r4]
  40206c:	e7ee      	b.n	40204c <RTC_init+0x64>
  40206e:	bf00      	nop
  402070:	00401185 	.word	0x00401185
  402074:	004001ad 	.word	0x004001ad
  402078:	004003b9 	.word	0x004003b9
  40207c:	00400221 	.word	0x00400221
  402080:	e000e100 	.word	0xe000e100
  402084:	004001c3 	.word	0x004001c3
  402088:	e000ed14 	.word	0xe000ed14

0040208c <RTC_Handler>:

void RTC_Handler(void) {
  40208c:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40208e:	4811      	ldr	r0, [pc, #68]	; (4020d4 <RTC_Handler+0x48>)
  402090:	4b11      	ldr	r3, [pc, #68]	; (4020d8 <RTC_Handler+0x4c>)
  402092:	4798      	blx	r3
	
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
	}
	
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  402094:	f010 0f02 	tst.w	r0, #2
  402098:	d114      	bne.n	4020c4 <RTC_Handler+0x38>
		printf("Init do RTC \n");
		flag_rtc_alarm = 1;
	}

	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  40209a:	4d0e      	ldr	r5, [pc, #56]	; (4020d4 <RTC_Handler+0x48>)
  40209c:	2104      	movs	r1, #4
  40209e:	4628      	mov	r0, r5
  4020a0:	4c0e      	ldr	r4, [pc, #56]	; (4020dc <RTC_Handler+0x50>)
  4020a2:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  4020a4:	2102      	movs	r1, #2
  4020a6:	4628      	mov	r0, r5
  4020a8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4020aa:	2101      	movs	r1, #1
  4020ac:	4628      	mov	r0, r5
  4020ae:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4020b0:	2108      	movs	r1, #8
  4020b2:	4628      	mov	r0, r5
  4020b4:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4020b6:	2110      	movs	r1, #16
  4020b8:	4628      	mov	r0, r5
  4020ba:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  4020bc:	2120      	movs	r1, #32
  4020be:	4628      	mov	r0, r5
  4020c0:	47a0      	blx	r4
  4020c2:	bd38      	pop	{r3, r4, r5, pc}
		printf("Init do RTC \n");
  4020c4:	4806      	ldr	r0, [pc, #24]	; (4020e0 <RTC_Handler+0x54>)
  4020c6:	4b07      	ldr	r3, [pc, #28]	; (4020e4 <RTC_Handler+0x58>)
  4020c8:	4798      	blx	r3
		flag_rtc_alarm = 1;
  4020ca:	2201      	movs	r2, #1
  4020cc:	4b06      	ldr	r3, [pc, #24]	; (4020e8 <RTC_Handler+0x5c>)
  4020ce:	701a      	strb	r2, [r3, #0]
  4020d0:	e7e3      	b.n	40209a <RTC_Handler+0xe>
  4020d2:	bf00      	nop
  4020d4:	400e1860 	.word	0x400e1860
  4020d8:	004004d1 	.word	0x004004d1
  4020dc:	004004d5 	.word	0x004004d5
  4020e0:	00405424 	.word	0x00405424
  4020e4:	004027f9 	.word	0x004027f9
  4020e8:	20400cf5 	.word	0x20400cf5

004020ec <pisca_led>:
}

void pisca_led (int n, int t) {
  4020ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  4020f0:	f1b0 0800 	subs.w	r8, r0, #0
  4020f4:	dd30      	ble.n	402158 <pisca_led+0x6c>
  4020f6:	460f      	mov	r7, r1
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
		delay_ms(t);
  4020f8:	17cd      	asrs	r5, r1, #31
  4020fa:	4b18      	ldr	r3, [pc, #96]	; (40215c <pisca_led+0x70>)
  4020fc:	fba1 0103 	umull	r0, r1, r1, r3
  402100:	fb03 1105 	mla	r1, r3, r5, r1
  402104:	f241 722c 	movw	r2, #5932	; 0x172c
  402108:	2300      	movs	r3, #0
  40210a:	f241 742b 	movw	r4, #5931	; 0x172b
  40210e:	2500      	movs	r5, #0
  402110:	1900      	adds	r0, r0, r4
  402112:	4169      	adcs	r1, r5
  402114:	4c12      	ldr	r4, [pc, #72]	; (402160 <pisca_led+0x74>)
  402116:	47a0      	blx	r4
  402118:	4682      	mov	sl, r0
  40211a:	2400      	movs	r4, #0
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  40211c:	4e11      	ldr	r6, [pc, #68]	; (402164 <pisca_led+0x78>)
  40211e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 402170 <pisca_led+0x84>
		delay_ms(t);
  402122:	4d11      	ldr	r5, [pc, #68]	; (402168 <pisca_led+0x7c>)
  402124:	e00a      	b.n	40213c <pisca_led+0x50>
  402126:	2033      	movs	r0, #51	; 0x33
  402128:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40212a:	2104      	movs	r1, #4
  40212c:	4630      	mov	r0, r6
  40212e:	4b0f      	ldr	r3, [pc, #60]	; (40216c <pisca_led+0x80>)
  402130:	4798      	blx	r3
		delay_ms(t);
  402132:	2033      	movs	r0, #51	; 0x33
  402134:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  402136:	3401      	adds	r4, #1
  402138:	45a0      	cmp	r8, r4
  40213a:	d00d      	beq.n	402158 <pisca_led+0x6c>
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  40213c:	2104      	movs	r1, #4
  40213e:	4630      	mov	r0, r6
  402140:	47c8      	blx	r9
		delay_ms(t);
  402142:	2f00      	cmp	r7, #0
  402144:	d0ef      	beq.n	402126 <pisca_led+0x3a>
  402146:	4650      	mov	r0, sl
  402148:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40214a:	2104      	movs	r1, #4
  40214c:	4630      	mov	r0, r6
  40214e:	4b07      	ldr	r3, [pc, #28]	; (40216c <pisca_led+0x80>)
  402150:	4798      	blx	r3
		delay_ms(t);
  402152:	4650      	mov	r0, sl
  402154:	47a8      	blx	r5
  402156:	e7ee      	b.n	402136 <pisca_led+0x4a>
  402158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40215c:	11e1a300 	.word	0x11e1a300
  402160:	00402499 	.word	0x00402499
  402164:	400e1000 	.word	0x400e1000
  402168:	20400001 	.word	0x20400001
  40216c:	00400d6b 	.word	0x00400d6b
  402170:	00400d6f 	.word	0x00400d6f

00402174 <io_init>:
}

//*****************************************//


void io_init(void){
  402174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402178:	b083      	sub	sp, #12
	pmc_enable_periph_clk(LED_PIO_ID);
  40217a:	200c      	movs	r0, #12
  40217c:	4e37      	ldr	r6, [pc, #220]	; (40225c <io_init+0xe8>)
  40217e:	47b0      	blx	r6
	pio_set_output(LED_PIO,LED_PIO_IDX_MASK,0,0,0);
  402180:	f8df 8100 	ldr.w	r8, [pc, #256]	; 402284 <io_init+0x110>
  402184:	2400      	movs	r4, #0
  402186:	9400      	str	r4, [sp, #0]
  402188:	4623      	mov	r3, r4
  40218a:	4622      	mov	r2, r4
  40218c:	f44f 7180 	mov.w	r1, #256	; 0x100
  402190:	4640      	mov	r0, r8
  402192:	4f33      	ldr	r7, [pc, #204]	; (402260 <io_init+0xec>)
  402194:	47b8      	blx	r7
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  402196:	4623      	mov	r3, r4
  402198:	f44f 7280 	mov.w	r2, #256	; 0x100
  40219c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4021a0:	4640      	mov	r0, r8
  4021a2:	4d30      	ldr	r5, [pc, #192]	; (402264 <io_init+0xf0>)
  4021a4:	47a8      	blx	r5
	
	pmc_enable_periph_clk(LED1_PIO_ID);
  4021a6:	200a      	movs	r0, #10
  4021a8:	47b0      	blx	r6
	pio_set_output(LED1_PIO,LED1_PIO_IDX_MASK,0,0,0);
  4021aa:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 402288 <io_init+0x114>
  4021ae:	9400      	str	r4, [sp, #0]
  4021b0:	4623      	mov	r3, r4
  4021b2:	4622      	mov	r2, r4
  4021b4:	2101      	movs	r1, #1
  4021b6:	4648      	mov	r0, r9
  4021b8:	47b8      	blx	r7
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  4021ba:	4623      	mov	r3, r4
  4021bc:	2201      	movs	r2, #1
  4021be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4021c2:	4648      	mov	r0, r9
  4021c4:	47a8      	blx	r5
	
	pmc_enable_periph_clk(LED2_PIO_ID);
  4021c6:	200c      	movs	r0, #12
  4021c8:	47b0      	blx	r6
	pio_set_output(LED2_PIO,LED2_PIO_IDX_MASK,0,0,0);
  4021ca:	9400      	str	r4, [sp, #0]
  4021cc:	4623      	mov	r3, r4
  4021ce:	4622      	mov	r2, r4
  4021d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4021d4:	4640      	mov	r0, r8
  4021d6:	47b8      	blx	r7
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  4021d8:	4623      	mov	r3, r4
  4021da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4021de:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4021e2:	4640      	mov	r0, r8
  4021e4:	47a8      	blx	r5
	
	pmc_enable_periph_clk(LED3_PIO_ID);
  4021e6:	200b      	movs	r0, #11
  4021e8:	47b0      	blx	r6
	pio_set_output(LED3_PIO,LED3_PIO_IDX_MASK,0,0,0);
  4021ea:	f5a8 7800 	sub.w	r8, r8, #512	; 0x200
  4021ee:	9400      	str	r4, [sp, #0]
  4021f0:	4623      	mov	r3, r4
  4021f2:	4622      	mov	r2, r4
  4021f4:	2104      	movs	r1, #4
  4021f6:	4640      	mov	r0, r8
  4021f8:	47b8      	blx	r7
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  4021fa:	4623      	mov	r3, r4
  4021fc:	2204      	movs	r2, #4
  4021fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402202:	4640      	mov	r0, r8
  402204:	47a8      	blx	r5
	
	pmc_enable_periph_clk(BUT1_PIO_ID);
  402206:	2010      	movs	r0, #16
  402208:	47b0      	blx	r6
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40220a:	4c17      	ldr	r4, [pc, #92]	; (402268 <io_init+0xf4>)
  40220c:	2309      	movs	r3, #9
  40220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402212:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402216:	4620      	mov	r0, r4
  402218:	47a8      	blx	r5
	pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, 60);
  40221a:	223c      	movs	r2, #60	; 0x3c
  40221c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402220:	4620      	mov	r0, r4
  402222:	4b12      	ldr	r3, [pc, #72]	; (40226c <io_init+0xf8>)
  402224:	4798      	blx	r3
	pio_handler_set(BUT1_PIO,	BUT1_PIO_ID,	BUT1_PIO_IDX_MASK,	PIO_IT_EDGE,	but1_callback);
  402226:	4b12      	ldr	r3, [pc, #72]	; (402270 <io_init+0xfc>)
  402228:	9300      	str	r3, [sp, #0]
  40222a:	2340      	movs	r3, #64	; 0x40
  40222c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402230:	2110      	movs	r1, #16
  402232:	4620      	mov	r0, r4
  402234:	4d0f      	ldr	r5, [pc, #60]	; (402274 <io_init+0x100>)
  402236:	47a8      	blx	r5
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  402238:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40223c:	4620      	mov	r0, r4
  40223e:	4b0e      	ldr	r3, [pc, #56]	; (402278 <io_init+0x104>)
  402240:	4798      	blx	r3
	pio_get_interrupt_status(BUT1_PIO);
  402242:	4620      	mov	r0, r4
  402244:	4b0d      	ldr	r3, [pc, #52]	; (40227c <io_init+0x108>)
  402246:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402248:	4b0d      	ldr	r3, [pc, #52]	; (402280 <io_init+0x10c>)
  40224a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40224e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402250:	2280      	movs	r2, #128	; 0x80
  402252:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_PIO_ID);
	NVIC_SetPriority(BUT1_PIO_ID, 4);
}
  402256:	b003      	add	sp, #12
  402258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40225c:	00401185 	.word	0x00401185
  402260:	00400e3b 	.word	0x00400e3b
  402264:	00400e65 	.word	0x00400e65
  402268:	400e1400 	.word	0x400e1400
  40226c:	00400d51 	.word	0x00400d51
  402270:	00401bd1 	.word	0x00401bd1
  402274:	00400f91 	.word	0x00400f91
  402278:	00400f33 	.word	0x00400f33
  40227c:	00400f37 	.word	0x00400f37
  402280:	e000e100 	.word	0xe000e100
  402284:	400e1200 	.word	0x400e1200
  402288:	400e0e00 	.word	0x400e0e00

0040228c <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  40228c:	b580      	push	{r7, lr}
  40228e:	b09a      	sub	sp, #104	; 0x68
	/* Initialize the SAM system */
	sysclk_init();
  402290:	4b5d      	ldr	r3, [pc, #372]	; (402408 <main+0x17c>)
  402292:	4798      	blx	r3
	board_init();
  402294:	4b5d      	ldr	r3, [pc, #372]	; (40240c <main+0x180>)
  402296:	4798      	blx	r3
	io_init();
  402298:	4b5d      	ldr	r3, [pc, #372]	; (402410 <main+0x184>)
  40229a:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  40229c:	4b5d      	ldr	r3, [pc, #372]	; (402414 <main+0x188>)
  40229e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4022a0:	4d5d      	ldr	r5, [pc, #372]	; (402418 <main+0x18c>)
  4022a2:	4b5e      	ldr	r3, [pc, #376]	; (40241c <main+0x190>)
  4022a4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4022a6:	4a5e      	ldr	r2, [pc, #376]	; (402420 <main+0x194>)
  4022a8:	4b5e      	ldr	r3, [pc, #376]	; (402424 <main+0x198>)
  4022aa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4022ac:	4a5e      	ldr	r2, [pc, #376]	; (402428 <main+0x19c>)
  4022ae:	4b5f      	ldr	r3, [pc, #380]	; (40242c <main+0x1a0>)
  4022b0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4022b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4022b6:	930d      	str	r3, [sp, #52]	; 0x34
	usart_settings.char_length = opt->charlength;
  4022b8:	23c0      	movs	r3, #192	; 0xc0
  4022ba:	930e      	str	r3, [sp, #56]	; 0x38
	usart_settings.parity_type = opt->paritytype;
  4022bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022c0:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_settings.stop_bits= opt->stopbits;
  4022c2:	2400      	movs	r4, #0
  4022c4:	9410      	str	r4, [sp, #64]	; 0x40
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4022c6:	9411      	str	r4, [sp, #68]	; 0x44
  4022c8:	200e      	movs	r0, #14
  4022ca:	4b59      	ldr	r3, [pc, #356]	; (402430 <main+0x1a4>)
  4022cc:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4022ce:	4a59      	ldr	r2, [pc, #356]	; (402434 <main+0x1a8>)
  4022d0:	a90d      	add	r1, sp, #52	; 0x34
  4022d2:	4628      	mov	r0, r5
  4022d4:	4b58      	ldr	r3, [pc, #352]	; (402438 <main+0x1ac>)
  4022d6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4022d8:	4628      	mov	r0, r5
  4022da:	4b58      	ldr	r3, [pc, #352]	; (40243c <main+0x1b0>)
  4022dc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4022de:	4628      	mov	r0, r5
  4022e0:	4b57      	ldr	r3, [pc, #348]	; (402440 <main+0x1b4>)
  4022e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4022e4:	4e57      	ldr	r6, [pc, #348]	; (402444 <main+0x1b8>)
  4022e6:	6833      	ldr	r3, [r6, #0]
  4022e8:	4621      	mov	r1, r4
  4022ea:	6898      	ldr	r0, [r3, #8]
  4022ec:	4d56      	ldr	r5, [pc, #344]	; (402448 <main+0x1bc>)
  4022ee:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4022f0:	6833      	ldr	r3, [r6, #0]
  4022f2:	4621      	mov	r1, r4
  4022f4:	6858      	ldr	r0, [r3, #4]
  4022f6:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4022f8:	6833      	ldr	r3, [r6, #0]
  4022fa:	4621      	mov	r1, r4
  4022fc:	6898      	ldr	r0, [r3, #8]
  4022fe:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();
	
	//ativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  402300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402304:	4b51      	ldr	r3, [pc, #324]	; (40244c <main+0x1c0>)
  402306:	605a      	str	r2, [r3, #4]
	
	//LED0
	TC_init(TC0, ID_TC2, 2, 5);
  402308:	4c51      	ldr	r4, [pc, #324]	; (402450 <main+0x1c4>)
  40230a:	2305      	movs	r3, #5
  40230c:	2202      	movs	r2, #2
  40230e:	2119      	movs	r1, #25
  402310:	4620      	mov	r0, r4
  402312:	4e50      	ldr	r6, [pc, #320]	; (402454 <main+0x1c8>)
  402314:	47b0      	blx	r6
	tc_start(TC0, 2);
  402316:	2102      	movs	r1, #2
  402318:	4620      	mov	r0, r4
  40231a:	4d4f      	ldr	r5, [pc, #316]	; (402458 <main+0x1cc>)
  40231c:	47a8      	blx	r5
	
	//LED1
	TC_init(TC0, ID_TC1, 1, 4);
  40231e:	2304      	movs	r3, #4
  402320:	2201      	movs	r2, #1
  402322:	2118      	movs	r1, #24
  402324:	4620      	mov	r0, r4
  402326:	47b0      	blx	r6
	tc_start(TC0, 1);
  402328:	2101      	movs	r1, #1
  40232a:	4620      	mov	r0, r4
  40232c:	47a8      	blx	r5
	
	//LED2
	RTT_init(4, 16, RTT_MR_ALMIEN);
  40232e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402332:	2010      	movs	r0, #16
  402334:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  402338:	4b48      	ldr	r3, [pc, #288]	; (40245c <main+0x1d0>)
  40233a:	4798      	blx	r3
	
	//LED3
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  40233c:	ac13      	add	r4, sp, #76	; 0x4c
  40233e:	4d48      	ldr	r5, [pc, #288]	; (402460 <main+0x1d4>)
  402340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  40234c:	2602      	movs	r6, #2
  40234e:	9605      	str	r6, [sp, #20]
  402350:	466c      	mov	r4, sp
  402352:	ad15      	add	r5, sp, #84	; 0x54
  402354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402358:	682b      	ldr	r3, [r5, #0]
  40235a:	6023      	str	r3, [r4, #0]
  40235c:	ab13      	add	r3, sp, #76	; 0x4c
  40235e:	cb0c      	ldmia	r3, {r2, r3}
  402360:	4631      	mov	r1, r6
  402362:	4840      	ldr	r0, [pc, #256]	; (402464 <main+0x1d8>)
  402364:	4c40      	ldr	r4, [pc, #256]	; (402468 <main+0x1dc>)
  402366:	47a0      	blx	r4
	
	while(1) {
		if(but1_flag){
  402368:	4c40      	ldr	r4, [pc, #256]	; (40246c <main+0x1e0>)
			printf("Entrou na main \n");
  40236a:	4e41      	ldr	r6, [pc, #260]	; (402470 <main+0x1e4>)
			uint32_t current_hour, current_min, current_sec;
			uint32_t current_year, current_month, current_day, current_week;
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  40236c:	4d3d      	ldr	r5, [pc, #244]	; (402464 <main+0x1d8>)
  40236e:	e039      	b.n	4023e4 <main+0x158>
			printf("Entrou na main \n");
  402370:	4630      	mov	r0, r6
  402372:	4b40      	ldr	r3, [pc, #256]	; (402474 <main+0x1e8>)
  402374:	4798      	blx	r3
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  402376:	ab09      	add	r3, sp, #36	; 0x24
  402378:	aa08      	add	r2, sp, #32
  40237a:	a907      	add	r1, sp, #28
  40237c:	4628      	mov	r0, r5
  40237e:	4f3e      	ldr	r7, [pc, #248]	; (402478 <main+0x1ec>)
  402380:	47b8      	blx	r7
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  402382:	ab0d      	add	r3, sp, #52	; 0x34
  402384:	9300      	str	r3, [sp, #0]
  402386:	ab0c      	add	r3, sp, #48	; 0x30
  402388:	aa0b      	add	r2, sp, #44	; 0x2c
  40238a:	a90a      	add	r1, sp, #40	; 0x28
  40238c:	4628      	mov	r0, r5
  40238e:	4f3b      	ldr	r7, [pc, #236]	; (40247c <main+0x1f0>)
  402390:	47b8      	blx	r7
			rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);
  402392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402394:	9300      	str	r3, [sp, #0]
  402396:	2301      	movs	r3, #1
  402398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40239a:	4619      	mov	r1, r3
  40239c:	4628      	mov	r0, r5
  40239e:	4f38      	ldr	r7, [pc, #224]	; (402480 <main+0x1f4>)
  4023a0:	47b8      	blx	r7
			
			if(current_sec<40){
  4023a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023a4:	2b27      	cmp	r3, #39	; 0x27
  4023a6:	d80d      	bhi.n	4023c4 <main+0x138>
				rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec+20);
  4023a8:	3314      	adds	r3, #20
  4023aa:	9302      	str	r3, [sp, #8]
  4023ac:	2101      	movs	r1, #1
  4023ae:	9101      	str	r1, [sp, #4]
  4023b0:	9b08      	ldr	r3, [sp, #32]
  4023b2:	9300      	str	r3, [sp, #0]
  4023b4:	460b      	mov	r3, r1
  4023b6:	9a07      	ldr	r2, [sp, #28]
  4023b8:	4628      	mov	r0, r5
  4023ba:	4f32      	ldr	r7, [pc, #200]	; (402484 <main+0x1f8>)
  4023bc:	47b8      	blx	r7
			}
			else{
				rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min+1, 1, current_sec - 40);
			}
			but1_flag = 0;
  4023be:	2300      	movs	r3, #0
  4023c0:	7023      	strb	r3, [r4, #0]
  4023c2:	e012      	b.n	4023ea <main+0x15e>
				rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min+1, 1, current_sec - 40);
  4023c4:	3b28      	subs	r3, #40	; 0x28
  4023c6:	9302      	str	r3, [sp, #8]
  4023c8:	2101      	movs	r1, #1
  4023ca:	9101      	str	r1, [sp, #4]
  4023cc:	9b08      	ldr	r3, [sp, #32]
  4023ce:	440b      	add	r3, r1
  4023d0:	9300      	str	r3, [sp, #0]
  4023d2:	460b      	mov	r3, r1
  4023d4:	9a07      	ldr	r2, [sp, #28]
  4023d6:	4628      	mov	r0, r5
  4023d8:	4f2a      	ldr	r7, [pc, #168]	; (402484 <main+0x1f8>)
  4023da:	47b8      	blx	r7
  4023dc:	e7ef      	b.n	4023be <main+0x132>
		if(flag_rtc_alarm){
			pisca_led(3, 200);
			printf("Piscou :) \n");
			flag_rtc_alarm = 0;
		}
				pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4023de:	2002      	movs	r0, #2
  4023e0:	4b29      	ldr	r3, [pc, #164]	; (402488 <main+0x1fc>)
  4023e2:	4798      	blx	r3
		if(but1_flag){
  4023e4:	7823      	ldrb	r3, [r4, #0]
  4023e6:	2b00      	cmp	r3, #0
  4023e8:	d1c2      	bne.n	402370 <main+0xe4>
		if(flag_rtc_alarm){
  4023ea:	4b28      	ldr	r3, [pc, #160]	; (40248c <main+0x200>)
  4023ec:	781b      	ldrb	r3, [r3, #0]
  4023ee:	2b00      	cmp	r3, #0
  4023f0:	d0f5      	beq.n	4023de <main+0x152>
			pisca_led(3, 200);
  4023f2:	21c8      	movs	r1, #200	; 0xc8
  4023f4:	2003      	movs	r0, #3
  4023f6:	4b26      	ldr	r3, [pc, #152]	; (402490 <main+0x204>)
  4023f8:	4798      	blx	r3
			printf("Piscou :) \n");
  4023fa:	4826      	ldr	r0, [pc, #152]	; (402494 <main+0x208>)
  4023fc:	4b1d      	ldr	r3, [pc, #116]	; (402474 <main+0x1e8>)
  4023fe:	4798      	blx	r3
			flag_rtc_alarm = 0;
  402400:	2200      	movs	r2, #0
  402402:	4b22      	ldr	r3, [pc, #136]	; (40248c <main+0x200>)
  402404:	701a      	strb	r2, [r3, #0]
  402406:	e7ea      	b.n	4023de <main+0x152>
  402408:	00400abd 	.word	0x00400abd
  40240c:	00400bb9 	.word	0x00400bb9
  402410:	00402175 	.word	0x00402175
  402414:	0040080d 	.word	0x0040080d
  402418:	40028000 	.word	0x40028000
  40241c:	20400d34 	.word	0x20400d34
  402420:	00401d81 	.word	0x00401d81
  402424:	20400d30 	.word	0x20400d30
  402428:	00401ca5 	.word	0x00401ca5
  40242c:	20400d2c 	.word	0x20400d2c
  402430:	00401185 	.word	0x00401185
  402434:	08f0d180 	.word	0x08f0d180
  402438:	00401545 	.word	0x00401545
  40243c:	00401599 	.word	0x00401599
  402440:	0040159f 	.word	0x0040159f
  402444:	20400010 	.word	0x20400010
  402448:	00402f9d 	.word	0x00402f9d
  40244c:	400e1850 	.word	0x400e1850
  402450:	4000c000 	.word	0x4000c000
  402454:	00401e71 	.word	0x00401e71
  402458:	00400701 	.word	0x00400701
  40245c:	00401bed 	.word	0x00401bed
  402460:	00405408 	.word	0x00405408
  402464:	400e1860 	.word	0x400e1860
  402468:	00401fe9 	.word	0x00401fe9
  40246c:	20400cf4 	.word	0x20400cf4
  402470:	00405448 	.word	0x00405448
  402474:	004027f9 	.word	0x004027f9
  402478:	004001c7 	.word	0x004001c7
  40247c:	00400345 	.word	0x00400345
  402480:	00400471 	.word	0x00400471
  402484:	004002b1 	.word	0x004002b1
  402488:	00401229 	.word	0x00401229
  40248c:	20400cf5 	.word	0x20400cf5
  402490:	004020ed 	.word	0x004020ed
  402494:	0040545c 	.word	0x0040545c

00402498 <__aeabi_uldivmod>:
  402498:	b953      	cbnz	r3, 4024b0 <__aeabi_uldivmod+0x18>
  40249a:	b94a      	cbnz	r2, 4024b0 <__aeabi_uldivmod+0x18>
  40249c:	2900      	cmp	r1, #0
  40249e:	bf08      	it	eq
  4024a0:	2800      	cmpeq	r0, #0
  4024a2:	bf1c      	itt	ne
  4024a4:	f04f 31ff 	movne.w	r1, #4294967295
  4024a8:	f04f 30ff 	movne.w	r0, #4294967295
  4024ac:	f000 b97a 	b.w	4027a4 <__aeabi_idiv0>
  4024b0:	f1ad 0c08 	sub.w	ip, sp, #8
  4024b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4024b8:	f000 f806 	bl	4024c8 <__udivmoddi4>
  4024bc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4024c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4024c4:	b004      	add	sp, #16
  4024c6:	4770      	bx	lr

004024c8 <__udivmoddi4>:
  4024c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024cc:	468c      	mov	ip, r1
  4024ce:	460d      	mov	r5, r1
  4024d0:	4604      	mov	r4, r0
  4024d2:	9e08      	ldr	r6, [sp, #32]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d151      	bne.n	40257c <__udivmoddi4+0xb4>
  4024d8:	428a      	cmp	r2, r1
  4024da:	4617      	mov	r7, r2
  4024dc:	d96d      	bls.n	4025ba <__udivmoddi4+0xf2>
  4024de:	fab2 fe82 	clz	lr, r2
  4024e2:	f1be 0f00 	cmp.w	lr, #0
  4024e6:	d00b      	beq.n	402500 <__udivmoddi4+0x38>
  4024e8:	f1ce 0c20 	rsb	ip, lr, #32
  4024ec:	fa01 f50e 	lsl.w	r5, r1, lr
  4024f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4024f4:	fa02 f70e 	lsl.w	r7, r2, lr
  4024f8:	ea4c 0c05 	orr.w	ip, ip, r5
  4024fc:	fa00 f40e 	lsl.w	r4, r0, lr
  402500:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402504:	0c25      	lsrs	r5, r4, #16
  402506:	fbbc f8fa 	udiv	r8, ip, sl
  40250a:	fa1f f987 	uxth.w	r9, r7
  40250e:	fb0a cc18 	mls	ip, sl, r8, ip
  402512:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402516:	fb08 f309 	mul.w	r3, r8, r9
  40251a:	42ab      	cmp	r3, r5
  40251c:	d90a      	bls.n	402534 <__udivmoddi4+0x6c>
  40251e:	19ed      	adds	r5, r5, r7
  402520:	f108 32ff 	add.w	r2, r8, #4294967295
  402524:	f080 8123 	bcs.w	40276e <__udivmoddi4+0x2a6>
  402528:	42ab      	cmp	r3, r5
  40252a:	f240 8120 	bls.w	40276e <__udivmoddi4+0x2a6>
  40252e:	f1a8 0802 	sub.w	r8, r8, #2
  402532:	443d      	add	r5, r7
  402534:	1aed      	subs	r5, r5, r3
  402536:	b2a4      	uxth	r4, r4
  402538:	fbb5 f0fa 	udiv	r0, r5, sl
  40253c:	fb0a 5510 	mls	r5, sl, r0, r5
  402540:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402544:	fb00 f909 	mul.w	r9, r0, r9
  402548:	45a1      	cmp	r9, r4
  40254a:	d909      	bls.n	402560 <__udivmoddi4+0x98>
  40254c:	19e4      	adds	r4, r4, r7
  40254e:	f100 33ff 	add.w	r3, r0, #4294967295
  402552:	f080 810a 	bcs.w	40276a <__udivmoddi4+0x2a2>
  402556:	45a1      	cmp	r9, r4
  402558:	f240 8107 	bls.w	40276a <__udivmoddi4+0x2a2>
  40255c:	3802      	subs	r0, #2
  40255e:	443c      	add	r4, r7
  402560:	eba4 0409 	sub.w	r4, r4, r9
  402564:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402568:	2100      	movs	r1, #0
  40256a:	2e00      	cmp	r6, #0
  40256c:	d061      	beq.n	402632 <__udivmoddi4+0x16a>
  40256e:	fa24 f40e 	lsr.w	r4, r4, lr
  402572:	2300      	movs	r3, #0
  402574:	6034      	str	r4, [r6, #0]
  402576:	6073      	str	r3, [r6, #4]
  402578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40257c:	428b      	cmp	r3, r1
  40257e:	d907      	bls.n	402590 <__udivmoddi4+0xc8>
  402580:	2e00      	cmp	r6, #0
  402582:	d054      	beq.n	40262e <__udivmoddi4+0x166>
  402584:	2100      	movs	r1, #0
  402586:	e886 0021 	stmia.w	r6, {r0, r5}
  40258a:	4608      	mov	r0, r1
  40258c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402590:	fab3 f183 	clz	r1, r3
  402594:	2900      	cmp	r1, #0
  402596:	f040 808e 	bne.w	4026b6 <__udivmoddi4+0x1ee>
  40259a:	42ab      	cmp	r3, r5
  40259c:	d302      	bcc.n	4025a4 <__udivmoddi4+0xdc>
  40259e:	4282      	cmp	r2, r0
  4025a0:	f200 80fa 	bhi.w	402798 <__udivmoddi4+0x2d0>
  4025a4:	1a84      	subs	r4, r0, r2
  4025a6:	eb65 0503 	sbc.w	r5, r5, r3
  4025aa:	2001      	movs	r0, #1
  4025ac:	46ac      	mov	ip, r5
  4025ae:	2e00      	cmp	r6, #0
  4025b0:	d03f      	beq.n	402632 <__udivmoddi4+0x16a>
  4025b2:	e886 1010 	stmia.w	r6, {r4, ip}
  4025b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ba:	b912      	cbnz	r2, 4025c2 <__udivmoddi4+0xfa>
  4025bc:	2701      	movs	r7, #1
  4025be:	fbb7 f7f2 	udiv	r7, r7, r2
  4025c2:	fab7 fe87 	clz	lr, r7
  4025c6:	f1be 0f00 	cmp.w	lr, #0
  4025ca:	d134      	bne.n	402636 <__udivmoddi4+0x16e>
  4025cc:	1beb      	subs	r3, r5, r7
  4025ce:	0c3a      	lsrs	r2, r7, #16
  4025d0:	fa1f fc87 	uxth.w	ip, r7
  4025d4:	2101      	movs	r1, #1
  4025d6:	fbb3 f8f2 	udiv	r8, r3, r2
  4025da:	0c25      	lsrs	r5, r4, #16
  4025dc:	fb02 3318 	mls	r3, r2, r8, r3
  4025e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4025e4:	fb0c f308 	mul.w	r3, ip, r8
  4025e8:	42ab      	cmp	r3, r5
  4025ea:	d907      	bls.n	4025fc <__udivmoddi4+0x134>
  4025ec:	19ed      	adds	r5, r5, r7
  4025ee:	f108 30ff 	add.w	r0, r8, #4294967295
  4025f2:	d202      	bcs.n	4025fa <__udivmoddi4+0x132>
  4025f4:	42ab      	cmp	r3, r5
  4025f6:	f200 80d1 	bhi.w	40279c <__udivmoddi4+0x2d4>
  4025fa:	4680      	mov	r8, r0
  4025fc:	1aed      	subs	r5, r5, r3
  4025fe:	b2a3      	uxth	r3, r4
  402600:	fbb5 f0f2 	udiv	r0, r5, r2
  402604:	fb02 5510 	mls	r5, r2, r0, r5
  402608:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40260c:	fb0c fc00 	mul.w	ip, ip, r0
  402610:	45a4      	cmp	ip, r4
  402612:	d907      	bls.n	402624 <__udivmoddi4+0x15c>
  402614:	19e4      	adds	r4, r4, r7
  402616:	f100 33ff 	add.w	r3, r0, #4294967295
  40261a:	d202      	bcs.n	402622 <__udivmoddi4+0x15a>
  40261c:	45a4      	cmp	ip, r4
  40261e:	f200 80b8 	bhi.w	402792 <__udivmoddi4+0x2ca>
  402622:	4618      	mov	r0, r3
  402624:	eba4 040c 	sub.w	r4, r4, ip
  402628:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40262c:	e79d      	b.n	40256a <__udivmoddi4+0xa2>
  40262e:	4631      	mov	r1, r6
  402630:	4630      	mov	r0, r6
  402632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402636:	f1ce 0420 	rsb	r4, lr, #32
  40263a:	fa05 f30e 	lsl.w	r3, r5, lr
  40263e:	fa07 f70e 	lsl.w	r7, r7, lr
  402642:	fa20 f804 	lsr.w	r8, r0, r4
  402646:	0c3a      	lsrs	r2, r7, #16
  402648:	fa25 f404 	lsr.w	r4, r5, r4
  40264c:	ea48 0803 	orr.w	r8, r8, r3
  402650:	fbb4 f1f2 	udiv	r1, r4, r2
  402654:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402658:	fb02 4411 	mls	r4, r2, r1, r4
  40265c:	fa1f fc87 	uxth.w	ip, r7
  402660:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402664:	fb01 f30c 	mul.w	r3, r1, ip
  402668:	42ab      	cmp	r3, r5
  40266a:	fa00 f40e 	lsl.w	r4, r0, lr
  40266e:	d909      	bls.n	402684 <__udivmoddi4+0x1bc>
  402670:	19ed      	adds	r5, r5, r7
  402672:	f101 30ff 	add.w	r0, r1, #4294967295
  402676:	f080 808a 	bcs.w	40278e <__udivmoddi4+0x2c6>
  40267a:	42ab      	cmp	r3, r5
  40267c:	f240 8087 	bls.w	40278e <__udivmoddi4+0x2c6>
  402680:	3902      	subs	r1, #2
  402682:	443d      	add	r5, r7
  402684:	1aeb      	subs	r3, r5, r3
  402686:	fa1f f588 	uxth.w	r5, r8
  40268a:	fbb3 f0f2 	udiv	r0, r3, r2
  40268e:	fb02 3310 	mls	r3, r2, r0, r3
  402692:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402696:	fb00 f30c 	mul.w	r3, r0, ip
  40269a:	42ab      	cmp	r3, r5
  40269c:	d907      	bls.n	4026ae <__udivmoddi4+0x1e6>
  40269e:	19ed      	adds	r5, r5, r7
  4026a0:	f100 38ff 	add.w	r8, r0, #4294967295
  4026a4:	d26f      	bcs.n	402786 <__udivmoddi4+0x2be>
  4026a6:	42ab      	cmp	r3, r5
  4026a8:	d96d      	bls.n	402786 <__udivmoddi4+0x2be>
  4026aa:	3802      	subs	r0, #2
  4026ac:	443d      	add	r5, r7
  4026ae:	1aeb      	subs	r3, r5, r3
  4026b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4026b4:	e78f      	b.n	4025d6 <__udivmoddi4+0x10e>
  4026b6:	f1c1 0720 	rsb	r7, r1, #32
  4026ba:	fa22 f807 	lsr.w	r8, r2, r7
  4026be:	408b      	lsls	r3, r1
  4026c0:	fa05 f401 	lsl.w	r4, r5, r1
  4026c4:	ea48 0303 	orr.w	r3, r8, r3
  4026c8:	fa20 fe07 	lsr.w	lr, r0, r7
  4026cc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4026d0:	40fd      	lsrs	r5, r7
  4026d2:	ea4e 0e04 	orr.w	lr, lr, r4
  4026d6:	fbb5 f9fc 	udiv	r9, r5, ip
  4026da:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4026de:	fb0c 5519 	mls	r5, ip, r9, r5
  4026e2:	fa1f f883 	uxth.w	r8, r3
  4026e6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4026ea:	fb09 f408 	mul.w	r4, r9, r8
  4026ee:	42ac      	cmp	r4, r5
  4026f0:	fa02 f201 	lsl.w	r2, r2, r1
  4026f4:	fa00 fa01 	lsl.w	sl, r0, r1
  4026f8:	d908      	bls.n	40270c <__udivmoddi4+0x244>
  4026fa:	18ed      	adds	r5, r5, r3
  4026fc:	f109 30ff 	add.w	r0, r9, #4294967295
  402700:	d243      	bcs.n	40278a <__udivmoddi4+0x2c2>
  402702:	42ac      	cmp	r4, r5
  402704:	d941      	bls.n	40278a <__udivmoddi4+0x2c2>
  402706:	f1a9 0902 	sub.w	r9, r9, #2
  40270a:	441d      	add	r5, r3
  40270c:	1b2d      	subs	r5, r5, r4
  40270e:	fa1f fe8e 	uxth.w	lr, lr
  402712:	fbb5 f0fc 	udiv	r0, r5, ip
  402716:	fb0c 5510 	mls	r5, ip, r0, r5
  40271a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40271e:	fb00 f808 	mul.w	r8, r0, r8
  402722:	45a0      	cmp	r8, r4
  402724:	d907      	bls.n	402736 <__udivmoddi4+0x26e>
  402726:	18e4      	adds	r4, r4, r3
  402728:	f100 35ff 	add.w	r5, r0, #4294967295
  40272c:	d229      	bcs.n	402782 <__udivmoddi4+0x2ba>
  40272e:	45a0      	cmp	r8, r4
  402730:	d927      	bls.n	402782 <__udivmoddi4+0x2ba>
  402732:	3802      	subs	r0, #2
  402734:	441c      	add	r4, r3
  402736:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40273a:	eba4 0408 	sub.w	r4, r4, r8
  40273e:	fba0 8902 	umull	r8, r9, r0, r2
  402742:	454c      	cmp	r4, r9
  402744:	46c6      	mov	lr, r8
  402746:	464d      	mov	r5, r9
  402748:	d315      	bcc.n	402776 <__udivmoddi4+0x2ae>
  40274a:	d012      	beq.n	402772 <__udivmoddi4+0x2aa>
  40274c:	b156      	cbz	r6, 402764 <__udivmoddi4+0x29c>
  40274e:	ebba 030e 	subs.w	r3, sl, lr
  402752:	eb64 0405 	sbc.w	r4, r4, r5
  402756:	fa04 f707 	lsl.w	r7, r4, r7
  40275a:	40cb      	lsrs	r3, r1
  40275c:	431f      	orrs	r7, r3
  40275e:	40cc      	lsrs	r4, r1
  402760:	6037      	str	r7, [r6, #0]
  402762:	6074      	str	r4, [r6, #4]
  402764:	2100      	movs	r1, #0
  402766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40276a:	4618      	mov	r0, r3
  40276c:	e6f8      	b.n	402560 <__udivmoddi4+0x98>
  40276e:	4690      	mov	r8, r2
  402770:	e6e0      	b.n	402534 <__udivmoddi4+0x6c>
  402772:	45c2      	cmp	sl, r8
  402774:	d2ea      	bcs.n	40274c <__udivmoddi4+0x284>
  402776:	ebb8 0e02 	subs.w	lr, r8, r2
  40277a:	eb69 0503 	sbc.w	r5, r9, r3
  40277e:	3801      	subs	r0, #1
  402780:	e7e4      	b.n	40274c <__udivmoddi4+0x284>
  402782:	4628      	mov	r0, r5
  402784:	e7d7      	b.n	402736 <__udivmoddi4+0x26e>
  402786:	4640      	mov	r0, r8
  402788:	e791      	b.n	4026ae <__udivmoddi4+0x1e6>
  40278a:	4681      	mov	r9, r0
  40278c:	e7be      	b.n	40270c <__udivmoddi4+0x244>
  40278e:	4601      	mov	r1, r0
  402790:	e778      	b.n	402684 <__udivmoddi4+0x1bc>
  402792:	3802      	subs	r0, #2
  402794:	443c      	add	r4, r7
  402796:	e745      	b.n	402624 <__udivmoddi4+0x15c>
  402798:	4608      	mov	r0, r1
  40279a:	e708      	b.n	4025ae <__udivmoddi4+0xe6>
  40279c:	f1a8 0802 	sub.w	r8, r8, #2
  4027a0:	443d      	add	r5, r7
  4027a2:	e72b      	b.n	4025fc <__udivmoddi4+0x134>

004027a4 <__aeabi_idiv0>:
  4027a4:	4770      	bx	lr
  4027a6:	bf00      	nop

004027a8 <__libc_init_array>:
  4027a8:	b570      	push	{r4, r5, r6, lr}
  4027aa:	4e0f      	ldr	r6, [pc, #60]	; (4027e8 <__libc_init_array+0x40>)
  4027ac:	4d0f      	ldr	r5, [pc, #60]	; (4027ec <__libc_init_array+0x44>)
  4027ae:	1b76      	subs	r6, r6, r5
  4027b0:	10b6      	asrs	r6, r6, #2
  4027b2:	bf18      	it	ne
  4027b4:	2400      	movne	r4, #0
  4027b6:	d005      	beq.n	4027c4 <__libc_init_array+0x1c>
  4027b8:	3401      	adds	r4, #1
  4027ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4027be:	4798      	blx	r3
  4027c0:	42a6      	cmp	r6, r4
  4027c2:	d1f9      	bne.n	4027b8 <__libc_init_array+0x10>
  4027c4:	4e0a      	ldr	r6, [pc, #40]	; (4027f0 <__libc_init_array+0x48>)
  4027c6:	4d0b      	ldr	r5, [pc, #44]	; (4027f4 <__libc_init_array+0x4c>)
  4027c8:	1b76      	subs	r6, r6, r5
  4027ca:	f002 ff0d 	bl	4055e8 <_init>
  4027ce:	10b6      	asrs	r6, r6, #2
  4027d0:	bf18      	it	ne
  4027d2:	2400      	movne	r4, #0
  4027d4:	d006      	beq.n	4027e4 <__libc_init_array+0x3c>
  4027d6:	3401      	adds	r4, #1
  4027d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4027dc:	4798      	blx	r3
  4027de:	42a6      	cmp	r6, r4
  4027e0:	d1f9      	bne.n	4027d6 <__libc_init_array+0x2e>
  4027e2:	bd70      	pop	{r4, r5, r6, pc}
  4027e4:	bd70      	pop	{r4, r5, r6, pc}
  4027e6:	bf00      	nop
  4027e8:	004055f4 	.word	0x004055f4
  4027ec:	004055f4 	.word	0x004055f4
  4027f0:	004055fc 	.word	0x004055fc
  4027f4:	004055f4 	.word	0x004055f4

004027f8 <iprintf>:
  4027f8:	b40f      	push	{r0, r1, r2, r3}
  4027fa:	b500      	push	{lr}
  4027fc:	4907      	ldr	r1, [pc, #28]	; (40281c <iprintf+0x24>)
  4027fe:	b083      	sub	sp, #12
  402800:	ab04      	add	r3, sp, #16
  402802:	6808      	ldr	r0, [r1, #0]
  402804:	f853 2b04 	ldr.w	r2, [r3], #4
  402808:	6881      	ldr	r1, [r0, #8]
  40280a:	9301      	str	r3, [sp, #4]
  40280c:	f000 fd46 	bl	40329c <_vfiprintf_r>
  402810:	b003      	add	sp, #12
  402812:	f85d eb04 	ldr.w	lr, [sp], #4
  402816:	b004      	add	sp, #16
  402818:	4770      	bx	lr
  40281a:	bf00      	nop
  40281c:	20400010 	.word	0x20400010

00402820 <malloc>:
  402820:	4b02      	ldr	r3, [pc, #8]	; (40282c <malloc+0xc>)
  402822:	4601      	mov	r1, r0
  402824:	6818      	ldr	r0, [r3, #0]
  402826:	f000 b803 	b.w	402830 <_malloc_r>
  40282a:	bf00      	nop
  40282c:	20400010 	.word	0x20400010

00402830 <_malloc_r>:
  402830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402834:	f101 060b 	add.w	r6, r1, #11
  402838:	2e16      	cmp	r6, #22
  40283a:	b083      	sub	sp, #12
  40283c:	4605      	mov	r5, r0
  40283e:	f240 809e 	bls.w	40297e <_malloc_r+0x14e>
  402842:	f036 0607 	bics.w	r6, r6, #7
  402846:	f100 80bd 	bmi.w	4029c4 <_malloc_r+0x194>
  40284a:	42b1      	cmp	r1, r6
  40284c:	f200 80ba 	bhi.w	4029c4 <_malloc_r+0x194>
  402850:	f000 fb86 	bl	402f60 <__malloc_lock>
  402854:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402858:	f0c0 8293 	bcc.w	402d82 <_malloc_r+0x552>
  40285c:	0a73      	lsrs	r3, r6, #9
  40285e:	f000 80b8 	beq.w	4029d2 <_malloc_r+0x1a2>
  402862:	2b04      	cmp	r3, #4
  402864:	f200 8179 	bhi.w	402b5a <_malloc_r+0x32a>
  402868:	09b3      	lsrs	r3, r6, #6
  40286a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40286e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402872:	00c3      	lsls	r3, r0, #3
  402874:	4fbf      	ldr	r7, [pc, #764]	; (402b74 <_malloc_r+0x344>)
  402876:	443b      	add	r3, r7
  402878:	f1a3 0108 	sub.w	r1, r3, #8
  40287c:	685c      	ldr	r4, [r3, #4]
  40287e:	42a1      	cmp	r1, r4
  402880:	d106      	bne.n	402890 <_malloc_r+0x60>
  402882:	e00c      	b.n	40289e <_malloc_r+0x6e>
  402884:	2a00      	cmp	r2, #0
  402886:	f280 80aa 	bge.w	4029de <_malloc_r+0x1ae>
  40288a:	68e4      	ldr	r4, [r4, #12]
  40288c:	42a1      	cmp	r1, r4
  40288e:	d006      	beq.n	40289e <_malloc_r+0x6e>
  402890:	6863      	ldr	r3, [r4, #4]
  402892:	f023 0303 	bic.w	r3, r3, #3
  402896:	1b9a      	subs	r2, r3, r6
  402898:	2a0f      	cmp	r2, #15
  40289a:	ddf3      	ble.n	402884 <_malloc_r+0x54>
  40289c:	4670      	mov	r0, lr
  40289e:	693c      	ldr	r4, [r7, #16]
  4028a0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402b88 <_malloc_r+0x358>
  4028a4:	4574      	cmp	r4, lr
  4028a6:	f000 81ab 	beq.w	402c00 <_malloc_r+0x3d0>
  4028aa:	6863      	ldr	r3, [r4, #4]
  4028ac:	f023 0303 	bic.w	r3, r3, #3
  4028b0:	1b9a      	subs	r2, r3, r6
  4028b2:	2a0f      	cmp	r2, #15
  4028b4:	f300 8190 	bgt.w	402bd8 <_malloc_r+0x3a8>
  4028b8:	2a00      	cmp	r2, #0
  4028ba:	f8c7 e014 	str.w	lr, [r7, #20]
  4028be:	f8c7 e010 	str.w	lr, [r7, #16]
  4028c2:	f280 809d 	bge.w	402a00 <_malloc_r+0x1d0>
  4028c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028ca:	f080 8161 	bcs.w	402b90 <_malloc_r+0x360>
  4028ce:	08db      	lsrs	r3, r3, #3
  4028d0:	f103 0c01 	add.w	ip, r3, #1
  4028d4:	1099      	asrs	r1, r3, #2
  4028d6:	687a      	ldr	r2, [r7, #4]
  4028d8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4028dc:	f8c4 8008 	str.w	r8, [r4, #8]
  4028e0:	2301      	movs	r3, #1
  4028e2:	408b      	lsls	r3, r1
  4028e4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4028e8:	4313      	orrs	r3, r2
  4028ea:	3908      	subs	r1, #8
  4028ec:	60e1      	str	r1, [r4, #12]
  4028ee:	607b      	str	r3, [r7, #4]
  4028f0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4028f4:	f8c8 400c 	str.w	r4, [r8, #12]
  4028f8:	1082      	asrs	r2, r0, #2
  4028fa:	2401      	movs	r4, #1
  4028fc:	4094      	lsls	r4, r2
  4028fe:	429c      	cmp	r4, r3
  402900:	f200 808b 	bhi.w	402a1a <_malloc_r+0x1ea>
  402904:	421c      	tst	r4, r3
  402906:	d106      	bne.n	402916 <_malloc_r+0xe6>
  402908:	f020 0003 	bic.w	r0, r0, #3
  40290c:	0064      	lsls	r4, r4, #1
  40290e:	421c      	tst	r4, r3
  402910:	f100 0004 	add.w	r0, r0, #4
  402914:	d0fa      	beq.n	40290c <_malloc_r+0xdc>
  402916:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40291a:	46cc      	mov	ip, r9
  40291c:	4680      	mov	r8, r0
  40291e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402922:	459c      	cmp	ip, r3
  402924:	d107      	bne.n	402936 <_malloc_r+0x106>
  402926:	e16d      	b.n	402c04 <_malloc_r+0x3d4>
  402928:	2a00      	cmp	r2, #0
  40292a:	f280 817b 	bge.w	402c24 <_malloc_r+0x3f4>
  40292e:	68db      	ldr	r3, [r3, #12]
  402930:	459c      	cmp	ip, r3
  402932:	f000 8167 	beq.w	402c04 <_malloc_r+0x3d4>
  402936:	6859      	ldr	r1, [r3, #4]
  402938:	f021 0103 	bic.w	r1, r1, #3
  40293c:	1b8a      	subs	r2, r1, r6
  40293e:	2a0f      	cmp	r2, #15
  402940:	ddf2      	ble.n	402928 <_malloc_r+0xf8>
  402942:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402946:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40294a:	9300      	str	r3, [sp, #0]
  40294c:	199c      	adds	r4, r3, r6
  40294e:	4628      	mov	r0, r5
  402950:	f046 0601 	orr.w	r6, r6, #1
  402954:	f042 0501 	orr.w	r5, r2, #1
  402958:	605e      	str	r6, [r3, #4]
  40295a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40295e:	f8cc 8008 	str.w	r8, [ip, #8]
  402962:	617c      	str	r4, [r7, #20]
  402964:	613c      	str	r4, [r7, #16]
  402966:	f8c4 e00c 	str.w	lr, [r4, #12]
  40296a:	f8c4 e008 	str.w	lr, [r4, #8]
  40296e:	6065      	str	r5, [r4, #4]
  402970:	505a      	str	r2, [r3, r1]
  402972:	f000 fafb 	bl	402f6c <__malloc_unlock>
  402976:	9b00      	ldr	r3, [sp, #0]
  402978:	f103 0408 	add.w	r4, r3, #8
  40297c:	e01e      	b.n	4029bc <_malloc_r+0x18c>
  40297e:	2910      	cmp	r1, #16
  402980:	d820      	bhi.n	4029c4 <_malloc_r+0x194>
  402982:	f000 faed 	bl	402f60 <__malloc_lock>
  402986:	2610      	movs	r6, #16
  402988:	2318      	movs	r3, #24
  40298a:	2002      	movs	r0, #2
  40298c:	4f79      	ldr	r7, [pc, #484]	; (402b74 <_malloc_r+0x344>)
  40298e:	443b      	add	r3, r7
  402990:	f1a3 0208 	sub.w	r2, r3, #8
  402994:	685c      	ldr	r4, [r3, #4]
  402996:	4294      	cmp	r4, r2
  402998:	f000 813d 	beq.w	402c16 <_malloc_r+0x3e6>
  40299c:	6863      	ldr	r3, [r4, #4]
  40299e:	68e1      	ldr	r1, [r4, #12]
  4029a0:	68a6      	ldr	r6, [r4, #8]
  4029a2:	f023 0303 	bic.w	r3, r3, #3
  4029a6:	4423      	add	r3, r4
  4029a8:	4628      	mov	r0, r5
  4029aa:	685a      	ldr	r2, [r3, #4]
  4029ac:	60f1      	str	r1, [r6, #12]
  4029ae:	f042 0201 	orr.w	r2, r2, #1
  4029b2:	608e      	str	r6, [r1, #8]
  4029b4:	605a      	str	r2, [r3, #4]
  4029b6:	f000 fad9 	bl	402f6c <__malloc_unlock>
  4029ba:	3408      	adds	r4, #8
  4029bc:	4620      	mov	r0, r4
  4029be:	b003      	add	sp, #12
  4029c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029c4:	2400      	movs	r4, #0
  4029c6:	230c      	movs	r3, #12
  4029c8:	4620      	mov	r0, r4
  4029ca:	602b      	str	r3, [r5, #0]
  4029cc:	b003      	add	sp, #12
  4029ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029d2:	2040      	movs	r0, #64	; 0x40
  4029d4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4029d8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4029dc:	e74a      	b.n	402874 <_malloc_r+0x44>
  4029de:	4423      	add	r3, r4
  4029e0:	68e1      	ldr	r1, [r4, #12]
  4029e2:	685a      	ldr	r2, [r3, #4]
  4029e4:	68a6      	ldr	r6, [r4, #8]
  4029e6:	f042 0201 	orr.w	r2, r2, #1
  4029ea:	60f1      	str	r1, [r6, #12]
  4029ec:	4628      	mov	r0, r5
  4029ee:	608e      	str	r6, [r1, #8]
  4029f0:	605a      	str	r2, [r3, #4]
  4029f2:	f000 fabb 	bl	402f6c <__malloc_unlock>
  4029f6:	3408      	adds	r4, #8
  4029f8:	4620      	mov	r0, r4
  4029fa:	b003      	add	sp, #12
  4029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a00:	4423      	add	r3, r4
  402a02:	4628      	mov	r0, r5
  402a04:	685a      	ldr	r2, [r3, #4]
  402a06:	f042 0201 	orr.w	r2, r2, #1
  402a0a:	605a      	str	r2, [r3, #4]
  402a0c:	f000 faae 	bl	402f6c <__malloc_unlock>
  402a10:	3408      	adds	r4, #8
  402a12:	4620      	mov	r0, r4
  402a14:	b003      	add	sp, #12
  402a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a1a:	68bc      	ldr	r4, [r7, #8]
  402a1c:	6863      	ldr	r3, [r4, #4]
  402a1e:	f023 0803 	bic.w	r8, r3, #3
  402a22:	45b0      	cmp	r8, r6
  402a24:	d304      	bcc.n	402a30 <_malloc_r+0x200>
  402a26:	eba8 0306 	sub.w	r3, r8, r6
  402a2a:	2b0f      	cmp	r3, #15
  402a2c:	f300 8085 	bgt.w	402b3a <_malloc_r+0x30a>
  402a30:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402b8c <_malloc_r+0x35c>
  402a34:	4b50      	ldr	r3, [pc, #320]	; (402b78 <_malloc_r+0x348>)
  402a36:	f8d9 2000 	ldr.w	r2, [r9]
  402a3a:	681b      	ldr	r3, [r3, #0]
  402a3c:	3201      	adds	r2, #1
  402a3e:	4433      	add	r3, r6
  402a40:	eb04 0a08 	add.w	sl, r4, r8
  402a44:	f000 8155 	beq.w	402cf2 <_malloc_r+0x4c2>
  402a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402a4c:	330f      	adds	r3, #15
  402a4e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402a52:	f02b 0b0f 	bic.w	fp, fp, #15
  402a56:	4659      	mov	r1, fp
  402a58:	4628      	mov	r0, r5
  402a5a:	f000 fa8d 	bl	402f78 <_sbrk_r>
  402a5e:	1c41      	adds	r1, r0, #1
  402a60:	4602      	mov	r2, r0
  402a62:	f000 80fc 	beq.w	402c5e <_malloc_r+0x42e>
  402a66:	4582      	cmp	sl, r0
  402a68:	f200 80f7 	bhi.w	402c5a <_malloc_r+0x42a>
  402a6c:	4b43      	ldr	r3, [pc, #268]	; (402b7c <_malloc_r+0x34c>)
  402a6e:	6819      	ldr	r1, [r3, #0]
  402a70:	4459      	add	r1, fp
  402a72:	6019      	str	r1, [r3, #0]
  402a74:	f000 814d 	beq.w	402d12 <_malloc_r+0x4e2>
  402a78:	f8d9 0000 	ldr.w	r0, [r9]
  402a7c:	3001      	adds	r0, #1
  402a7e:	bf1b      	ittet	ne
  402a80:	eba2 0a0a 	subne.w	sl, r2, sl
  402a84:	4451      	addne	r1, sl
  402a86:	f8c9 2000 	streq.w	r2, [r9]
  402a8a:	6019      	strne	r1, [r3, #0]
  402a8c:	f012 0107 	ands.w	r1, r2, #7
  402a90:	f000 8115 	beq.w	402cbe <_malloc_r+0x48e>
  402a94:	f1c1 0008 	rsb	r0, r1, #8
  402a98:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402a9c:	4402      	add	r2, r0
  402a9e:	3108      	adds	r1, #8
  402aa0:	eb02 090b 	add.w	r9, r2, fp
  402aa4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402aa8:	eba1 0909 	sub.w	r9, r1, r9
  402aac:	4649      	mov	r1, r9
  402aae:	4628      	mov	r0, r5
  402ab0:	9301      	str	r3, [sp, #4]
  402ab2:	9200      	str	r2, [sp, #0]
  402ab4:	f000 fa60 	bl	402f78 <_sbrk_r>
  402ab8:	1c43      	adds	r3, r0, #1
  402aba:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402abe:	f000 8143 	beq.w	402d48 <_malloc_r+0x518>
  402ac2:	1a80      	subs	r0, r0, r2
  402ac4:	4448      	add	r0, r9
  402ac6:	f040 0001 	orr.w	r0, r0, #1
  402aca:	6819      	ldr	r1, [r3, #0]
  402acc:	60ba      	str	r2, [r7, #8]
  402ace:	4449      	add	r1, r9
  402ad0:	42bc      	cmp	r4, r7
  402ad2:	6050      	str	r0, [r2, #4]
  402ad4:	6019      	str	r1, [r3, #0]
  402ad6:	d017      	beq.n	402b08 <_malloc_r+0x2d8>
  402ad8:	f1b8 0f0f 	cmp.w	r8, #15
  402adc:	f240 80fb 	bls.w	402cd6 <_malloc_r+0x4a6>
  402ae0:	6860      	ldr	r0, [r4, #4]
  402ae2:	f1a8 020c 	sub.w	r2, r8, #12
  402ae6:	f022 0207 	bic.w	r2, r2, #7
  402aea:	eb04 0e02 	add.w	lr, r4, r2
  402aee:	f000 0001 	and.w	r0, r0, #1
  402af2:	f04f 0c05 	mov.w	ip, #5
  402af6:	4310      	orrs	r0, r2
  402af8:	2a0f      	cmp	r2, #15
  402afa:	6060      	str	r0, [r4, #4]
  402afc:	f8ce c004 	str.w	ip, [lr, #4]
  402b00:	f8ce c008 	str.w	ip, [lr, #8]
  402b04:	f200 8117 	bhi.w	402d36 <_malloc_r+0x506>
  402b08:	4b1d      	ldr	r3, [pc, #116]	; (402b80 <_malloc_r+0x350>)
  402b0a:	68bc      	ldr	r4, [r7, #8]
  402b0c:	681a      	ldr	r2, [r3, #0]
  402b0e:	4291      	cmp	r1, r2
  402b10:	bf88      	it	hi
  402b12:	6019      	strhi	r1, [r3, #0]
  402b14:	4b1b      	ldr	r3, [pc, #108]	; (402b84 <_malloc_r+0x354>)
  402b16:	681a      	ldr	r2, [r3, #0]
  402b18:	4291      	cmp	r1, r2
  402b1a:	6862      	ldr	r2, [r4, #4]
  402b1c:	bf88      	it	hi
  402b1e:	6019      	strhi	r1, [r3, #0]
  402b20:	f022 0203 	bic.w	r2, r2, #3
  402b24:	4296      	cmp	r6, r2
  402b26:	eba2 0306 	sub.w	r3, r2, r6
  402b2a:	d801      	bhi.n	402b30 <_malloc_r+0x300>
  402b2c:	2b0f      	cmp	r3, #15
  402b2e:	dc04      	bgt.n	402b3a <_malloc_r+0x30a>
  402b30:	4628      	mov	r0, r5
  402b32:	f000 fa1b 	bl	402f6c <__malloc_unlock>
  402b36:	2400      	movs	r4, #0
  402b38:	e740      	b.n	4029bc <_malloc_r+0x18c>
  402b3a:	19a2      	adds	r2, r4, r6
  402b3c:	f043 0301 	orr.w	r3, r3, #1
  402b40:	f046 0601 	orr.w	r6, r6, #1
  402b44:	6066      	str	r6, [r4, #4]
  402b46:	4628      	mov	r0, r5
  402b48:	60ba      	str	r2, [r7, #8]
  402b4a:	6053      	str	r3, [r2, #4]
  402b4c:	f000 fa0e 	bl	402f6c <__malloc_unlock>
  402b50:	3408      	adds	r4, #8
  402b52:	4620      	mov	r0, r4
  402b54:	b003      	add	sp, #12
  402b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b5a:	2b14      	cmp	r3, #20
  402b5c:	d971      	bls.n	402c42 <_malloc_r+0x412>
  402b5e:	2b54      	cmp	r3, #84	; 0x54
  402b60:	f200 80a3 	bhi.w	402caa <_malloc_r+0x47a>
  402b64:	0b33      	lsrs	r3, r6, #12
  402b66:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402b6a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402b6e:	00c3      	lsls	r3, r0, #3
  402b70:	e680      	b.n	402874 <_malloc_r+0x44>
  402b72:	bf00      	nop
  402b74:	20400440 	.word	0x20400440
  402b78:	20400d28 	.word	0x20400d28
  402b7c:	20400cf8 	.word	0x20400cf8
  402b80:	20400d20 	.word	0x20400d20
  402b84:	20400d24 	.word	0x20400d24
  402b88:	20400448 	.word	0x20400448
  402b8c:	20400848 	.word	0x20400848
  402b90:	0a5a      	lsrs	r2, r3, #9
  402b92:	2a04      	cmp	r2, #4
  402b94:	d95b      	bls.n	402c4e <_malloc_r+0x41e>
  402b96:	2a14      	cmp	r2, #20
  402b98:	f200 80ae 	bhi.w	402cf8 <_malloc_r+0x4c8>
  402b9c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402ba0:	00c9      	lsls	r1, r1, #3
  402ba2:	325b      	adds	r2, #91	; 0x5b
  402ba4:	eb07 0c01 	add.w	ip, r7, r1
  402ba8:	5879      	ldr	r1, [r7, r1]
  402baa:	f1ac 0c08 	sub.w	ip, ip, #8
  402bae:	458c      	cmp	ip, r1
  402bb0:	f000 8088 	beq.w	402cc4 <_malloc_r+0x494>
  402bb4:	684a      	ldr	r2, [r1, #4]
  402bb6:	f022 0203 	bic.w	r2, r2, #3
  402bba:	4293      	cmp	r3, r2
  402bbc:	d273      	bcs.n	402ca6 <_malloc_r+0x476>
  402bbe:	6889      	ldr	r1, [r1, #8]
  402bc0:	458c      	cmp	ip, r1
  402bc2:	d1f7      	bne.n	402bb4 <_malloc_r+0x384>
  402bc4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402bc8:	687b      	ldr	r3, [r7, #4]
  402bca:	60e2      	str	r2, [r4, #12]
  402bcc:	f8c4 c008 	str.w	ip, [r4, #8]
  402bd0:	6094      	str	r4, [r2, #8]
  402bd2:	f8cc 400c 	str.w	r4, [ip, #12]
  402bd6:	e68f      	b.n	4028f8 <_malloc_r+0xc8>
  402bd8:	19a1      	adds	r1, r4, r6
  402bda:	f046 0c01 	orr.w	ip, r6, #1
  402bde:	f042 0601 	orr.w	r6, r2, #1
  402be2:	f8c4 c004 	str.w	ip, [r4, #4]
  402be6:	4628      	mov	r0, r5
  402be8:	6179      	str	r1, [r7, #20]
  402bea:	6139      	str	r1, [r7, #16]
  402bec:	f8c1 e00c 	str.w	lr, [r1, #12]
  402bf0:	f8c1 e008 	str.w	lr, [r1, #8]
  402bf4:	604e      	str	r6, [r1, #4]
  402bf6:	50e2      	str	r2, [r4, r3]
  402bf8:	f000 f9b8 	bl	402f6c <__malloc_unlock>
  402bfc:	3408      	adds	r4, #8
  402bfe:	e6dd      	b.n	4029bc <_malloc_r+0x18c>
  402c00:	687b      	ldr	r3, [r7, #4]
  402c02:	e679      	b.n	4028f8 <_malloc_r+0xc8>
  402c04:	f108 0801 	add.w	r8, r8, #1
  402c08:	f018 0f03 	tst.w	r8, #3
  402c0c:	f10c 0c08 	add.w	ip, ip, #8
  402c10:	f47f ae85 	bne.w	40291e <_malloc_r+0xee>
  402c14:	e02d      	b.n	402c72 <_malloc_r+0x442>
  402c16:	68dc      	ldr	r4, [r3, #12]
  402c18:	42a3      	cmp	r3, r4
  402c1a:	bf08      	it	eq
  402c1c:	3002      	addeq	r0, #2
  402c1e:	f43f ae3e 	beq.w	40289e <_malloc_r+0x6e>
  402c22:	e6bb      	b.n	40299c <_malloc_r+0x16c>
  402c24:	4419      	add	r1, r3
  402c26:	461c      	mov	r4, r3
  402c28:	684a      	ldr	r2, [r1, #4]
  402c2a:	68db      	ldr	r3, [r3, #12]
  402c2c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402c30:	f042 0201 	orr.w	r2, r2, #1
  402c34:	604a      	str	r2, [r1, #4]
  402c36:	4628      	mov	r0, r5
  402c38:	60f3      	str	r3, [r6, #12]
  402c3a:	609e      	str	r6, [r3, #8]
  402c3c:	f000 f996 	bl	402f6c <__malloc_unlock>
  402c40:	e6bc      	b.n	4029bc <_malloc_r+0x18c>
  402c42:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402c46:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402c4a:	00c3      	lsls	r3, r0, #3
  402c4c:	e612      	b.n	402874 <_malloc_r+0x44>
  402c4e:	099a      	lsrs	r2, r3, #6
  402c50:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402c54:	00c9      	lsls	r1, r1, #3
  402c56:	3238      	adds	r2, #56	; 0x38
  402c58:	e7a4      	b.n	402ba4 <_malloc_r+0x374>
  402c5a:	42bc      	cmp	r4, r7
  402c5c:	d054      	beq.n	402d08 <_malloc_r+0x4d8>
  402c5e:	68bc      	ldr	r4, [r7, #8]
  402c60:	6862      	ldr	r2, [r4, #4]
  402c62:	f022 0203 	bic.w	r2, r2, #3
  402c66:	e75d      	b.n	402b24 <_malloc_r+0x2f4>
  402c68:	f859 3908 	ldr.w	r3, [r9], #-8
  402c6c:	4599      	cmp	r9, r3
  402c6e:	f040 8086 	bne.w	402d7e <_malloc_r+0x54e>
  402c72:	f010 0f03 	tst.w	r0, #3
  402c76:	f100 30ff 	add.w	r0, r0, #4294967295
  402c7a:	d1f5      	bne.n	402c68 <_malloc_r+0x438>
  402c7c:	687b      	ldr	r3, [r7, #4]
  402c7e:	ea23 0304 	bic.w	r3, r3, r4
  402c82:	607b      	str	r3, [r7, #4]
  402c84:	0064      	lsls	r4, r4, #1
  402c86:	429c      	cmp	r4, r3
  402c88:	f63f aec7 	bhi.w	402a1a <_malloc_r+0x1ea>
  402c8c:	2c00      	cmp	r4, #0
  402c8e:	f43f aec4 	beq.w	402a1a <_malloc_r+0x1ea>
  402c92:	421c      	tst	r4, r3
  402c94:	4640      	mov	r0, r8
  402c96:	f47f ae3e 	bne.w	402916 <_malloc_r+0xe6>
  402c9a:	0064      	lsls	r4, r4, #1
  402c9c:	421c      	tst	r4, r3
  402c9e:	f100 0004 	add.w	r0, r0, #4
  402ca2:	d0fa      	beq.n	402c9a <_malloc_r+0x46a>
  402ca4:	e637      	b.n	402916 <_malloc_r+0xe6>
  402ca6:	468c      	mov	ip, r1
  402ca8:	e78c      	b.n	402bc4 <_malloc_r+0x394>
  402caa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402cae:	d815      	bhi.n	402cdc <_malloc_r+0x4ac>
  402cb0:	0bf3      	lsrs	r3, r6, #15
  402cb2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402cb6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402cba:	00c3      	lsls	r3, r0, #3
  402cbc:	e5da      	b.n	402874 <_malloc_r+0x44>
  402cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402cc2:	e6ed      	b.n	402aa0 <_malloc_r+0x270>
  402cc4:	687b      	ldr	r3, [r7, #4]
  402cc6:	1092      	asrs	r2, r2, #2
  402cc8:	2101      	movs	r1, #1
  402cca:	fa01 f202 	lsl.w	r2, r1, r2
  402cce:	4313      	orrs	r3, r2
  402cd0:	607b      	str	r3, [r7, #4]
  402cd2:	4662      	mov	r2, ip
  402cd4:	e779      	b.n	402bca <_malloc_r+0x39a>
  402cd6:	2301      	movs	r3, #1
  402cd8:	6053      	str	r3, [r2, #4]
  402cda:	e729      	b.n	402b30 <_malloc_r+0x300>
  402cdc:	f240 5254 	movw	r2, #1364	; 0x554
  402ce0:	4293      	cmp	r3, r2
  402ce2:	d822      	bhi.n	402d2a <_malloc_r+0x4fa>
  402ce4:	0cb3      	lsrs	r3, r6, #18
  402ce6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402cea:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402cee:	00c3      	lsls	r3, r0, #3
  402cf0:	e5c0      	b.n	402874 <_malloc_r+0x44>
  402cf2:	f103 0b10 	add.w	fp, r3, #16
  402cf6:	e6ae      	b.n	402a56 <_malloc_r+0x226>
  402cf8:	2a54      	cmp	r2, #84	; 0x54
  402cfa:	d829      	bhi.n	402d50 <_malloc_r+0x520>
  402cfc:	0b1a      	lsrs	r2, r3, #12
  402cfe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402d02:	00c9      	lsls	r1, r1, #3
  402d04:	326e      	adds	r2, #110	; 0x6e
  402d06:	e74d      	b.n	402ba4 <_malloc_r+0x374>
  402d08:	4b20      	ldr	r3, [pc, #128]	; (402d8c <_malloc_r+0x55c>)
  402d0a:	6819      	ldr	r1, [r3, #0]
  402d0c:	4459      	add	r1, fp
  402d0e:	6019      	str	r1, [r3, #0]
  402d10:	e6b2      	b.n	402a78 <_malloc_r+0x248>
  402d12:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402d16:	2800      	cmp	r0, #0
  402d18:	f47f aeae 	bne.w	402a78 <_malloc_r+0x248>
  402d1c:	eb08 030b 	add.w	r3, r8, fp
  402d20:	68ba      	ldr	r2, [r7, #8]
  402d22:	f043 0301 	orr.w	r3, r3, #1
  402d26:	6053      	str	r3, [r2, #4]
  402d28:	e6ee      	b.n	402b08 <_malloc_r+0x2d8>
  402d2a:	207f      	movs	r0, #127	; 0x7f
  402d2c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402d30:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402d34:	e59e      	b.n	402874 <_malloc_r+0x44>
  402d36:	f104 0108 	add.w	r1, r4, #8
  402d3a:	4628      	mov	r0, r5
  402d3c:	9300      	str	r3, [sp, #0]
  402d3e:	f001 fbc9 	bl	4044d4 <_free_r>
  402d42:	9b00      	ldr	r3, [sp, #0]
  402d44:	6819      	ldr	r1, [r3, #0]
  402d46:	e6df      	b.n	402b08 <_malloc_r+0x2d8>
  402d48:	2001      	movs	r0, #1
  402d4a:	f04f 0900 	mov.w	r9, #0
  402d4e:	e6bc      	b.n	402aca <_malloc_r+0x29a>
  402d50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402d54:	d805      	bhi.n	402d62 <_malloc_r+0x532>
  402d56:	0bda      	lsrs	r2, r3, #15
  402d58:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402d5c:	00c9      	lsls	r1, r1, #3
  402d5e:	3277      	adds	r2, #119	; 0x77
  402d60:	e720      	b.n	402ba4 <_malloc_r+0x374>
  402d62:	f240 5154 	movw	r1, #1364	; 0x554
  402d66:	428a      	cmp	r2, r1
  402d68:	d805      	bhi.n	402d76 <_malloc_r+0x546>
  402d6a:	0c9a      	lsrs	r2, r3, #18
  402d6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402d70:	00c9      	lsls	r1, r1, #3
  402d72:	327c      	adds	r2, #124	; 0x7c
  402d74:	e716      	b.n	402ba4 <_malloc_r+0x374>
  402d76:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402d7a:	227e      	movs	r2, #126	; 0x7e
  402d7c:	e712      	b.n	402ba4 <_malloc_r+0x374>
  402d7e:	687b      	ldr	r3, [r7, #4]
  402d80:	e780      	b.n	402c84 <_malloc_r+0x454>
  402d82:	08f0      	lsrs	r0, r6, #3
  402d84:	f106 0308 	add.w	r3, r6, #8
  402d88:	e600      	b.n	40298c <_malloc_r+0x15c>
  402d8a:	bf00      	nop
  402d8c:	20400cf8 	.word	0x20400cf8

00402d90 <memcpy>:
  402d90:	4684      	mov	ip, r0
  402d92:	ea41 0300 	orr.w	r3, r1, r0
  402d96:	f013 0303 	ands.w	r3, r3, #3
  402d9a:	d16d      	bne.n	402e78 <memcpy+0xe8>
  402d9c:	3a40      	subs	r2, #64	; 0x40
  402d9e:	d341      	bcc.n	402e24 <memcpy+0x94>
  402da0:	f851 3b04 	ldr.w	r3, [r1], #4
  402da4:	f840 3b04 	str.w	r3, [r0], #4
  402da8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dac:	f840 3b04 	str.w	r3, [r0], #4
  402db0:	f851 3b04 	ldr.w	r3, [r1], #4
  402db4:	f840 3b04 	str.w	r3, [r0], #4
  402db8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dbc:	f840 3b04 	str.w	r3, [r0], #4
  402dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402dc4:	f840 3b04 	str.w	r3, [r0], #4
  402dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dcc:	f840 3b04 	str.w	r3, [r0], #4
  402dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402dd4:	f840 3b04 	str.w	r3, [r0], #4
  402dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ddc:	f840 3b04 	str.w	r3, [r0], #4
  402de0:	f851 3b04 	ldr.w	r3, [r1], #4
  402de4:	f840 3b04 	str.w	r3, [r0], #4
  402de8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dec:	f840 3b04 	str.w	r3, [r0], #4
  402df0:	f851 3b04 	ldr.w	r3, [r1], #4
  402df4:	f840 3b04 	str.w	r3, [r0], #4
  402df8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dfc:	f840 3b04 	str.w	r3, [r0], #4
  402e00:	f851 3b04 	ldr.w	r3, [r1], #4
  402e04:	f840 3b04 	str.w	r3, [r0], #4
  402e08:	f851 3b04 	ldr.w	r3, [r1], #4
  402e0c:	f840 3b04 	str.w	r3, [r0], #4
  402e10:	f851 3b04 	ldr.w	r3, [r1], #4
  402e14:	f840 3b04 	str.w	r3, [r0], #4
  402e18:	f851 3b04 	ldr.w	r3, [r1], #4
  402e1c:	f840 3b04 	str.w	r3, [r0], #4
  402e20:	3a40      	subs	r2, #64	; 0x40
  402e22:	d2bd      	bcs.n	402da0 <memcpy+0x10>
  402e24:	3230      	adds	r2, #48	; 0x30
  402e26:	d311      	bcc.n	402e4c <memcpy+0xbc>
  402e28:	f851 3b04 	ldr.w	r3, [r1], #4
  402e2c:	f840 3b04 	str.w	r3, [r0], #4
  402e30:	f851 3b04 	ldr.w	r3, [r1], #4
  402e34:	f840 3b04 	str.w	r3, [r0], #4
  402e38:	f851 3b04 	ldr.w	r3, [r1], #4
  402e3c:	f840 3b04 	str.w	r3, [r0], #4
  402e40:	f851 3b04 	ldr.w	r3, [r1], #4
  402e44:	f840 3b04 	str.w	r3, [r0], #4
  402e48:	3a10      	subs	r2, #16
  402e4a:	d2ed      	bcs.n	402e28 <memcpy+0x98>
  402e4c:	320c      	adds	r2, #12
  402e4e:	d305      	bcc.n	402e5c <memcpy+0xcc>
  402e50:	f851 3b04 	ldr.w	r3, [r1], #4
  402e54:	f840 3b04 	str.w	r3, [r0], #4
  402e58:	3a04      	subs	r2, #4
  402e5a:	d2f9      	bcs.n	402e50 <memcpy+0xc0>
  402e5c:	3204      	adds	r2, #4
  402e5e:	d008      	beq.n	402e72 <memcpy+0xe2>
  402e60:	07d2      	lsls	r2, r2, #31
  402e62:	bf1c      	itt	ne
  402e64:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e68:	f800 3b01 	strbne.w	r3, [r0], #1
  402e6c:	d301      	bcc.n	402e72 <memcpy+0xe2>
  402e6e:	880b      	ldrh	r3, [r1, #0]
  402e70:	8003      	strh	r3, [r0, #0]
  402e72:	4660      	mov	r0, ip
  402e74:	4770      	bx	lr
  402e76:	bf00      	nop
  402e78:	2a08      	cmp	r2, #8
  402e7a:	d313      	bcc.n	402ea4 <memcpy+0x114>
  402e7c:	078b      	lsls	r3, r1, #30
  402e7e:	d08d      	beq.n	402d9c <memcpy+0xc>
  402e80:	f010 0303 	ands.w	r3, r0, #3
  402e84:	d08a      	beq.n	402d9c <memcpy+0xc>
  402e86:	f1c3 0304 	rsb	r3, r3, #4
  402e8a:	1ad2      	subs	r2, r2, r3
  402e8c:	07db      	lsls	r3, r3, #31
  402e8e:	bf1c      	itt	ne
  402e90:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e94:	f800 3b01 	strbne.w	r3, [r0], #1
  402e98:	d380      	bcc.n	402d9c <memcpy+0xc>
  402e9a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402e9e:	f820 3b02 	strh.w	r3, [r0], #2
  402ea2:	e77b      	b.n	402d9c <memcpy+0xc>
  402ea4:	3a04      	subs	r2, #4
  402ea6:	d3d9      	bcc.n	402e5c <memcpy+0xcc>
  402ea8:	3a01      	subs	r2, #1
  402eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
  402eae:	f800 3b01 	strb.w	r3, [r0], #1
  402eb2:	d2f9      	bcs.n	402ea8 <memcpy+0x118>
  402eb4:	780b      	ldrb	r3, [r1, #0]
  402eb6:	7003      	strb	r3, [r0, #0]
  402eb8:	784b      	ldrb	r3, [r1, #1]
  402eba:	7043      	strb	r3, [r0, #1]
  402ebc:	788b      	ldrb	r3, [r1, #2]
  402ebe:	7083      	strb	r3, [r0, #2]
  402ec0:	4660      	mov	r0, ip
  402ec2:	4770      	bx	lr

00402ec4 <memset>:
  402ec4:	b470      	push	{r4, r5, r6}
  402ec6:	0786      	lsls	r6, r0, #30
  402ec8:	d046      	beq.n	402f58 <memset+0x94>
  402eca:	1e54      	subs	r4, r2, #1
  402ecc:	2a00      	cmp	r2, #0
  402ece:	d041      	beq.n	402f54 <memset+0x90>
  402ed0:	b2ca      	uxtb	r2, r1
  402ed2:	4603      	mov	r3, r0
  402ed4:	e002      	b.n	402edc <memset+0x18>
  402ed6:	f114 34ff 	adds.w	r4, r4, #4294967295
  402eda:	d33b      	bcc.n	402f54 <memset+0x90>
  402edc:	f803 2b01 	strb.w	r2, [r3], #1
  402ee0:	079d      	lsls	r5, r3, #30
  402ee2:	d1f8      	bne.n	402ed6 <memset+0x12>
  402ee4:	2c03      	cmp	r4, #3
  402ee6:	d92e      	bls.n	402f46 <memset+0x82>
  402ee8:	b2cd      	uxtb	r5, r1
  402eea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402eee:	2c0f      	cmp	r4, #15
  402ef0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402ef4:	d919      	bls.n	402f2a <memset+0x66>
  402ef6:	f103 0210 	add.w	r2, r3, #16
  402efa:	4626      	mov	r6, r4
  402efc:	3e10      	subs	r6, #16
  402efe:	2e0f      	cmp	r6, #15
  402f00:	f842 5c10 	str.w	r5, [r2, #-16]
  402f04:	f842 5c0c 	str.w	r5, [r2, #-12]
  402f08:	f842 5c08 	str.w	r5, [r2, #-8]
  402f0c:	f842 5c04 	str.w	r5, [r2, #-4]
  402f10:	f102 0210 	add.w	r2, r2, #16
  402f14:	d8f2      	bhi.n	402efc <memset+0x38>
  402f16:	f1a4 0210 	sub.w	r2, r4, #16
  402f1a:	f022 020f 	bic.w	r2, r2, #15
  402f1e:	f004 040f 	and.w	r4, r4, #15
  402f22:	3210      	adds	r2, #16
  402f24:	2c03      	cmp	r4, #3
  402f26:	4413      	add	r3, r2
  402f28:	d90d      	bls.n	402f46 <memset+0x82>
  402f2a:	461e      	mov	r6, r3
  402f2c:	4622      	mov	r2, r4
  402f2e:	3a04      	subs	r2, #4
  402f30:	2a03      	cmp	r2, #3
  402f32:	f846 5b04 	str.w	r5, [r6], #4
  402f36:	d8fa      	bhi.n	402f2e <memset+0x6a>
  402f38:	1f22      	subs	r2, r4, #4
  402f3a:	f022 0203 	bic.w	r2, r2, #3
  402f3e:	3204      	adds	r2, #4
  402f40:	4413      	add	r3, r2
  402f42:	f004 0403 	and.w	r4, r4, #3
  402f46:	b12c      	cbz	r4, 402f54 <memset+0x90>
  402f48:	b2c9      	uxtb	r1, r1
  402f4a:	441c      	add	r4, r3
  402f4c:	f803 1b01 	strb.w	r1, [r3], #1
  402f50:	429c      	cmp	r4, r3
  402f52:	d1fb      	bne.n	402f4c <memset+0x88>
  402f54:	bc70      	pop	{r4, r5, r6}
  402f56:	4770      	bx	lr
  402f58:	4614      	mov	r4, r2
  402f5a:	4603      	mov	r3, r0
  402f5c:	e7c2      	b.n	402ee4 <memset+0x20>
  402f5e:	bf00      	nop

00402f60 <__malloc_lock>:
  402f60:	4801      	ldr	r0, [pc, #4]	; (402f68 <__malloc_lock+0x8>)
  402f62:	f001 bd51 	b.w	404a08 <__retarget_lock_acquire_recursive>
  402f66:	bf00      	nop
  402f68:	20400d48 	.word	0x20400d48

00402f6c <__malloc_unlock>:
  402f6c:	4801      	ldr	r0, [pc, #4]	; (402f74 <__malloc_unlock+0x8>)
  402f6e:	f001 bd4d 	b.w	404a0c <__retarget_lock_release_recursive>
  402f72:	bf00      	nop
  402f74:	20400d48 	.word	0x20400d48

00402f78 <_sbrk_r>:
  402f78:	b538      	push	{r3, r4, r5, lr}
  402f7a:	4c07      	ldr	r4, [pc, #28]	; (402f98 <_sbrk_r+0x20>)
  402f7c:	2300      	movs	r3, #0
  402f7e:	4605      	mov	r5, r0
  402f80:	4608      	mov	r0, r1
  402f82:	6023      	str	r3, [r4, #0]
  402f84:	f7fe fc56 	bl	401834 <_sbrk>
  402f88:	1c43      	adds	r3, r0, #1
  402f8a:	d000      	beq.n	402f8e <_sbrk_r+0x16>
  402f8c:	bd38      	pop	{r3, r4, r5, pc}
  402f8e:	6823      	ldr	r3, [r4, #0]
  402f90:	2b00      	cmp	r3, #0
  402f92:	d0fb      	beq.n	402f8c <_sbrk_r+0x14>
  402f94:	602b      	str	r3, [r5, #0]
  402f96:	bd38      	pop	{r3, r4, r5, pc}
  402f98:	20400d5c 	.word	0x20400d5c

00402f9c <setbuf>:
  402f9c:	2900      	cmp	r1, #0
  402f9e:	bf0c      	ite	eq
  402fa0:	2202      	moveq	r2, #2
  402fa2:	2200      	movne	r2, #0
  402fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402fa8:	f000 b800 	b.w	402fac <setvbuf>

00402fac <setvbuf>:
  402fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402fb0:	4c61      	ldr	r4, [pc, #388]	; (403138 <setvbuf+0x18c>)
  402fb2:	6825      	ldr	r5, [r4, #0]
  402fb4:	b083      	sub	sp, #12
  402fb6:	4604      	mov	r4, r0
  402fb8:	460f      	mov	r7, r1
  402fba:	4690      	mov	r8, r2
  402fbc:	461e      	mov	r6, r3
  402fbe:	b115      	cbz	r5, 402fc6 <setvbuf+0x1a>
  402fc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402fc2:	2b00      	cmp	r3, #0
  402fc4:	d064      	beq.n	403090 <setvbuf+0xe4>
  402fc6:	f1b8 0f02 	cmp.w	r8, #2
  402fca:	d006      	beq.n	402fda <setvbuf+0x2e>
  402fcc:	f1b8 0f01 	cmp.w	r8, #1
  402fd0:	f200 809f 	bhi.w	403112 <setvbuf+0x166>
  402fd4:	2e00      	cmp	r6, #0
  402fd6:	f2c0 809c 	blt.w	403112 <setvbuf+0x166>
  402fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402fdc:	07d8      	lsls	r0, r3, #31
  402fde:	d534      	bpl.n	40304a <setvbuf+0x9e>
  402fe0:	4621      	mov	r1, r4
  402fe2:	4628      	mov	r0, r5
  402fe4:	f001 f8f8 	bl	4041d8 <_fflush_r>
  402fe8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402fea:	b141      	cbz	r1, 402ffe <setvbuf+0x52>
  402fec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402ff0:	4299      	cmp	r1, r3
  402ff2:	d002      	beq.n	402ffa <setvbuf+0x4e>
  402ff4:	4628      	mov	r0, r5
  402ff6:	f001 fa6d 	bl	4044d4 <_free_r>
  402ffa:	2300      	movs	r3, #0
  402ffc:	6323      	str	r3, [r4, #48]	; 0x30
  402ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403002:	2200      	movs	r2, #0
  403004:	61a2      	str	r2, [r4, #24]
  403006:	6062      	str	r2, [r4, #4]
  403008:	061a      	lsls	r2, r3, #24
  40300a:	d43a      	bmi.n	403082 <setvbuf+0xd6>
  40300c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403010:	f023 0303 	bic.w	r3, r3, #3
  403014:	f1b8 0f02 	cmp.w	r8, #2
  403018:	81a3      	strh	r3, [r4, #12]
  40301a:	d01d      	beq.n	403058 <setvbuf+0xac>
  40301c:	ab01      	add	r3, sp, #4
  40301e:	466a      	mov	r2, sp
  403020:	4621      	mov	r1, r4
  403022:	4628      	mov	r0, r5
  403024:	f001 fcf4 	bl	404a10 <__swhatbuf_r>
  403028:	89a3      	ldrh	r3, [r4, #12]
  40302a:	4318      	orrs	r0, r3
  40302c:	81a0      	strh	r0, [r4, #12]
  40302e:	2e00      	cmp	r6, #0
  403030:	d132      	bne.n	403098 <setvbuf+0xec>
  403032:	9e00      	ldr	r6, [sp, #0]
  403034:	4630      	mov	r0, r6
  403036:	f7ff fbf3 	bl	402820 <malloc>
  40303a:	4607      	mov	r7, r0
  40303c:	2800      	cmp	r0, #0
  40303e:	d06b      	beq.n	403118 <setvbuf+0x16c>
  403040:	89a3      	ldrh	r3, [r4, #12]
  403042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403046:	81a3      	strh	r3, [r4, #12]
  403048:	e028      	b.n	40309c <setvbuf+0xf0>
  40304a:	89a3      	ldrh	r3, [r4, #12]
  40304c:	0599      	lsls	r1, r3, #22
  40304e:	d4c7      	bmi.n	402fe0 <setvbuf+0x34>
  403050:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403052:	f001 fcd9 	bl	404a08 <__retarget_lock_acquire_recursive>
  403056:	e7c3      	b.n	402fe0 <setvbuf+0x34>
  403058:	2500      	movs	r5, #0
  40305a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40305c:	2600      	movs	r6, #0
  40305e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403062:	f043 0302 	orr.w	r3, r3, #2
  403066:	2001      	movs	r0, #1
  403068:	60a6      	str	r6, [r4, #8]
  40306a:	07ce      	lsls	r6, r1, #31
  40306c:	81a3      	strh	r3, [r4, #12]
  40306e:	6022      	str	r2, [r4, #0]
  403070:	6122      	str	r2, [r4, #16]
  403072:	6160      	str	r0, [r4, #20]
  403074:	d401      	bmi.n	40307a <setvbuf+0xce>
  403076:	0598      	lsls	r0, r3, #22
  403078:	d53e      	bpl.n	4030f8 <setvbuf+0x14c>
  40307a:	4628      	mov	r0, r5
  40307c:	b003      	add	sp, #12
  40307e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403082:	6921      	ldr	r1, [r4, #16]
  403084:	4628      	mov	r0, r5
  403086:	f001 fa25 	bl	4044d4 <_free_r>
  40308a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40308e:	e7bd      	b.n	40300c <setvbuf+0x60>
  403090:	4628      	mov	r0, r5
  403092:	f001 f8f9 	bl	404288 <__sinit>
  403096:	e796      	b.n	402fc6 <setvbuf+0x1a>
  403098:	2f00      	cmp	r7, #0
  40309a:	d0cb      	beq.n	403034 <setvbuf+0x88>
  40309c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40309e:	2b00      	cmp	r3, #0
  4030a0:	d033      	beq.n	40310a <setvbuf+0x15e>
  4030a2:	9b00      	ldr	r3, [sp, #0]
  4030a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4030a8:	6027      	str	r7, [r4, #0]
  4030aa:	429e      	cmp	r6, r3
  4030ac:	bf1c      	itt	ne
  4030ae:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4030b2:	81a2      	strhne	r2, [r4, #12]
  4030b4:	f1b8 0f01 	cmp.w	r8, #1
  4030b8:	bf04      	itt	eq
  4030ba:	f042 0201 	orreq.w	r2, r2, #1
  4030be:	81a2      	strheq	r2, [r4, #12]
  4030c0:	b292      	uxth	r2, r2
  4030c2:	f012 0308 	ands.w	r3, r2, #8
  4030c6:	6127      	str	r7, [r4, #16]
  4030c8:	6166      	str	r6, [r4, #20]
  4030ca:	d00e      	beq.n	4030ea <setvbuf+0x13e>
  4030cc:	07d1      	lsls	r1, r2, #31
  4030ce:	d51a      	bpl.n	403106 <setvbuf+0x15a>
  4030d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4030d2:	4276      	negs	r6, r6
  4030d4:	2300      	movs	r3, #0
  4030d6:	f015 0501 	ands.w	r5, r5, #1
  4030da:	61a6      	str	r6, [r4, #24]
  4030dc:	60a3      	str	r3, [r4, #8]
  4030de:	d009      	beq.n	4030f4 <setvbuf+0x148>
  4030e0:	2500      	movs	r5, #0
  4030e2:	4628      	mov	r0, r5
  4030e4:	b003      	add	sp, #12
  4030e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4030ea:	60a3      	str	r3, [r4, #8]
  4030ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4030ee:	f015 0501 	ands.w	r5, r5, #1
  4030f2:	d1f5      	bne.n	4030e0 <setvbuf+0x134>
  4030f4:	0593      	lsls	r3, r2, #22
  4030f6:	d4c0      	bmi.n	40307a <setvbuf+0xce>
  4030f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4030fa:	f001 fc87 	bl	404a0c <__retarget_lock_release_recursive>
  4030fe:	4628      	mov	r0, r5
  403100:	b003      	add	sp, #12
  403102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403106:	60a6      	str	r6, [r4, #8]
  403108:	e7f0      	b.n	4030ec <setvbuf+0x140>
  40310a:	4628      	mov	r0, r5
  40310c:	f001 f8bc 	bl	404288 <__sinit>
  403110:	e7c7      	b.n	4030a2 <setvbuf+0xf6>
  403112:	f04f 35ff 	mov.w	r5, #4294967295
  403116:	e7b0      	b.n	40307a <setvbuf+0xce>
  403118:	f8dd 9000 	ldr.w	r9, [sp]
  40311c:	45b1      	cmp	r9, r6
  40311e:	d004      	beq.n	40312a <setvbuf+0x17e>
  403120:	4648      	mov	r0, r9
  403122:	f7ff fb7d 	bl	402820 <malloc>
  403126:	4607      	mov	r7, r0
  403128:	b920      	cbnz	r0, 403134 <setvbuf+0x188>
  40312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40312e:	f04f 35ff 	mov.w	r5, #4294967295
  403132:	e792      	b.n	40305a <setvbuf+0xae>
  403134:	464e      	mov	r6, r9
  403136:	e783      	b.n	403040 <setvbuf+0x94>
  403138:	20400010 	.word	0x20400010
  40313c:	00000000 	.word	0x00000000

00403140 <strlen>:
  403140:	f890 f000 	pld	[r0]
  403144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403148:	f020 0107 	bic.w	r1, r0, #7
  40314c:	f06f 0c00 	mvn.w	ip, #0
  403150:	f010 0407 	ands.w	r4, r0, #7
  403154:	f891 f020 	pld	[r1, #32]
  403158:	f040 8049 	bne.w	4031ee <strlen+0xae>
  40315c:	f04f 0400 	mov.w	r4, #0
  403160:	f06f 0007 	mvn.w	r0, #7
  403164:	e9d1 2300 	ldrd	r2, r3, [r1]
  403168:	f891 f040 	pld	[r1, #64]	; 0x40
  40316c:	f100 0008 	add.w	r0, r0, #8
  403170:	fa82 f24c 	uadd8	r2, r2, ip
  403174:	faa4 f28c 	sel	r2, r4, ip
  403178:	fa83 f34c 	uadd8	r3, r3, ip
  40317c:	faa2 f38c 	sel	r3, r2, ip
  403180:	bb4b      	cbnz	r3, 4031d6 <strlen+0x96>
  403182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403186:	fa82 f24c 	uadd8	r2, r2, ip
  40318a:	f100 0008 	add.w	r0, r0, #8
  40318e:	faa4 f28c 	sel	r2, r4, ip
  403192:	fa83 f34c 	uadd8	r3, r3, ip
  403196:	faa2 f38c 	sel	r3, r2, ip
  40319a:	b9e3      	cbnz	r3, 4031d6 <strlen+0x96>
  40319c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4031a0:	fa82 f24c 	uadd8	r2, r2, ip
  4031a4:	f100 0008 	add.w	r0, r0, #8
  4031a8:	faa4 f28c 	sel	r2, r4, ip
  4031ac:	fa83 f34c 	uadd8	r3, r3, ip
  4031b0:	faa2 f38c 	sel	r3, r2, ip
  4031b4:	b97b      	cbnz	r3, 4031d6 <strlen+0x96>
  4031b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4031ba:	f101 0120 	add.w	r1, r1, #32
  4031be:	fa82 f24c 	uadd8	r2, r2, ip
  4031c2:	f100 0008 	add.w	r0, r0, #8
  4031c6:	faa4 f28c 	sel	r2, r4, ip
  4031ca:	fa83 f34c 	uadd8	r3, r3, ip
  4031ce:	faa2 f38c 	sel	r3, r2, ip
  4031d2:	2b00      	cmp	r3, #0
  4031d4:	d0c6      	beq.n	403164 <strlen+0x24>
  4031d6:	2a00      	cmp	r2, #0
  4031d8:	bf04      	itt	eq
  4031da:	3004      	addeq	r0, #4
  4031dc:	461a      	moveq	r2, r3
  4031de:	ba12      	rev	r2, r2
  4031e0:	fab2 f282 	clz	r2, r2
  4031e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4031e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4031ec:	4770      	bx	lr
  4031ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4031f2:	f004 0503 	and.w	r5, r4, #3
  4031f6:	f1c4 0000 	rsb	r0, r4, #0
  4031fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4031fe:	f014 0f04 	tst.w	r4, #4
  403202:	f891 f040 	pld	[r1, #64]	; 0x40
  403206:	fa0c f505 	lsl.w	r5, ip, r5
  40320a:	ea62 0205 	orn	r2, r2, r5
  40320e:	bf1c      	itt	ne
  403210:	ea63 0305 	ornne	r3, r3, r5
  403214:	4662      	movne	r2, ip
  403216:	f04f 0400 	mov.w	r4, #0
  40321a:	e7a9      	b.n	403170 <strlen+0x30>

0040321c <__sprint_r.part.0>:
  40321c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403220:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403222:	049c      	lsls	r4, r3, #18
  403224:	4693      	mov	fp, r2
  403226:	d52f      	bpl.n	403288 <__sprint_r.part.0+0x6c>
  403228:	6893      	ldr	r3, [r2, #8]
  40322a:	6812      	ldr	r2, [r2, #0]
  40322c:	b353      	cbz	r3, 403284 <__sprint_r.part.0+0x68>
  40322e:	460e      	mov	r6, r1
  403230:	4607      	mov	r7, r0
  403232:	f102 0908 	add.w	r9, r2, #8
  403236:	e919 0420 	ldmdb	r9, {r5, sl}
  40323a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40323e:	d017      	beq.n	403270 <__sprint_r.part.0+0x54>
  403240:	3d04      	subs	r5, #4
  403242:	2400      	movs	r4, #0
  403244:	e001      	b.n	40324a <__sprint_r.part.0+0x2e>
  403246:	45a0      	cmp	r8, r4
  403248:	d010      	beq.n	40326c <__sprint_r.part.0+0x50>
  40324a:	4632      	mov	r2, r6
  40324c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403250:	4638      	mov	r0, r7
  403252:	f001 f8bb 	bl	4043cc <_fputwc_r>
  403256:	1c43      	adds	r3, r0, #1
  403258:	f104 0401 	add.w	r4, r4, #1
  40325c:	d1f3      	bne.n	403246 <__sprint_r.part.0+0x2a>
  40325e:	2300      	movs	r3, #0
  403260:	f8cb 3008 	str.w	r3, [fp, #8]
  403264:	f8cb 3004 	str.w	r3, [fp, #4]
  403268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40326c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403270:	f02a 0a03 	bic.w	sl, sl, #3
  403274:	eba3 030a 	sub.w	r3, r3, sl
  403278:	f8cb 3008 	str.w	r3, [fp, #8]
  40327c:	f109 0908 	add.w	r9, r9, #8
  403280:	2b00      	cmp	r3, #0
  403282:	d1d8      	bne.n	403236 <__sprint_r.part.0+0x1a>
  403284:	2000      	movs	r0, #0
  403286:	e7ea      	b.n	40325e <__sprint_r.part.0+0x42>
  403288:	f001 fa0a 	bl	4046a0 <__sfvwrite_r>
  40328c:	2300      	movs	r3, #0
  40328e:	f8cb 3008 	str.w	r3, [fp, #8]
  403292:	f8cb 3004 	str.w	r3, [fp, #4]
  403296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40329a:	bf00      	nop

0040329c <_vfiprintf_r>:
  40329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a0:	b0ad      	sub	sp, #180	; 0xb4
  4032a2:	461d      	mov	r5, r3
  4032a4:	468b      	mov	fp, r1
  4032a6:	4690      	mov	r8, r2
  4032a8:	9307      	str	r3, [sp, #28]
  4032aa:	9006      	str	r0, [sp, #24]
  4032ac:	b118      	cbz	r0, 4032b6 <_vfiprintf_r+0x1a>
  4032ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4032b0:	2b00      	cmp	r3, #0
  4032b2:	f000 80f3 	beq.w	40349c <_vfiprintf_r+0x200>
  4032b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4032be:	07df      	lsls	r7, r3, #31
  4032c0:	b281      	uxth	r1, r0
  4032c2:	d402      	bmi.n	4032ca <_vfiprintf_r+0x2e>
  4032c4:	058e      	lsls	r6, r1, #22
  4032c6:	f140 80fc 	bpl.w	4034c2 <_vfiprintf_r+0x226>
  4032ca:	048c      	lsls	r4, r1, #18
  4032cc:	d40a      	bmi.n	4032e4 <_vfiprintf_r+0x48>
  4032ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4032d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4032da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4032de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4032e2:	b289      	uxth	r1, r1
  4032e4:	0708      	lsls	r0, r1, #28
  4032e6:	f140 80b3 	bpl.w	403450 <_vfiprintf_r+0x1b4>
  4032ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4032ee:	2b00      	cmp	r3, #0
  4032f0:	f000 80ae 	beq.w	403450 <_vfiprintf_r+0x1b4>
  4032f4:	f001 031a 	and.w	r3, r1, #26
  4032f8:	2b0a      	cmp	r3, #10
  4032fa:	f000 80b5 	beq.w	403468 <_vfiprintf_r+0x1cc>
  4032fe:	2300      	movs	r3, #0
  403300:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403304:	930b      	str	r3, [sp, #44]	; 0x2c
  403306:	9311      	str	r3, [sp, #68]	; 0x44
  403308:	9310      	str	r3, [sp, #64]	; 0x40
  40330a:	9303      	str	r3, [sp, #12]
  40330c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403310:	46ca      	mov	sl, r9
  403312:	f8cd b010 	str.w	fp, [sp, #16]
  403316:	f898 3000 	ldrb.w	r3, [r8]
  40331a:	4644      	mov	r4, r8
  40331c:	b1fb      	cbz	r3, 40335e <_vfiprintf_r+0xc2>
  40331e:	2b25      	cmp	r3, #37	; 0x25
  403320:	d102      	bne.n	403328 <_vfiprintf_r+0x8c>
  403322:	e01c      	b.n	40335e <_vfiprintf_r+0xc2>
  403324:	2b25      	cmp	r3, #37	; 0x25
  403326:	d003      	beq.n	403330 <_vfiprintf_r+0x94>
  403328:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40332c:	2b00      	cmp	r3, #0
  40332e:	d1f9      	bne.n	403324 <_vfiprintf_r+0x88>
  403330:	eba4 0508 	sub.w	r5, r4, r8
  403334:	b19d      	cbz	r5, 40335e <_vfiprintf_r+0xc2>
  403336:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403338:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40333a:	f8ca 8000 	str.w	r8, [sl]
  40333e:	3301      	adds	r3, #1
  403340:	442a      	add	r2, r5
  403342:	2b07      	cmp	r3, #7
  403344:	f8ca 5004 	str.w	r5, [sl, #4]
  403348:	9211      	str	r2, [sp, #68]	; 0x44
  40334a:	9310      	str	r3, [sp, #64]	; 0x40
  40334c:	dd7a      	ble.n	403444 <_vfiprintf_r+0x1a8>
  40334e:	2a00      	cmp	r2, #0
  403350:	f040 84b0 	bne.w	403cb4 <_vfiprintf_r+0xa18>
  403354:	9b03      	ldr	r3, [sp, #12]
  403356:	9210      	str	r2, [sp, #64]	; 0x40
  403358:	442b      	add	r3, r5
  40335a:	46ca      	mov	sl, r9
  40335c:	9303      	str	r3, [sp, #12]
  40335e:	7823      	ldrb	r3, [r4, #0]
  403360:	2b00      	cmp	r3, #0
  403362:	f000 83e0 	beq.w	403b26 <_vfiprintf_r+0x88a>
  403366:	2000      	movs	r0, #0
  403368:	f04f 0300 	mov.w	r3, #0
  40336c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403370:	f104 0801 	add.w	r8, r4, #1
  403374:	7862      	ldrb	r2, [r4, #1]
  403376:	4605      	mov	r5, r0
  403378:	4606      	mov	r6, r0
  40337a:	4603      	mov	r3, r0
  40337c:	f04f 34ff 	mov.w	r4, #4294967295
  403380:	f108 0801 	add.w	r8, r8, #1
  403384:	f1a2 0120 	sub.w	r1, r2, #32
  403388:	2958      	cmp	r1, #88	; 0x58
  40338a:	f200 82de 	bhi.w	40394a <_vfiprintf_r+0x6ae>
  40338e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403392:	0221      	.short	0x0221
  403394:	02dc02dc 	.word	0x02dc02dc
  403398:	02dc0229 	.word	0x02dc0229
  40339c:	02dc02dc 	.word	0x02dc02dc
  4033a0:	02dc02dc 	.word	0x02dc02dc
  4033a4:	028902dc 	.word	0x028902dc
  4033a8:	02dc0295 	.word	0x02dc0295
  4033ac:	02bd00a2 	.word	0x02bd00a2
  4033b0:	019f02dc 	.word	0x019f02dc
  4033b4:	01a401a4 	.word	0x01a401a4
  4033b8:	01a401a4 	.word	0x01a401a4
  4033bc:	01a401a4 	.word	0x01a401a4
  4033c0:	01a401a4 	.word	0x01a401a4
  4033c4:	02dc01a4 	.word	0x02dc01a4
  4033c8:	02dc02dc 	.word	0x02dc02dc
  4033cc:	02dc02dc 	.word	0x02dc02dc
  4033d0:	02dc02dc 	.word	0x02dc02dc
  4033d4:	02dc02dc 	.word	0x02dc02dc
  4033d8:	01b202dc 	.word	0x01b202dc
  4033dc:	02dc02dc 	.word	0x02dc02dc
  4033e0:	02dc02dc 	.word	0x02dc02dc
  4033e4:	02dc02dc 	.word	0x02dc02dc
  4033e8:	02dc02dc 	.word	0x02dc02dc
  4033ec:	02dc02dc 	.word	0x02dc02dc
  4033f0:	02dc0197 	.word	0x02dc0197
  4033f4:	02dc02dc 	.word	0x02dc02dc
  4033f8:	02dc02dc 	.word	0x02dc02dc
  4033fc:	02dc019b 	.word	0x02dc019b
  403400:	025302dc 	.word	0x025302dc
  403404:	02dc02dc 	.word	0x02dc02dc
  403408:	02dc02dc 	.word	0x02dc02dc
  40340c:	02dc02dc 	.word	0x02dc02dc
  403410:	02dc02dc 	.word	0x02dc02dc
  403414:	02dc02dc 	.word	0x02dc02dc
  403418:	021b025a 	.word	0x021b025a
  40341c:	02dc02dc 	.word	0x02dc02dc
  403420:	026e02dc 	.word	0x026e02dc
  403424:	02dc021b 	.word	0x02dc021b
  403428:	027302dc 	.word	0x027302dc
  40342c:	01f502dc 	.word	0x01f502dc
  403430:	02090182 	.word	0x02090182
  403434:	02dc02d7 	.word	0x02dc02d7
  403438:	02dc029a 	.word	0x02dc029a
  40343c:	02dc00a7 	.word	0x02dc00a7
  403440:	022e02dc 	.word	0x022e02dc
  403444:	f10a 0a08 	add.w	sl, sl, #8
  403448:	9b03      	ldr	r3, [sp, #12]
  40344a:	442b      	add	r3, r5
  40344c:	9303      	str	r3, [sp, #12]
  40344e:	e786      	b.n	40335e <_vfiprintf_r+0xc2>
  403450:	4659      	mov	r1, fp
  403452:	9806      	ldr	r0, [sp, #24]
  403454:	f000 fdac 	bl	403fb0 <__swsetup_r>
  403458:	bb18      	cbnz	r0, 4034a2 <_vfiprintf_r+0x206>
  40345a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40345e:	f001 031a 	and.w	r3, r1, #26
  403462:	2b0a      	cmp	r3, #10
  403464:	f47f af4b 	bne.w	4032fe <_vfiprintf_r+0x62>
  403468:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40346c:	2b00      	cmp	r3, #0
  40346e:	f6ff af46 	blt.w	4032fe <_vfiprintf_r+0x62>
  403472:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403476:	07db      	lsls	r3, r3, #31
  403478:	d405      	bmi.n	403486 <_vfiprintf_r+0x1ea>
  40347a:	058f      	lsls	r7, r1, #22
  40347c:	d403      	bmi.n	403486 <_vfiprintf_r+0x1ea>
  40347e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403482:	f001 fac3 	bl	404a0c <__retarget_lock_release_recursive>
  403486:	462b      	mov	r3, r5
  403488:	4642      	mov	r2, r8
  40348a:	4659      	mov	r1, fp
  40348c:	9806      	ldr	r0, [sp, #24]
  40348e:	f000 fd4d 	bl	403f2c <__sbprintf>
  403492:	9003      	str	r0, [sp, #12]
  403494:	9803      	ldr	r0, [sp, #12]
  403496:	b02d      	add	sp, #180	; 0xb4
  403498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40349c:	f000 fef4 	bl	404288 <__sinit>
  4034a0:	e709      	b.n	4032b6 <_vfiprintf_r+0x1a>
  4034a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4034a6:	07d9      	lsls	r1, r3, #31
  4034a8:	d404      	bmi.n	4034b4 <_vfiprintf_r+0x218>
  4034aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4034ae:	059a      	lsls	r2, r3, #22
  4034b0:	f140 84aa 	bpl.w	403e08 <_vfiprintf_r+0xb6c>
  4034b4:	f04f 33ff 	mov.w	r3, #4294967295
  4034b8:	9303      	str	r3, [sp, #12]
  4034ba:	9803      	ldr	r0, [sp, #12]
  4034bc:	b02d      	add	sp, #180	; 0xb4
  4034be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4034c6:	f001 fa9f 	bl	404a08 <__retarget_lock_acquire_recursive>
  4034ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4034ce:	b281      	uxth	r1, r0
  4034d0:	e6fb      	b.n	4032ca <_vfiprintf_r+0x2e>
  4034d2:	4276      	negs	r6, r6
  4034d4:	9207      	str	r2, [sp, #28]
  4034d6:	f043 0304 	orr.w	r3, r3, #4
  4034da:	f898 2000 	ldrb.w	r2, [r8]
  4034de:	e74f      	b.n	403380 <_vfiprintf_r+0xe4>
  4034e0:	9608      	str	r6, [sp, #32]
  4034e2:	069e      	lsls	r6, r3, #26
  4034e4:	f100 8450 	bmi.w	403d88 <_vfiprintf_r+0xaec>
  4034e8:	9907      	ldr	r1, [sp, #28]
  4034ea:	06dd      	lsls	r5, r3, #27
  4034ec:	460a      	mov	r2, r1
  4034ee:	f100 83ef 	bmi.w	403cd0 <_vfiprintf_r+0xa34>
  4034f2:	0658      	lsls	r0, r3, #25
  4034f4:	f140 83ec 	bpl.w	403cd0 <_vfiprintf_r+0xa34>
  4034f8:	880e      	ldrh	r6, [r1, #0]
  4034fa:	3104      	adds	r1, #4
  4034fc:	2700      	movs	r7, #0
  4034fe:	2201      	movs	r2, #1
  403500:	9107      	str	r1, [sp, #28]
  403502:	f04f 0100 	mov.w	r1, #0
  403506:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40350a:	2500      	movs	r5, #0
  40350c:	1c61      	adds	r1, r4, #1
  40350e:	f000 8116 	beq.w	40373e <_vfiprintf_r+0x4a2>
  403512:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403516:	9102      	str	r1, [sp, #8]
  403518:	ea56 0107 	orrs.w	r1, r6, r7
  40351c:	f040 8114 	bne.w	403748 <_vfiprintf_r+0x4ac>
  403520:	2c00      	cmp	r4, #0
  403522:	f040 835c 	bne.w	403bde <_vfiprintf_r+0x942>
  403526:	2a00      	cmp	r2, #0
  403528:	f040 83b7 	bne.w	403c9a <_vfiprintf_r+0x9fe>
  40352c:	f013 0301 	ands.w	r3, r3, #1
  403530:	9305      	str	r3, [sp, #20]
  403532:	f000 8457 	beq.w	403de4 <_vfiprintf_r+0xb48>
  403536:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40353a:	2330      	movs	r3, #48	; 0x30
  40353c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403540:	9b05      	ldr	r3, [sp, #20]
  403542:	42a3      	cmp	r3, r4
  403544:	bfb8      	it	lt
  403546:	4623      	movlt	r3, r4
  403548:	9301      	str	r3, [sp, #4]
  40354a:	b10d      	cbz	r5, 403550 <_vfiprintf_r+0x2b4>
  40354c:	3301      	adds	r3, #1
  40354e:	9301      	str	r3, [sp, #4]
  403550:	9b02      	ldr	r3, [sp, #8]
  403552:	f013 0302 	ands.w	r3, r3, #2
  403556:	9309      	str	r3, [sp, #36]	; 0x24
  403558:	d002      	beq.n	403560 <_vfiprintf_r+0x2c4>
  40355a:	9b01      	ldr	r3, [sp, #4]
  40355c:	3302      	adds	r3, #2
  40355e:	9301      	str	r3, [sp, #4]
  403560:	9b02      	ldr	r3, [sp, #8]
  403562:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403566:	930a      	str	r3, [sp, #40]	; 0x28
  403568:	f040 8217 	bne.w	40399a <_vfiprintf_r+0x6fe>
  40356c:	9b08      	ldr	r3, [sp, #32]
  40356e:	9a01      	ldr	r2, [sp, #4]
  403570:	1a9d      	subs	r5, r3, r2
  403572:	2d00      	cmp	r5, #0
  403574:	f340 8211 	ble.w	40399a <_vfiprintf_r+0x6fe>
  403578:	2d10      	cmp	r5, #16
  40357a:	f340 8490 	ble.w	403e9e <_vfiprintf_r+0xc02>
  40357e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403580:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403582:	4ec4      	ldr	r6, [pc, #784]	; (403894 <_vfiprintf_r+0x5f8>)
  403584:	46d6      	mov	lr, sl
  403586:	2710      	movs	r7, #16
  403588:	46a2      	mov	sl, r4
  40358a:	4619      	mov	r1, r3
  40358c:	9c06      	ldr	r4, [sp, #24]
  40358e:	e007      	b.n	4035a0 <_vfiprintf_r+0x304>
  403590:	f101 0c02 	add.w	ip, r1, #2
  403594:	f10e 0e08 	add.w	lr, lr, #8
  403598:	4601      	mov	r1, r0
  40359a:	3d10      	subs	r5, #16
  40359c:	2d10      	cmp	r5, #16
  40359e:	dd11      	ble.n	4035c4 <_vfiprintf_r+0x328>
  4035a0:	1c48      	adds	r0, r1, #1
  4035a2:	3210      	adds	r2, #16
  4035a4:	2807      	cmp	r0, #7
  4035a6:	9211      	str	r2, [sp, #68]	; 0x44
  4035a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4035ac:	9010      	str	r0, [sp, #64]	; 0x40
  4035ae:	ddef      	ble.n	403590 <_vfiprintf_r+0x2f4>
  4035b0:	2a00      	cmp	r2, #0
  4035b2:	f040 81e4 	bne.w	40397e <_vfiprintf_r+0x6e2>
  4035b6:	3d10      	subs	r5, #16
  4035b8:	2d10      	cmp	r5, #16
  4035ba:	4611      	mov	r1, r2
  4035bc:	f04f 0c01 	mov.w	ip, #1
  4035c0:	46ce      	mov	lr, r9
  4035c2:	dced      	bgt.n	4035a0 <_vfiprintf_r+0x304>
  4035c4:	4654      	mov	r4, sl
  4035c6:	4661      	mov	r1, ip
  4035c8:	46f2      	mov	sl, lr
  4035ca:	442a      	add	r2, r5
  4035cc:	2907      	cmp	r1, #7
  4035ce:	9211      	str	r2, [sp, #68]	; 0x44
  4035d0:	f8ca 6000 	str.w	r6, [sl]
  4035d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4035d8:	9110      	str	r1, [sp, #64]	; 0x40
  4035da:	f300 82ec 	bgt.w	403bb6 <_vfiprintf_r+0x91a>
  4035de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4035e2:	f10a 0a08 	add.w	sl, sl, #8
  4035e6:	1c48      	adds	r0, r1, #1
  4035e8:	2d00      	cmp	r5, #0
  4035ea:	f040 81de 	bne.w	4039aa <_vfiprintf_r+0x70e>
  4035ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035f0:	2b00      	cmp	r3, #0
  4035f2:	f000 81f8 	beq.w	4039e6 <_vfiprintf_r+0x74a>
  4035f6:	3202      	adds	r2, #2
  4035f8:	a90e      	add	r1, sp, #56	; 0x38
  4035fa:	2302      	movs	r3, #2
  4035fc:	2807      	cmp	r0, #7
  4035fe:	9211      	str	r2, [sp, #68]	; 0x44
  403600:	9010      	str	r0, [sp, #64]	; 0x40
  403602:	e88a 000a 	stmia.w	sl, {r1, r3}
  403606:	f340 81ea 	ble.w	4039de <_vfiprintf_r+0x742>
  40360a:	2a00      	cmp	r2, #0
  40360c:	f040 838c 	bne.w	403d28 <_vfiprintf_r+0xa8c>
  403610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403612:	2b80      	cmp	r3, #128	; 0x80
  403614:	f04f 0001 	mov.w	r0, #1
  403618:	4611      	mov	r1, r2
  40361a:	46ca      	mov	sl, r9
  40361c:	f040 81e7 	bne.w	4039ee <_vfiprintf_r+0x752>
  403620:	9b08      	ldr	r3, [sp, #32]
  403622:	9d01      	ldr	r5, [sp, #4]
  403624:	1b5e      	subs	r6, r3, r5
  403626:	2e00      	cmp	r6, #0
  403628:	f340 81e1 	ble.w	4039ee <_vfiprintf_r+0x752>
  40362c:	2e10      	cmp	r6, #16
  40362e:	4d9a      	ldr	r5, [pc, #616]	; (403898 <_vfiprintf_r+0x5fc>)
  403630:	f340 8450 	ble.w	403ed4 <_vfiprintf_r+0xc38>
  403634:	46d4      	mov	ip, sl
  403636:	2710      	movs	r7, #16
  403638:	46a2      	mov	sl, r4
  40363a:	9c06      	ldr	r4, [sp, #24]
  40363c:	e007      	b.n	40364e <_vfiprintf_r+0x3b2>
  40363e:	f101 0e02 	add.w	lr, r1, #2
  403642:	f10c 0c08 	add.w	ip, ip, #8
  403646:	4601      	mov	r1, r0
  403648:	3e10      	subs	r6, #16
  40364a:	2e10      	cmp	r6, #16
  40364c:	dd11      	ble.n	403672 <_vfiprintf_r+0x3d6>
  40364e:	1c48      	adds	r0, r1, #1
  403650:	3210      	adds	r2, #16
  403652:	2807      	cmp	r0, #7
  403654:	9211      	str	r2, [sp, #68]	; 0x44
  403656:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40365a:	9010      	str	r0, [sp, #64]	; 0x40
  40365c:	ddef      	ble.n	40363e <_vfiprintf_r+0x3a2>
  40365e:	2a00      	cmp	r2, #0
  403660:	f040 829d 	bne.w	403b9e <_vfiprintf_r+0x902>
  403664:	3e10      	subs	r6, #16
  403666:	2e10      	cmp	r6, #16
  403668:	f04f 0e01 	mov.w	lr, #1
  40366c:	4611      	mov	r1, r2
  40366e:	46cc      	mov	ip, r9
  403670:	dced      	bgt.n	40364e <_vfiprintf_r+0x3b2>
  403672:	4654      	mov	r4, sl
  403674:	46e2      	mov	sl, ip
  403676:	4432      	add	r2, r6
  403678:	f1be 0f07 	cmp.w	lr, #7
  40367c:	9211      	str	r2, [sp, #68]	; 0x44
  40367e:	e88a 0060 	stmia.w	sl, {r5, r6}
  403682:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403686:	f300 8369 	bgt.w	403d5c <_vfiprintf_r+0xac0>
  40368a:	f10a 0a08 	add.w	sl, sl, #8
  40368e:	f10e 0001 	add.w	r0, lr, #1
  403692:	4671      	mov	r1, lr
  403694:	e1ab      	b.n	4039ee <_vfiprintf_r+0x752>
  403696:	9608      	str	r6, [sp, #32]
  403698:	f013 0220 	ands.w	r2, r3, #32
  40369c:	f040 838c 	bne.w	403db8 <_vfiprintf_r+0xb1c>
  4036a0:	f013 0110 	ands.w	r1, r3, #16
  4036a4:	f040 831a 	bne.w	403cdc <_vfiprintf_r+0xa40>
  4036a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4036ac:	f000 8316 	beq.w	403cdc <_vfiprintf_r+0xa40>
  4036b0:	9807      	ldr	r0, [sp, #28]
  4036b2:	460a      	mov	r2, r1
  4036b4:	4601      	mov	r1, r0
  4036b6:	3104      	adds	r1, #4
  4036b8:	8806      	ldrh	r6, [r0, #0]
  4036ba:	9107      	str	r1, [sp, #28]
  4036bc:	2700      	movs	r7, #0
  4036be:	e720      	b.n	403502 <_vfiprintf_r+0x266>
  4036c0:	9608      	str	r6, [sp, #32]
  4036c2:	f043 0310 	orr.w	r3, r3, #16
  4036c6:	e7e7      	b.n	403698 <_vfiprintf_r+0x3fc>
  4036c8:	9608      	str	r6, [sp, #32]
  4036ca:	f043 0310 	orr.w	r3, r3, #16
  4036ce:	e708      	b.n	4034e2 <_vfiprintf_r+0x246>
  4036d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4036d4:	f898 2000 	ldrb.w	r2, [r8]
  4036d8:	e652      	b.n	403380 <_vfiprintf_r+0xe4>
  4036da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4036de:	2600      	movs	r6, #0
  4036e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4036e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4036e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4036ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4036f0:	2909      	cmp	r1, #9
  4036f2:	d9f5      	bls.n	4036e0 <_vfiprintf_r+0x444>
  4036f4:	e646      	b.n	403384 <_vfiprintf_r+0xe8>
  4036f6:	9608      	str	r6, [sp, #32]
  4036f8:	2800      	cmp	r0, #0
  4036fa:	f040 8408 	bne.w	403f0e <_vfiprintf_r+0xc72>
  4036fe:	f043 0310 	orr.w	r3, r3, #16
  403702:	069e      	lsls	r6, r3, #26
  403704:	f100 834c 	bmi.w	403da0 <_vfiprintf_r+0xb04>
  403708:	06dd      	lsls	r5, r3, #27
  40370a:	f100 82f3 	bmi.w	403cf4 <_vfiprintf_r+0xa58>
  40370e:	0658      	lsls	r0, r3, #25
  403710:	f140 82f0 	bpl.w	403cf4 <_vfiprintf_r+0xa58>
  403714:	9d07      	ldr	r5, [sp, #28]
  403716:	f9b5 6000 	ldrsh.w	r6, [r5]
  40371a:	462a      	mov	r2, r5
  40371c:	17f7      	asrs	r7, r6, #31
  40371e:	3204      	adds	r2, #4
  403720:	4630      	mov	r0, r6
  403722:	4639      	mov	r1, r7
  403724:	9207      	str	r2, [sp, #28]
  403726:	2800      	cmp	r0, #0
  403728:	f171 0200 	sbcs.w	r2, r1, #0
  40372c:	f2c0 835d 	blt.w	403dea <_vfiprintf_r+0xb4e>
  403730:	1c61      	adds	r1, r4, #1
  403732:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403736:	f04f 0201 	mov.w	r2, #1
  40373a:	f47f aeea 	bne.w	403512 <_vfiprintf_r+0x276>
  40373e:	ea56 0107 	orrs.w	r1, r6, r7
  403742:	f000 824d 	beq.w	403be0 <_vfiprintf_r+0x944>
  403746:	9302      	str	r3, [sp, #8]
  403748:	2a01      	cmp	r2, #1
  40374a:	f000 828c 	beq.w	403c66 <_vfiprintf_r+0x9ca>
  40374e:	2a02      	cmp	r2, #2
  403750:	f040 825c 	bne.w	403c0c <_vfiprintf_r+0x970>
  403754:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403756:	46cb      	mov	fp, r9
  403758:	0933      	lsrs	r3, r6, #4
  40375a:	f006 010f 	and.w	r1, r6, #15
  40375e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403762:	093a      	lsrs	r2, r7, #4
  403764:	461e      	mov	r6, r3
  403766:	4617      	mov	r7, r2
  403768:	5c43      	ldrb	r3, [r0, r1]
  40376a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40376e:	ea56 0307 	orrs.w	r3, r6, r7
  403772:	d1f1      	bne.n	403758 <_vfiprintf_r+0x4bc>
  403774:	eba9 030b 	sub.w	r3, r9, fp
  403778:	9305      	str	r3, [sp, #20]
  40377a:	e6e1      	b.n	403540 <_vfiprintf_r+0x2a4>
  40377c:	2800      	cmp	r0, #0
  40377e:	f040 83c0 	bne.w	403f02 <_vfiprintf_r+0xc66>
  403782:	0699      	lsls	r1, r3, #26
  403784:	f100 8367 	bmi.w	403e56 <_vfiprintf_r+0xbba>
  403788:	06da      	lsls	r2, r3, #27
  40378a:	f100 80f1 	bmi.w	403970 <_vfiprintf_r+0x6d4>
  40378e:	065b      	lsls	r3, r3, #25
  403790:	f140 80ee 	bpl.w	403970 <_vfiprintf_r+0x6d4>
  403794:	9a07      	ldr	r2, [sp, #28]
  403796:	6813      	ldr	r3, [r2, #0]
  403798:	3204      	adds	r2, #4
  40379a:	9207      	str	r2, [sp, #28]
  40379c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4037a0:	801a      	strh	r2, [r3, #0]
  4037a2:	e5b8      	b.n	403316 <_vfiprintf_r+0x7a>
  4037a4:	9807      	ldr	r0, [sp, #28]
  4037a6:	4a3d      	ldr	r2, [pc, #244]	; (40389c <_vfiprintf_r+0x600>)
  4037a8:	9608      	str	r6, [sp, #32]
  4037aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4037ac:	6806      	ldr	r6, [r0, #0]
  4037ae:	2278      	movs	r2, #120	; 0x78
  4037b0:	2130      	movs	r1, #48	; 0x30
  4037b2:	3004      	adds	r0, #4
  4037b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4037b8:	f043 0302 	orr.w	r3, r3, #2
  4037bc:	9007      	str	r0, [sp, #28]
  4037be:	2700      	movs	r7, #0
  4037c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4037c4:	2202      	movs	r2, #2
  4037c6:	e69c      	b.n	403502 <_vfiprintf_r+0x266>
  4037c8:	9608      	str	r6, [sp, #32]
  4037ca:	2800      	cmp	r0, #0
  4037cc:	d099      	beq.n	403702 <_vfiprintf_r+0x466>
  4037ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4037d2:	e796      	b.n	403702 <_vfiprintf_r+0x466>
  4037d4:	f898 2000 	ldrb.w	r2, [r8]
  4037d8:	2d00      	cmp	r5, #0
  4037da:	f47f add1 	bne.w	403380 <_vfiprintf_r+0xe4>
  4037de:	2001      	movs	r0, #1
  4037e0:	2520      	movs	r5, #32
  4037e2:	e5cd      	b.n	403380 <_vfiprintf_r+0xe4>
  4037e4:	f043 0301 	orr.w	r3, r3, #1
  4037e8:	f898 2000 	ldrb.w	r2, [r8]
  4037ec:	e5c8      	b.n	403380 <_vfiprintf_r+0xe4>
  4037ee:	9608      	str	r6, [sp, #32]
  4037f0:	2800      	cmp	r0, #0
  4037f2:	f040 8393 	bne.w	403f1c <_vfiprintf_r+0xc80>
  4037f6:	4929      	ldr	r1, [pc, #164]	; (40389c <_vfiprintf_r+0x600>)
  4037f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4037fa:	069f      	lsls	r7, r3, #26
  4037fc:	f100 82e8 	bmi.w	403dd0 <_vfiprintf_r+0xb34>
  403800:	9807      	ldr	r0, [sp, #28]
  403802:	06de      	lsls	r6, r3, #27
  403804:	4601      	mov	r1, r0
  403806:	f100 8270 	bmi.w	403cea <_vfiprintf_r+0xa4e>
  40380a:	065d      	lsls	r5, r3, #25
  40380c:	f140 826d 	bpl.w	403cea <_vfiprintf_r+0xa4e>
  403810:	3104      	adds	r1, #4
  403812:	8806      	ldrh	r6, [r0, #0]
  403814:	9107      	str	r1, [sp, #28]
  403816:	2700      	movs	r7, #0
  403818:	07d8      	lsls	r0, r3, #31
  40381a:	f140 8222 	bpl.w	403c62 <_vfiprintf_r+0x9c6>
  40381e:	ea56 0107 	orrs.w	r1, r6, r7
  403822:	f000 821e 	beq.w	403c62 <_vfiprintf_r+0x9c6>
  403826:	2130      	movs	r1, #48	; 0x30
  403828:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40382c:	f043 0302 	orr.w	r3, r3, #2
  403830:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403834:	2202      	movs	r2, #2
  403836:	e664      	b.n	403502 <_vfiprintf_r+0x266>
  403838:	9608      	str	r6, [sp, #32]
  40383a:	2800      	cmp	r0, #0
  40383c:	f040 836b 	bne.w	403f16 <_vfiprintf_r+0xc7a>
  403840:	4917      	ldr	r1, [pc, #92]	; (4038a0 <_vfiprintf_r+0x604>)
  403842:	910b      	str	r1, [sp, #44]	; 0x2c
  403844:	e7d9      	b.n	4037fa <_vfiprintf_r+0x55e>
  403846:	9907      	ldr	r1, [sp, #28]
  403848:	9608      	str	r6, [sp, #32]
  40384a:	680a      	ldr	r2, [r1, #0]
  40384c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403850:	f04f 0000 	mov.w	r0, #0
  403854:	460a      	mov	r2, r1
  403856:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40385a:	3204      	adds	r2, #4
  40385c:	2001      	movs	r0, #1
  40385e:	9001      	str	r0, [sp, #4]
  403860:	9207      	str	r2, [sp, #28]
  403862:	9005      	str	r0, [sp, #20]
  403864:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403868:	9302      	str	r3, [sp, #8]
  40386a:	2400      	movs	r4, #0
  40386c:	e670      	b.n	403550 <_vfiprintf_r+0x2b4>
  40386e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403872:	f898 2000 	ldrb.w	r2, [r8]
  403876:	e583      	b.n	403380 <_vfiprintf_r+0xe4>
  403878:	f898 2000 	ldrb.w	r2, [r8]
  40387c:	2a6c      	cmp	r2, #108	; 0x6c
  40387e:	bf03      	ittte	eq
  403880:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403884:	f043 0320 	orreq.w	r3, r3, #32
  403888:	f108 0801 	addeq.w	r8, r8, #1
  40388c:	f043 0310 	orrne.w	r3, r3, #16
  403890:	e576      	b.n	403380 <_vfiprintf_r+0xe4>
  403892:	bf00      	nop
  403894:	004054b4 	.word	0x004054b4
  403898:	004054c4 	.word	0x004054c4
  40389c:	00405498 	.word	0x00405498
  4038a0:	00405484 	.word	0x00405484
  4038a4:	9907      	ldr	r1, [sp, #28]
  4038a6:	680e      	ldr	r6, [r1, #0]
  4038a8:	460a      	mov	r2, r1
  4038aa:	2e00      	cmp	r6, #0
  4038ac:	f102 0204 	add.w	r2, r2, #4
  4038b0:	f6ff ae0f 	blt.w	4034d2 <_vfiprintf_r+0x236>
  4038b4:	9207      	str	r2, [sp, #28]
  4038b6:	f898 2000 	ldrb.w	r2, [r8]
  4038ba:	e561      	b.n	403380 <_vfiprintf_r+0xe4>
  4038bc:	f898 2000 	ldrb.w	r2, [r8]
  4038c0:	2001      	movs	r0, #1
  4038c2:	252b      	movs	r5, #43	; 0x2b
  4038c4:	e55c      	b.n	403380 <_vfiprintf_r+0xe4>
  4038c6:	9907      	ldr	r1, [sp, #28]
  4038c8:	9608      	str	r6, [sp, #32]
  4038ca:	f8d1 b000 	ldr.w	fp, [r1]
  4038ce:	f04f 0200 	mov.w	r2, #0
  4038d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4038d6:	1d0e      	adds	r6, r1, #4
  4038d8:	f1bb 0f00 	cmp.w	fp, #0
  4038dc:	f000 82e5 	beq.w	403eaa <_vfiprintf_r+0xc0e>
  4038e0:	1c67      	adds	r7, r4, #1
  4038e2:	f000 82c4 	beq.w	403e6e <_vfiprintf_r+0xbd2>
  4038e6:	4622      	mov	r2, r4
  4038e8:	2100      	movs	r1, #0
  4038ea:	4658      	mov	r0, fp
  4038ec:	9301      	str	r3, [sp, #4]
  4038ee:	f001 f91f 	bl	404b30 <memchr>
  4038f2:	9b01      	ldr	r3, [sp, #4]
  4038f4:	2800      	cmp	r0, #0
  4038f6:	f000 82e5 	beq.w	403ec4 <_vfiprintf_r+0xc28>
  4038fa:	eba0 020b 	sub.w	r2, r0, fp
  4038fe:	9205      	str	r2, [sp, #20]
  403900:	9607      	str	r6, [sp, #28]
  403902:	9302      	str	r3, [sp, #8]
  403904:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403908:	2400      	movs	r4, #0
  40390a:	e619      	b.n	403540 <_vfiprintf_r+0x2a4>
  40390c:	f898 2000 	ldrb.w	r2, [r8]
  403910:	2a2a      	cmp	r2, #42	; 0x2a
  403912:	f108 0701 	add.w	r7, r8, #1
  403916:	f000 82e9 	beq.w	403eec <_vfiprintf_r+0xc50>
  40391a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40391e:	2909      	cmp	r1, #9
  403920:	46b8      	mov	r8, r7
  403922:	f04f 0400 	mov.w	r4, #0
  403926:	f63f ad2d 	bhi.w	403384 <_vfiprintf_r+0xe8>
  40392a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40392e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403932:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403936:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40393a:	2909      	cmp	r1, #9
  40393c:	d9f5      	bls.n	40392a <_vfiprintf_r+0x68e>
  40393e:	e521      	b.n	403384 <_vfiprintf_r+0xe8>
  403940:	f043 0320 	orr.w	r3, r3, #32
  403944:	f898 2000 	ldrb.w	r2, [r8]
  403948:	e51a      	b.n	403380 <_vfiprintf_r+0xe4>
  40394a:	9608      	str	r6, [sp, #32]
  40394c:	2800      	cmp	r0, #0
  40394e:	f040 82db 	bne.w	403f08 <_vfiprintf_r+0xc6c>
  403952:	2a00      	cmp	r2, #0
  403954:	f000 80e7 	beq.w	403b26 <_vfiprintf_r+0x88a>
  403958:	2101      	movs	r1, #1
  40395a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40395e:	f04f 0200 	mov.w	r2, #0
  403962:	9101      	str	r1, [sp, #4]
  403964:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403968:	9105      	str	r1, [sp, #20]
  40396a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40396e:	e77b      	b.n	403868 <_vfiprintf_r+0x5cc>
  403970:	9a07      	ldr	r2, [sp, #28]
  403972:	6813      	ldr	r3, [r2, #0]
  403974:	3204      	adds	r2, #4
  403976:	9207      	str	r2, [sp, #28]
  403978:	9a03      	ldr	r2, [sp, #12]
  40397a:	601a      	str	r2, [r3, #0]
  40397c:	e4cb      	b.n	403316 <_vfiprintf_r+0x7a>
  40397e:	aa0f      	add	r2, sp, #60	; 0x3c
  403980:	9904      	ldr	r1, [sp, #16]
  403982:	4620      	mov	r0, r4
  403984:	f7ff fc4a 	bl	40321c <__sprint_r.part.0>
  403988:	2800      	cmp	r0, #0
  40398a:	f040 8139 	bne.w	403c00 <_vfiprintf_r+0x964>
  40398e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403990:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403992:	f101 0c01 	add.w	ip, r1, #1
  403996:	46ce      	mov	lr, r9
  403998:	e5ff      	b.n	40359a <_vfiprintf_r+0x2fe>
  40399a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40399c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40399e:	1c48      	adds	r0, r1, #1
  4039a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4039a4:	2d00      	cmp	r5, #0
  4039a6:	f43f ae22 	beq.w	4035ee <_vfiprintf_r+0x352>
  4039aa:	3201      	adds	r2, #1
  4039ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4039b0:	2101      	movs	r1, #1
  4039b2:	2807      	cmp	r0, #7
  4039b4:	9211      	str	r2, [sp, #68]	; 0x44
  4039b6:	9010      	str	r0, [sp, #64]	; 0x40
  4039b8:	f8ca 5000 	str.w	r5, [sl]
  4039bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4039c0:	f340 8108 	ble.w	403bd4 <_vfiprintf_r+0x938>
  4039c4:	2a00      	cmp	r2, #0
  4039c6:	f040 81bc 	bne.w	403d42 <_vfiprintf_r+0xaa6>
  4039ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039cc:	2b00      	cmp	r3, #0
  4039ce:	f43f ae1f 	beq.w	403610 <_vfiprintf_r+0x374>
  4039d2:	ab0e      	add	r3, sp, #56	; 0x38
  4039d4:	2202      	movs	r2, #2
  4039d6:	4608      	mov	r0, r1
  4039d8:	931c      	str	r3, [sp, #112]	; 0x70
  4039da:	921d      	str	r2, [sp, #116]	; 0x74
  4039dc:	46ca      	mov	sl, r9
  4039de:	4601      	mov	r1, r0
  4039e0:	f10a 0a08 	add.w	sl, sl, #8
  4039e4:	3001      	adds	r0, #1
  4039e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039e8:	2b80      	cmp	r3, #128	; 0x80
  4039ea:	f43f ae19 	beq.w	403620 <_vfiprintf_r+0x384>
  4039ee:	9b05      	ldr	r3, [sp, #20]
  4039f0:	1ae4      	subs	r4, r4, r3
  4039f2:	2c00      	cmp	r4, #0
  4039f4:	dd2e      	ble.n	403a54 <_vfiprintf_r+0x7b8>
  4039f6:	2c10      	cmp	r4, #16
  4039f8:	4db3      	ldr	r5, [pc, #716]	; (403cc8 <_vfiprintf_r+0xa2c>)
  4039fa:	dd1e      	ble.n	403a3a <_vfiprintf_r+0x79e>
  4039fc:	46d6      	mov	lr, sl
  4039fe:	2610      	movs	r6, #16
  403a00:	9f06      	ldr	r7, [sp, #24]
  403a02:	f8dd a010 	ldr.w	sl, [sp, #16]
  403a06:	e006      	b.n	403a16 <_vfiprintf_r+0x77a>
  403a08:	1c88      	adds	r0, r1, #2
  403a0a:	f10e 0e08 	add.w	lr, lr, #8
  403a0e:	4619      	mov	r1, r3
  403a10:	3c10      	subs	r4, #16
  403a12:	2c10      	cmp	r4, #16
  403a14:	dd10      	ble.n	403a38 <_vfiprintf_r+0x79c>
  403a16:	1c4b      	adds	r3, r1, #1
  403a18:	3210      	adds	r2, #16
  403a1a:	2b07      	cmp	r3, #7
  403a1c:	9211      	str	r2, [sp, #68]	; 0x44
  403a1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403a22:	9310      	str	r3, [sp, #64]	; 0x40
  403a24:	ddf0      	ble.n	403a08 <_vfiprintf_r+0x76c>
  403a26:	2a00      	cmp	r2, #0
  403a28:	d165      	bne.n	403af6 <_vfiprintf_r+0x85a>
  403a2a:	3c10      	subs	r4, #16
  403a2c:	2c10      	cmp	r4, #16
  403a2e:	f04f 0001 	mov.w	r0, #1
  403a32:	4611      	mov	r1, r2
  403a34:	46ce      	mov	lr, r9
  403a36:	dcee      	bgt.n	403a16 <_vfiprintf_r+0x77a>
  403a38:	46f2      	mov	sl, lr
  403a3a:	4422      	add	r2, r4
  403a3c:	2807      	cmp	r0, #7
  403a3e:	9211      	str	r2, [sp, #68]	; 0x44
  403a40:	f8ca 5000 	str.w	r5, [sl]
  403a44:	f8ca 4004 	str.w	r4, [sl, #4]
  403a48:	9010      	str	r0, [sp, #64]	; 0x40
  403a4a:	f300 8085 	bgt.w	403b58 <_vfiprintf_r+0x8bc>
  403a4e:	f10a 0a08 	add.w	sl, sl, #8
  403a52:	3001      	adds	r0, #1
  403a54:	9905      	ldr	r1, [sp, #20]
  403a56:	f8ca b000 	str.w	fp, [sl]
  403a5a:	440a      	add	r2, r1
  403a5c:	2807      	cmp	r0, #7
  403a5e:	9211      	str	r2, [sp, #68]	; 0x44
  403a60:	f8ca 1004 	str.w	r1, [sl, #4]
  403a64:	9010      	str	r0, [sp, #64]	; 0x40
  403a66:	f340 8082 	ble.w	403b6e <_vfiprintf_r+0x8d2>
  403a6a:	2a00      	cmp	r2, #0
  403a6c:	f040 8118 	bne.w	403ca0 <_vfiprintf_r+0xa04>
  403a70:	9b02      	ldr	r3, [sp, #8]
  403a72:	9210      	str	r2, [sp, #64]	; 0x40
  403a74:	0758      	lsls	r0, r3, #29
  403a76:	d535      	bpl.n	403ae4 <_vfiprintf_r+0x848>
  403a78:	9b08      	ldr	r3, [sp, #32]
  403a7a:	9901      	ldr	r1, [sp, #4]
  403a7c:	1a5c      	subs	r4, r3, r1
  403a7e:	2c00      	cmp	r4, #0
  403a80:	f340 80e7 	ble.w	403c52 <_vfiprintf_r+0x9b6>
  403a84:	46ca      	mov	sl, r9
  403a86:	2c10      	cmp	r4, #16
  403a88:	f340 8218 	ble.w	403ebc <_vfiprintf_r+0xc20>
  403a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a8e:	4e8f      	ldr	r6, [pc, #572]	; (403ccc <_vfiprintf_r+0xa30>)
  403a90:	9f06      	ldr	r7, [sp, #24]
  403a92:	f8dd b010 	ldr.w	fp, [sp, #16]
  403a96:	2510      	movs	r5, #16
  403a98:	e006      	b.n	403aa8 <_vfiprintf_r+0x80c>
  403a9a:	1c88      	adds	r0, r1, #2
  403a9c:	f10a 0a08 	add.w	sl, sl, #8
  403aa0:	4619      	mov	r1, r3
  403aa2:	3c10      	subs	r4, #16
  403aa4:	2c10      	cmp	r4, #16
  403aa6:	dd11      	ble.n	403acc <_vfiprintf_r+0x830>
  403aa8:	1c4b      	adds	r3, r1, #1
  403aaa:	3210      	adds	r2, #16
  403aac:	2b07      	cmp	r3, #7
  403aae:	9211      	str	r2, [sp, #68]	; 0x44
  403ab0:	f8ca 6000 	str.w	r6, [sl]
  403ab4:	f8ca 5004 	str.w	r5, [sl, #4]
  403ab8:	9310      	str	r3, [sp, #64]	; 0x40
  403aba:	ddee      	ble.n	403a9a <_vfiprintf_r+0x7fe>
  403abc:	bb42      	cbnz	r2, 403b10 <_vfiprintf_r+0x874>
  403abe:	3c10      	subs	r4, #16
  403ac0:	2c10      	cmp	r4, #16
  403ac2:	f04f 0001 	mov.w	r0, #1
  403ac6:	4611      	mov	r1, r2
  403ac8:	46ca      	mov	sl, r9
  403aca:	dced      	bgt.n	403aa8 <_vfiprintf_r+0x80c>
  403acc:	4422      	add	r2, r4
  403ace:	2807      	cmp	r0, #7
  403ad0:	9211      	str	r2, [sp, #68]	; 0x44
  403ad2:	f8ca 6000 	str.w	r6, [sl]
  403ad6:	f8ca 4004 	str.w	r4, [sl, #4]
  403ada:	9010      	str	r0, [sp, #64]	; 0x40
  403adc:	dd51      	ble.n	403b82 <_vfiprintf_r+0x8e6>
  403ade:	2a00      	cmp	r2, #0
  403ae0:	f040 819b 	bne.w	403e1a <_vfiprintf_r+0xb7e>
  403ae4:	9b03      	ldr	r3, [sp, #12]
  403ae6:	9a08      	ldr	r2, [sp, #32]
  403ae8:	9901      	ldr	r1, [sp, #4]
  403aea:	428a      	cmp	r2, r1
  403aec:	bfac      	ite	ge
  403aee:	189b      	addge	r3, r3, r2
  403af0:	185b      	addlt	r3, r3, r1
  403af2:	9303      	str	r3, [sp, #12]
  403af4:	e04e      	b.n	403b94 <_vfiprintf_r+0x8f8>
  403af6:	aa0f      	add	r2, sp, #60	; 0x3c
  403af8:	4651      	mov	r1, sl
  403afa:	4638      	mov	r0, r7
  403afc:	f7ff fb8e 	bl	40321c <__sprint_r.part.0>
  403b00:	2800      	cmp	r0, #0
  403b02:	f040 813f 	bne.w	403d84 <_vfiprintf_r+0xae8>
  403b06:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b0a:	1c48      	adds	r0, r1, #1
  403b0c:	46ce      	mov	lr, r9
  403b0e:	e77f      	b.n	403a10 <_vfiprintf_r+0x774>
  403b10:	aa0f      	add	r2, sp, #60	; 0x3c
  403b12:	4659      	mov	r1, fp
  403b14:	4638      	mov	r0, r7
  403b16:	f7ff fb81 	bl	40321c <__sprint_r.part.0>
  403b1a:	b960      	cbnz	r0, 403b36 <_vfiprintf_r+0x89a>
  403b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b20:	1c48      	adds	r0, r1, #1
  403b22:	46ca      	mov	sl, r9
  403b24:	e7bd      	b.n	403aa2 <_vfiprintf_r+0x806>
  403b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b28:	f8dd b010 	ldr.w	fp, [sp, #16]
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	f040 81d4 	bne.w	403eda <_vfiprintf_r+0xc3e>
  403b32:	2300      	movs	r3, #0
  403b34:	9310      	str	r3, [sp, #64]	; 0x40
  403b36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403b3a:	f013 0f01 	tst.w	r3, #1
  403b3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403b42:	d102      	bne.n	403b4a <_vfiprintf_r+0x8ae>
  403b44:	059a      	lsls	r2, r3, #22
  403b46:	f140 80de 	bpl.w	403d06 <_vfiprintf_r+0xa6a>
  403b4a:	065b      	lsls	r3, r3, #25
  403b4c:	f53f acb2 	bmi.w	4034b4 <_vfiprintf_r+0x218>
  403b50:	9803      	ldr	r0, [sp, #12]
  403b52:	b02d      	add	sp, #180	; 0xb4
  403b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b58:	2a00      	cmp	r2, #0
  403b5a:	f040 8106 	bne.w	403d6a <_vfiprintf_r+0xace>
  403b5e:	9a05      	ldr	r2, [sp, #20]
  403b60:	921d      	str	r2, [sp, #116]	; 0x74
  403b62:	2301      	movs	r3, #1
  403b64:	9211      	str	r2, [sp, #68]	; 0x44
  403b66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403b6a:	9310      	str	r3, [sp, #64]	; 0x40
  403b6c:	46ca      	mov	sl, r9
  403b6e:	f10a 0a08 	add.w	sl, sl, #8
  403b72:	9b02      	ldr	r3, [sp, #8]
  403b74:	0759      	lsls	r1, r3, #29
  403b76:	d504      	bpl.n	403b82 <_vfiprintf_r+0x8e6>
  403b78:	9b08      	ldr	r3, [sp, #32]
  403b7a:	9901      	ldr	r1, [sp, #4]
  403b7c:	1a5c      	subs	r4, r3, r1
  403b7e:	2c00      	cmp	r4, #0
  403b80:	dc81      	bgt.n	403a86 <_vfiprintf_r+0x7ea>
  403b82:	9b03      	ldr	r3, [sp, #12]
  403b84:	9908      	ldr	r1, [sp, #32]
  403b86:	9801      	ldr	r0, [sp, #4]
  403b88:	4281      	cmp	r1, r0
  403b8a:	bfac      	ite	ge
  403b8c:	185b      	addge	r3, r3, r1
  403b8e:	181b      	addlt	r3, r3, r0
  403b90:	9303      	str	r3, [sp, #12]
  403b92:	bb72      	cbnz	r2, 403bf2 <_vfiprintf_r+0x956>
  403b94:	2300      	movs	r3, #0
  403b96:	9310      	str	r3, [sp, #64]	; 0x40
  403b98:	46ca      	mov	sl, r9
  403b9a:	f7ff bbbc 	b.w	403316 <_vfiprintf_r+0x7a>
  403b9e:	aa0f      	add	r2, sp, #60	; 0x3c
  403ba0:	9904      	ldr	r1, [sp, #16]
  403ba2:	4620      	mov	r0, r4
  403ba4:	f7ff fb3a 	bl	40321c <__sprint_r.part.0>
  403ba8:	bb50      	cbnz	r0, 403c00 <_vfiprintf_r+0x964>
  403baa:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bae:	f101 0e01 	add.w	lr, r1, #1
  403bb2:	46cc      	mov	ip, r9
  403bb4:	e548      	b.n	403648 <_vfiprintf_r+0x3ac>
  403bb6:	2a00      	cmp	r2, #0
  403bb8:	f040 8140 	bne.w	403e3c <_vfiprintf_r+0xba0>
  403bbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403bc0:	2900      	cmp	r1, #0
  403bc2:	f000 811b 	beq.w	403dfc <_vfiprintf_r+0xb60>
  403bc6:	2201      	movs	r2, #1
  403bc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403bcc:	4610      	mov	r0, r2
  403bce:	921d      	str	r2, [sp, #116]	; 0x74
  403bd0:	911c      	str	r1, [sp, #112]	; 0x70
  403bd2:	46ca      	mov	sl, r9
  403bd4:	4601      	mov	r1, r0
  403bd6:	f10a 0a08 	add.w	sl, sl, #8
  403bda:	3001      	adds	r0, #1
  403bdc:	e507      	b.n	4035ee <_vfiprintf_r+0x352>
  403bde:	9b02      	ldr	r3, [sp, #8]
  403be0:	2a01      	cmp	r2, #1
  403be2:	f000 8098 	beq.w	403d16 <_vfiprintf_r+0xa7a>
  403be6:	2a02      	cmp	r2, #2
  403be8:	d10d      	bne.n	403c06 <_vfiprintf_r+0x96a>
  403bea:	9302      	str	r3, [sp, #8]
  403bec:	2600      	movs	r6, #0
  403bee:	2700      	movs	r7, #0
  403bf0:	e5b0      	b.n	403754 <_vfiprintf_r+0x4b8>
  403bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  403bf4:	9904      	ldr	r1, [sp, #16]
  403bf6:	9806      	ldr	r0, [sp, #24]
  403bf8:	f7ff fb10 	bl	40321c <__sprint_r.part.0>
  403bfc:	2800      	cmp	r0, #0
  403bfe:	d0c9      	beq.n	403b94 <_vfiprintf_r+0x8f8>
  403c00:	f8dd b010 	ldr.w	fp, [sp, #16]
  403c04:	e797      	b.n	403b36 <_vfiprintf_r+0x89a>
  403c06:	9302      	str	r3, [sp, #8]
  403c08:	2600      	movs	r6, #0
  403c0a:	2700      	movs	r7, #0
  403c0c:	4649      	mov	r1, r9
  403c0e:	e000      	b.n	403c12 <_vfiprintf_r+0x976>
  403c10:	4659      	mov	r1, fp
  403c12:	08f2      	lsrs	r2, r6, #3
  403c14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403c18:	08f8      	lsrs	r0, r7, #3
  403c1a:	f006 0307 	and.w	r3, r6, #7
  403c1e:	4607      	mov	r7, r0
  403c20:	4616      	mov	r6, r2
  403c22:	3330      	adds	r3, #48	; 0x30
  403c24:	ea56 0207 	orrs.w	r2, r6, r7
  403c28:	f801 3c01 	strb.w	r3, [r1, #-1]
  403c2c:	f101 3bff 	add.w	fp, r1, #4294967295
  403c30:	d1ee      	bne.n	403c10 <_vfiprintf_r+0x974>
  403c32:	9a02      	ldr	r2, [sp, #8]
  403c34:	07d6      	lsls	r6, r2, #31
  403c36:	f57f ad9d 	bpl.w	403774 <_vfiprintf_r+0x4d8>
  403c3a:	2b30      	cmp	r3, #48	; 0x30
  403c3c:	f43f ad9a 	beq.w	403774 <_vfiprintf_r+0x4d8>
  403c40:	3902      	subs	r1, #2
  403c42:	2330      	movs	r3, #48	; 0x30
  403c44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403c48:	eba9 0301 	sub.w	r3, r9, r1
  403c4c:	9305      	str	r3, [sp, #20]
  403c4e:	468b      	mov	fp, r1
  403c50:	e476      	b.n	403540 <_vfiprintf_r+0x2a4>
  403c52:	9b03      	ldr	r3, [sp, #12]
  403c54:	9a08      	ldr	r2, [sp, #32]
  403c56:	428a      	cmp	r2, r1
  403c58:	bfac      	ite	ge
  403c5a:	189b      	addge	r3, r3, r2
  403c5c:	185b      	addlt	r3, r3, r1
  403c5e:	9303      	str	r3, [sp, #12]
  403c60:	e798      	b.n	403b94 <_vfiprintf_r+0x8f8>
  403c62:	2202      	movs	r2, #2
  403c64:	e44d      	b.n	403502 <_vfiprintf_r+0x266>
  403c66:	2f00      	cmp	r7, #0
  403c68:	bf08      	it	eq
  403c6a:	2e0a      	cmpeq	r6, #10
  403c6c:	d352      	bcc.n	403d14 <_vfiprintf_r+0xa78>
  403c6e:	46cb      	mov	fp, r9
  403c70:	4630      	mov	r0, r6
  403c72:	4639      	mov	r1, r7
  403c74:	220a      	movs	r2, #10
  403c76:	2300      	movs	r3, #0
  403c78:	f7fe fc0e 	bl	402498 <__aeabi_uldivmod>
  403c7c:	3230      	adds	r2, #48	; 0x30
  403c7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403c82:	4630      	mov	r0, r6
  403c84:	4639      	mov	r1, r7
  403c86:	2300      	movs	r3, #0
  403c88:	220a      	movs	r2, #10
  403c8a:	f7fe fc05 	bl	402498 <__aeabi_uldivmod>
  403c8e:	4606      	mov	r6, r0
  403c90:	460f      	mov	r7, r1
  403c92:	ea56 0307 	orrs.w	r3, r6, r7
  403c96:	d1eb      	bne.n	403c70 <_vfiprintf_r+0x9d4>
  403c98:	e56c      	b.n	403774 <_vfiprintf_r+0x4d8>
  403c9a:	9405      	str	r4, [sp, #20]
  403c9c:	46cb      	mov	fp, r9
  403c9e:	e44f      	b.n	403540 <_vfiprintf_r+0x2a4>
  403ca0:	aa0f      	add	r2, sp, #60	; 0x3c
  403ca2:	9904      	ldr	r1, [sp, #16]
  403ca4:	9806      	ldr	r0, [sp, #24]
  403ca6:	f7ff fab9 	bl	40321c <__sprint_r.part.0>
  403caa:	2800      	cmp	r0, #0
  403cac:	d1a8      	bne.n	403c00 <_vfiprintf_r+0x964>
  403cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403cb0:	46ca      	mov	sl, r9
  403cb2:	e75e      	b.n	403b72 <_vfiprintf_r+0x8d6>
  403cb4:	aa0f      	add	r2, sp, #60	; 0x3c
  403cb6:	9904      	ldr	r1, [sp, #16]
  403cb8:	9806      	ldr	r0, [sp, #24]
  403cba:	f7ff faaf 	bl	40321c <__sprint_r.part.0>
  403cbe:	2800      	cmp	r0, #0
  403cc0:	d19e      	bne.n	403c00 <_vfiprintf_r+0x964>
  403cc2:	46ca      	mov	sl, r9
  403cc4:	f7ff bbc0 	b.w	403448 <_vfiprintf_r+0x1ac>
  403cc8:	004054c4 	.word	0x004054c4
  403ccc:	004054b4 	.word	0x004054b4
  403cd0:	3104      	adds	r1, #4
  403cd2:	6816      	ldr	r6, [r2, #0]
  403cd4:	9107      	str	r1, [sp, #28]
  403cd6:	2201      	movs	r2, #1
  403cd8:	2700      	movs	r7, #0
  403cda:	e412      	b.n	403502 <_vfiprintf_r+0x266>
  403cdc:	9807      	ldr	r0, [sp, #28]
  403cde:	4601      	mov	r1, r0
  403ce0:	3104      	adds	r1, #4
  403ce2:	6806      	ldr	r6, [r0, #0]
  403ce4:	9107      	str	r1, [sp, #28]
  403ce6:	2700      	movs	r7, #0
  403ce8:	e40b      	b.n	403502 <_vfiprintf_r+0x266>
  403cea:	680e      	ldr	r6, [r1, #0]
  403cec:	3104      	adds	r1, #4
  403cee:	9107      	str	r1, [sp, #28]
  403cf0:	2700      	movs	r7, #0
  403cf2:	e591      	b.n	403818 <_vfiprintf_r+0x57c>
  403cf4:	9907      	ldr	r1, [sp, #28]
  403cf6:	680e      	ldr	r6, [r1, #0]
  403cf8:	460a      	mov	r2, r1
  403cfa:	17f7      	asrs	r7, r6, #31
  403cfc:	3204      	adds	r2, #4
  403cfe:	9207      	str	r2, [sp, #28]
  403d00:	4630      	mov	r0, r6
  403d02:	4639      	mov	r1, r7
  403d04:	e50f      	b.n	403726 <_vfiprintf_r+0x48a>
  403d06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403d0a:	f000 fe7f 	bl	404a0c <__retarget_lock_release_recursive>
  403d0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403d12:	e71a      	b.n	403b4a <_vfiprintf_r+0x8ae>
  403d14:	9b02      	ldr	r3, [sp, #8]
  403d16:	9302      	str	r3, [sp, #8]
  403d18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403d1c:	3630      	adds	r6, #48	; 0x30
  403d1e:	2301      	movs	r3, #1
  403d20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403d24:	9305      	str	r3, [sp, #20]
  403d26:	e40b      	b.n	403540 <_vfiprintf_r+0x2a4>
  403d28:	aa0f      	add	r2, sp, #60	; 0x3c
  403d2a:	9904      	ldr	r1, [sp, #16]
  403d2c:	9806      	ldr	r0, [sp, #24]
  403d2e:	f7ff fa75 	bl	40321c <__sprint_r.part.0>
  403d32:	2800      	cmp	r0, #0
  403d34:	f47f af64 	bne.w	403c00 <_vfiprintf_r+0x964>
  403d38:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d3c:	1c48      	adds	r0, r1, #1
  403d3e:	46ca      	mov	sl, r9
  403d40:	e651      	b.n	4039e6 <_vfiprintf_r+0x74a>
  403d42:	aa0f      	add	r2, sp, #60	; 0x3c
  403d44:	9904      	ldr	r1, [sp, #16]
  403d46:	9806      	ldr	r0, [sp, #24]
  403d48:	f7ff fa68 	bl	40321c <__sprint_r.part.0>
  403d4c:	2800      	cmp	r0, #0
  403d4e:	f47f af57 	bne.w	403c00 <_vfiprintf_r+0x964>
  403d52:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d56:	1c48      	adds	r0, r1, #1
  403d58:	46ca      	mov	sl, r9
  403d5a:	e448      	b.n	4035ee <_vfiprintf_r+0x352>
  403d5c:	2a00      	cmp	r2, #0
  403d5e:	f040 8091 	bne.w	403e84 <_vfiprintf_r+0xbe8>
  403d62:	2001      	movs	r0, #1
  403d64:	4611      	mov	r1, r2
  403d66:	46ca      	mov	sl, r9
  403d68:	e641      	b.n	4039ee <_vfiprintf_r+0x752>
  403d6a:	aa0f      	add	r2, sp, #60	; 0x3c
  403d6c:	9904      	ldr	r1, [sp, #16]
  403d6e:	9806      	ldr	r0, [sp, #24]
  403d70:	f7ff fa54 	bl	40321c <__sprint_r.part.0>
  403d74:	2800      	cmp	r0, #0
  403d76:	f47f af43 	bne.w	403c00 <_vfiprintf_r+0x964>
  403d7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  403d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d7e:	3001      	adds	r0, #1
  403d80:	46ca      	mov	sl, r9
  403d82:	e667      	b.n	403a54 <_vfiprintf_r+0x7b8>
  403d84:	46d3      	mov	fp, sl
  403d86:	e6d6      	b.n	403b36 <_vfiprintf_r+0x89a>
  403d88:	9e07      	ldr	r6, [sp, #28]
  403d8a:	3607      	adds	r6, #7
  403d8c:	f026 0207 	bic.w	r2, r6, #7
  403d90:	f102 0108 	add.w	r1, r2, #8
  403d94:	e9d2 6700 	ldrd	r6, r7, [r2]
  403d98:	9107      	str	r1, [sp, #28]
  403d9a:	2201      	movs	r2, #1
  403d9c:	f7ff bbb1 	b.w	403502 <_vfiprintf_r+0x266>
  403da0:	9e07      	ldr	r6, [sp, #28]
  403da2:	3607      	adds	r6, #7
  403da4:	f026 0607 	bic.w	r6, r6, #7
  403da8:	e9d6 0100 	ldrd	r0, r1, [r6]
  403dac:	f106 0208 	add.w	r2, r6, #8
  403db0:	9207      	str	r2, [sp, #28]
  403db2:	4606      	mov	r6, r0
  403db4:	460f      	mov	r7, r1
  403db6:	e4b6      	b.n	403726 <_vfiprintf_r+0x48a>
  403db8:	9e07      	ldr	r6, [sp, #28]
  403dba:	3607      	adds	r6, #7
  403dbc:	f026 0207 	bic.w	r2, r6, #7
  403dc0:	f102 0108 	add.w	r1, r2, #8
  403dc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  403dc8:	9107      	str	r1, [sp, #28]
  403dca:	2200      	movs	r2, #0
  403dcc:	f7ff bb99 	b.w	403502 <_vfiprintf_r+0x266>
  403dd0:	9e07      	ldr	r6, [sp, #28]
  403dd2:	3607      	adds	r6, #7
  403dd4:	f026 0107 	bic.w	r1, r6, #7
  403dd8:	f101 0008 	add.w	r0, r1, #8
  403ddc:	9007      	str	r0, [sp, #28]
  403dde:	e9d1 6700 	ldrd	r6, r7, [r1]
  403de2:	e519      	b.n	403818 <_vfiprintf_r+0x57c>
  403de4:	46cb      	mov	fp, r9
  403de6:	f7ff bbab 	b.w	403540 <_vfiprintf_r+0x2a4>
  403dea:	252d      	movs	r5, #45	; 0x2d
  403dec:	4276      	negs	r6, r6
  403dee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403df2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403df6:	2201      	movs	r2, #1
  403df8:	f7ff bb88 	b.w	40350c <_vfiprintf_r+0x270>
  403dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403dfe:	b9b3      	cbnz	r3, 403e2e <_vfiprintf_r+0xb92>
  403e00:	4611      	mov	r1, r2
  403e02:	2001      	movs	r0, #1
  403e04:	46ca      	mov	sl, r9
  403e06:	e5f2      	b.n	4039ee <_vfiprintf_r+0x752>
  403e08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403e0c:	f000 fdfe 	bl	404a0c <__retarget_lock_release_recursive>
  403e10:	f04f 33ff 	mov.w	r3, #4294967295
  403e14:	9303      	str	r3, [sp, #12]
  403e16:	f7ff bb50 	b.w	4034ba <_vfiprintf_r+0x21e>
  403e1a:	aa0f      	add	r2, sp, #60	; 0x3c
  403e1c:	9904      	ldr	r1, [sp, #16]
  403e1e:	9806      	ldr	r0, [sp, #24]
  403e20:	f7ff f9fc 	bl	40321c <__sprint_r.part.0>
  403e24:	2800      	cmp	r0, #0
  403e26:	f47f aeeb 	bne.w	403c00 <_vfiprintf_r+0x964>
  403e2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e2c:	e6a9      	b.n	403b82 <_vfiprintf_r+0x8e6>
  403e2e:	ab0e      	add	r3, sp, #56	; 0x38
  403e30:	2202      	movs	r2, #2
  403e32:	931c      	str	r3, [sp, #112]	; 0x70
  403e34:	921d      	str	r2, [sp, #116]	; 0x74
  403e36:	2001      	movs	r0, #1
  403e38:	46ca      	mov	sl, r9
  403e3a:	e5d0      	b.n	4039de <_vfiprintf_r+0x742>
  403e3c:	aa0f      	add	r2, sp, #60	; 0x3c
  403e3e:	9904      	ldr	r1, [sp, #16]
  403e40:	9806      	ldr	r0, [sp, #24]
  403e42:	f7ff f9eb 	bl	40321c <__sprint_r.part.0>
  403e46:	2800      	cmp	r0, #0
  403e48:	f47f aeda 	bne.w	403c00 <_vfiprintf_r+0x964>
  403e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e50:	1c48      	adds	r0, r1, #1
  403e52:	46ca      	mov	sl, r9
  403e54:	e5a4      	b.n	4039a0 <_vfiprintf_r+0x704>
  403e56:	9a07      	ldr	r2, [sp, #28]
  403e58:	9903      	ldr	r1, [sp, #12]
  403e5a:	6813      	ldr	r3, [r2, #0]
  403e5c:	17cd      	asrs	r5, r1, #31
  403e5e:	4608      	mov	r0, r1
  403e60:	3204      	adds	r2, #4
  403e62:	4629      	mov	r1, r5
  403e64:	9207      	str	r2, [sp, #28]
  403e66:	e9c3 0100 	strd	r0, r1, [r3]
  403e6a:	f7ff ba54 	b.w	403316 <_vfiprintf_r+0x7a>
  403e6e:	4658      	mov	r0, fp
  403e70:	9607      	str	r6, [sp, #28]
  403e72:	9302      	str	r3, [sp, #8]
  403e74:	f7ff f964 	bl	403140 <strlen>
  403e78:	2400      	movs	r4, #0
  403e7a:	9005      	str	r0, [sp, #20]
  403e7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403e80:	f7ff bb5e 	b.w	403540 <_vfiprintf_r+0x2a4>
  403e84:	aa0f      	add	r2, sp, #60	; 0x3c
  403e86:	9904      	ldr	r1, [sp, #16]
  403e88:	9806      	ldr	r0, [sp, #24]
  403e8a:	f7ff f9c7 	bl	40321c <__sprint_r.part.0>
  403e8e:	2800      	cmp	r0, #0
  403e90:	f47f aeb6 	bne.w	403c00 <_vfiprintf_r+0x964>
  403e94:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e98:	1c48      	adds	r0, r1, #1
  403e9a:	46ca      	mov	sl, r9
  403e9c:	e5a7      	b.n	4039ee <_vfiprintf_r+0x752>
  403e9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ea2:	4e20      	ldr	r6, [pc, #128]	; (403f24 <_vfiprintf_r+0xc88>)
  403ea4:	3101      	adds	r1, #1
  403ea6:	f7ff bb90 	b.w	4035ca <_vfiprintf_r+0x32e>
  403eaa:	2c06      	cmp	r4, #6
  403eac:	bf28      	it	cs
  403eae:	2406      	movcs	r4, #6
  403eb0:	9405      	str	r4, [sp, #20]
  403eb2:	9607      	str	r6, [sp, #28]
  403eb4:	9401      	str	r4, [sp, #4]
  403eb6:	f8df b070 	ldr.w	fp, [pc, #112]	; 403f28 <_vfiprintf_r+0xc8c>
  403eba:	e4d5      	b.n	403868 <_vfiprintf_r+0x5cc>
  403ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
  403ebe:	4e19      	ldr	r6, [pc, #100]	; (403f24 <_vfiprintf_r+0xc88>)
  403ec0:	3001      	adds	r0, #1
  403ec2:	e603      	b.n	403acc <_vfiprintf_r+0x830>
  403ec4:	9405      	str	r4, [sp, #20]
  403ec6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403eca:	9607      	str	r6, [sp, #28]
  403ecc:	9302      	str	r3, [sp, #8]
  403ece:	4604      	mov	r4, r0
  403ed0:	f7ff bb36 	b.w	403540 <_vfiprintf_r+0x2a4>
  403ed4:	4686      	mov	lr, r0
  403ed6:	f7ff bbce 	b.w	403676 <_vfiprintf_r+0x3da>
  403eda:	9806      	ldr	r0, [sp, #24]
  403edc:	aa0f      	add	r2, sp, #60	; 0x3c
  403ede:	4659      	mov	r1, fp
  403ee0:	f7ff f99c 	bl	40321c <__sprint_r.part.0>
  403ee4:	2800      	cmp	r0, #0
  403ee6:	f43f ae24 	beq.w	403b32 <_vfiprintf_r+0x896>
  403eea:	e624      	b.n	403b36 <_vfiprintf_r+0x89a>
  403eec:	9907      	ldr	r1, [sp, #28]
  403eee:	f898 2001 	ldrb.w	r2, [r8, #1]
  403ef2:	680c      	ldr	r4, [r1, #0]
  403ef4:	3104      	adds	r1, #4
  403ef6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403efa:	46b8      	mov	r8, r7
  403efc:	9107      	str	r1, [sp, #28]
  403efe:	f7ff ba3f 	b.w	403380 <_vfiprintf_r+0xe4>
  403f02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f06:	e43c      	b.n	403782 <_vfiprintf_r+0x4e6>
  403f08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f0c:	e521      	b.n	403952 <_vfiprintf_r+0x6b6>
  403f0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f12:	f7ff bbf4 	b.w	4036fe <_vfiprintf_r+0x462>
  403f16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f1a:	e491      	b.n	403840 <_vfiprintf_r+0x5a4>
  403f1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f20:	e469      	b.n	4037f6 <_vfiprintf_r+0x55a>
  403f22:	bf00      	nop
  403f24:	004054b4 	.word	0x004054b4
  403f28:	004054ac 	.word	0x004054ac

00403f2c <__sbprintf>:
  403f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f30:	460c      	mov	r4, r1
  403f32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403f36:	8989      	ldrh	r1, [r1, #12]
  403f38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403f3a:	89e5      	ldrh	r5, [r4, #14]
  403f3c:	9619      	str	r6, [sp, #100]	; 0x64
  403f3e:	f021 0102 	bic.w	r1, r1, #2
  403f42:	4606      	mov	r6, r0
  403f44:	69e0      	ldr	r0, [r4, #28]
  403f46:	f8ad 100c 	strh.w	r1, [sp, #12]
  403f4a:	4617      	mov	r7, r2
  403f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403f52:	f8ad 500e 	strh.w	r5, [sp, #14]
  403f56:	4698      	mov	r8, r3
  403f58:	ad1a      	add	r5, sp, #104	; 0x68
  403f5a:	2300      	movs	r3, #0
  403f5c:	9007      	str	r0, [sp, #28]
  403f5e:	a816      	add	r0, sp, #88	; 0x58
  403f60:	9209      	str	r2, [sp, #36]	; 0x24
  403f62:	9306      	str	r3, [sp, #24]
  403f64:	9500      	str	r5, [sp, #0]
  403f66:	9504      	str	r5, [sp, #16]
  403f68:	9102      	str	r1, [sp, #8]
  403f6a:	9105      	str	r1, [sp, #20]
  403f6c:	f000 fd48 	bl	404a00 <__retarget_lock_init_recursive>
  403f70:	4643      	mov	r3, r8
  403f72:	463a      	mov	r2, r7
  403f74:	4669      	mov	r1, sp
  403f76:	4630      	mov	r0, r6
  403f78:	f7ff f990 	bl	40329c <_vfiprintf_r>
  403f7c:	1e05      	subs	r5, r0, #0
  403f7e:	db07      	blt.n	403f90 <__sbprintf+0x64>
  403f80:	4630      	mov	r0, r6
  403f82:	4669      	mov	r1, sp
  403f84:	f000 f928 	bl	4041d8 <_fflush_r>
  403f88:	2800      	cmp	r0, #0
  403f8a:	bf18      	it	ne
  403f8c:	f04f 35ff 	movne.w	r5, #4294967295
  403f90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403f94:	065b      	lsls	r3, r3, #25
  403f96:	d503      	bpl.n	403fa0 <__sbprintf+0x74>
  403f98:	89a3      	ldrh	r3, [r4, #12]
  403f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f9e:	81a3      	strh	r3, [r4, #12]
  403fa0:	9816      	ldr	r0, [sp, #88]	; 0x58
  403fa2:	f000 fd2f 	bl	404a04 <__retarget_lock_close_recursive>
  403fa6:	4628      	mov	r0, r5
  403fa8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403fb0 <__swsetup_r>:
  403fb0:	b538      	push	{r3, r4, r5, lr}
  403fb2:	4b30      	ldr	r3, [pc, #192]	; (404074 <__swsetup_r+0xc4>)
  403fb4:	681b      	ldr	r3, [r3, #0]
  403fb6:	4605      	mov	r5, r0
  403fb8:	460c      	mov	r4, r1
  403fba:	b113      	cbz	r3, 403fc2 <__swsetup_r+0x12>
  403fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403fbe:	2a00      	cmp	r2, #0
  403fc0:	d038      	beq.n	404034 <__swsetup_r+0x84>
  403fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403fc6:	b293      	uxth	r3, r2
  403fc8:	0718      	lsls	r0, r3, #28
  403fca:	d50c      	bpl.n	403fe6 <__swsetup_r+0x36>
  403fcc:	6920      	ldr	r0, [r4, #16]
  403fce:	b1a8      	cbz	r0, 403ffc <__swsetup_r+0x4c>
  403fd0:	f013 0201 	ands.w	r2, r3, #1
  403fd4:	d01e      	beq.n	404014 <__swsetup_r+0x64>
  403fd6:	6963      	ldr	r3, [r4, #20]
  403fd8:	2200      	movs	r2, #0
  403fda:	425b      	negs	r3, r3
  403fdc:	61a3      	str	r3, [r4, #24]
  403fde:	60a2      	str	r2, [r4, #8]
  403fe0:	b1f0      	cbz	r0, 404020 <__swsetup_r+0x70>
  403fe2:	2000      	movs	r0, #0
  403fe4:	bd38      	pop	{r3, r4, r5, pc}
  403fe6:	06d9      	lsls	r1, r3, #27
  403fe8:	d53c      	bpl.n	404064 <__swsetup_r+0xb4>
  403fea:	0758      	lsls	r0, r3, #29
  403fec:	d426      	bmi.n	40403c <__swsetup_r+0x8c>
  403fee:	6920      	ldr	r0, [r4, #16]
  403ff0:	f042 0308 	orr.w	r3, r2, #8
  403ff4:	81a3      	strh	r3, [r4, #12]
  403ff6:	b29b      	uxth	r3, r3
  403ff8:	2800      	cmp	r0, #0
  403ffa:	d1e9      	bne.n	403fd0 <__swsetup_r+0x20>
  403ffc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404000:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404004:	d0e4      	beq.n	403fd0 <__swsetup_r+0x20>
  404006:	4628      	mov	r0, r5
  404008:	4621      	mov	r1, r4
  40400a:	f000 fd2f 	bl	404a6c <__smakebuf_r>
  40400e:	89a3      	ldrh	r3, [r4, #12]
  404010:	6920      	ldr	r0, [r4, #16]
  404012:	e7dd      	b.n	403fd0 <__swsetup_r+0x20>
  404014:	0799      	lsls	r1, r3, #30
  404016:	bf58      	it	pl
  404018:	6962      	ldrpl	r2, [r4, #20]
  40401a:	60a2      	str	r2, [r4, #8]
  40401c:	2800      	cmp	r0, #0
  40401e:	d1e0      	bne.n	403fe2 <__swsetup_r+0x32>
  404020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404024:	061a      	lsls	r2, r3, #24
  404026:	d5dd      	bpl.n	403fe4 <__swsetup_r+0x34>
  404028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40402c:	81a3      	strh	r3, [r4, #12]
  40402e:	f04f 30ff 	mov.w	r0, #4294967295
  404032:	bd38      	pop	{r3, r4, r5, pc}
  404034:	4618      	mov	r0, r3
  404036:	f000 f927 	bl	404288 <__sinit>
  40403a:	e7c2      	b.n	403fc2 <__swsetup_r+0x12>
  40403c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40403e:	b151      	cbz	r1, 404056 <__swsetup_r+0xa6>
  404040:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404044:	4299      	cmp	r1, r3
  404046:	d004      	beq.n	404052 <__swsetup_r+0xa2>
  404048:	4628      	mov	r0, r5
  40404a:	f000 fa43 	bl	4044d4 <_free_r>
  40404e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404052:	2300      	movs	r3, #0
  404054:	6323      	str	r3, [r4, #48]	; 0x30
  404056:	2300      	movs	r3, #0
  404058:	6920      	ldr	r0, [r4, #16]
  40405a:	6063      	str	r3, [r4, #4]
  40405c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404060:	6020      	str	r0, [r4, #0]
  404062:	e7c5      	b.n	403ff0 <__swsetup_r+0x40>
  404064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404068:	2309      	movs	r3, #9
  40406a:	602b      	str	r3, [r5, #0]
  40406c:	f04f 30ff 	mov.w	r0, #4294967295
  404070:	81a2      	strh	r2, [r4, #12]
  404072:	bd38      	pop	{r3, r4, r5, pc}
  404074:	20400010 	.word	0x20400010

00404078 <register_fini>:
  404078:	4b02      	ldr	r3, [pc, #8]	; (404084 <register_fini+0xc>)
  40407a:	b113      	cbz	r3, 404082 <register_fini+0xa>
  40407c:	4802      	ldr	r0, [pc, #8]	; (404088 <register_fini+0x10>)
  40407e:	f000 b805 	b.w	40408c <atexit>
  404082:	4770      	bx	lr
  404084:	00000000 	.word	0x00000000
  404088:	004042f9 	.word	0x004042f9

0040408c <atexit>:
  40408c:	2300      	movs	r3, #0
  40408e:	4601      	mov	r1, r0
  404090:	461a      	mov	r2, r3
  404092:	4618      	mov	r0, r3
  404094:	f001 b890 	b.w	4051b8 <__register_exitproc>

00404098 <__sflush_r>:
  404098:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40409c:	b29a      	uxth	r2, r3
  40409e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040a2:	460d      	mov	r5, r1
  4040a4:	0711      	lsls	r1, r2, #28
  4040a6:	4680      	mov	r8, r0
  4040a8:	d43a      	bmi.n	404120 <__sflush_r+0x88>
  4040aa:	686a      	ldr	r2, [r5, #4]
  4040ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4040b0:	2a00      	cmp	r2, #0
  4040b2:	81ab      	strh	r3, [r5, #12]
  4040b4:	dd6f      	ble.n	404196 <__sflush_r+0xfe>
  4040b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4040b8:	2c00      	cmp	r4, #0
  4040ba:	d049      	beq.n	404150 <__sflush_r+0xb8>
  4040bc:	2200      	movs	r2, #0
  4040be:	b29b      	uxth	r3, r3
  4040c0:	f8d8 6000 	ldr.w	r6, [r8]
  4040c4:	f8c8 2000 	str.w	r2, [r8]
  4040c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4040cc:	d067      	beq.n	40419e <__sflush_r+0x106>
  4040ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4040d0:	075f      	lsls	r7, r3, #29
  4040d2:	d505      	bpl.n	4040e0 <__sflush_r+0x48>
  4040d4:	6869      	ldr	r1, [r5, #4]
  4040d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4040d8:	1a52      	subs	r2, r2, r1
  4040da:	b10b      	cbz	r3, 4040e0 <__sflush_r+0x48>
  4040dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4040de:	1ad2      	subs	r2, r2, r3
  4040e0:	2300      	movs	r3, #0
  4040e2:	69e9      	ldr	r1, [r5, #28]
  4040e4:	4640      	mov	r0, r8
  4040e6:	47a0      	blx	r4
  4040e8:	1c44      	adds	r4, r0, #1
  4040ea:	d03c      	beq.n	404166 <__sflush_r+0xce>
  4040ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4040f0:	692a      	ldr	r2, [r5, #16]
  4040f2:	602a      	str	r2, [r5, #0]
  4040f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4040f8:	2200      	movs	r2, #0
  4040fa:	81ab      	strh	r3, [r5, #12]
  4040fc:	04db      	lsls	r3, r3, #19
  4040fe:	606a      	str	r2, [r5, #4]
  404100:	d447      	bmi.n	404192 <__sflush_r+0xfa>
  404102:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404104:	f8c8 6000 	str.w	r6, [r8]
  404108:	b311      	cbz	r1, 404150 <__sflush_r+0xb8>
  40410a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40410e:	4299      	cmp	r1, r3
  404110:	d002      	beq.n	404118 <__sflush_r+0x80>
  404112:	4640      	mov	r0, r8
  404114:	f000 f9de 	bl	4044d4 <_free_r>
  404118:	2000      	movs	r0, #0
  40411a:	6328      	str	r0, [r5, #48]	; 0x30
  40411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404120:	692e      	ldr	r6, [r5, #16]
  404122:	b1ae      	cbz	r6, 404150 <__sflush_r+0xb8>
  404124:	682c      	ldr	r4, [r5, #0]
  404126:	602e      	str	r6, [r5, #0]
  404128:	0791      	lsls	r1, r2, #30
  40412a:	bf0c      	ite	eq
  40412c:	696b      	ldreq	r3, [r5, #20]
  40412e:	2300      	movne	r3, #0
  404130:	1ba4      	subs	r4, r4, r6
  404132:	60ab      	str	r3, [r5, #8]
  404134:	e00a      	b.n	40414c <__sflush_r+0xb4>
  404136:	4623      	mov	r3, r4
  404138:	4632      	mov	r2, r6
  40413a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40413c:	69e9      	ldr	r1, [r5, #28]
  40413e:	4640      	mov	r0, r8
  404140:	47b8      	blx	r7
  404142:	2800      	cmp	r0, #0
  404144:	eba4 0400 	sub.w	r4, r4, r0
  404148:	4406      	add	r6, r0
  40414a:	dd04      	ble.n	404156 <__sflush_r+0xbe>
  40414c:	2c00      	cmp	r4, #0
  40414e:	dcf2      	bgt.n	404136 <__sflush_r+0x9e>
  404150:	2000      	movs	r0, #0
  404152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404156:	89ab      	ldrh	r3, [r5, #12]
  404158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40415c:	81ab      	strh	r3, [r5, #12]
  40415e:	f04f 30ff 	mov.w	r0, #4294967295
  404162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404166:	f8d8 4000 	ldr.w	r4, [r8]
  40416a:	2c1d      	cmp	r4, #29
  40416c:	d8f3      	bhi.n	404156 <__sflush_r+0xbe>
  40416e:	4b19      	ldr	r3, [pc, #100]	; (4041d4 <__sflush_r+0x13c>)
  404170:	40e3      	lsrs	r3, r4
  404172:	43db      	mvns	r3, r3
  404174:	f013 0301 	ands.w	r3, r3, #1
  404178:	d1ed      	bne.n	404156 <__sflush_r+0xbe>
  40417a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40417e:	606b      	str	r3, [r5, #4]
  404180:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404184:	6929      	ldr	r1, [r5, #16]
  404186:	81ab      	strh	r3, [r5, #12]
  404188:	04da      	lsls	r2, r3, #19
  40418a:	6029      	str	r1, [r5, #0]
  40418c:	d5b9      	bpl.n	404102 <__sflush_r+0x6a>
  40418e:	2c00      	cmp	r4, #0
  404190:	d1b7      	bne.n	404102 <__sflush_r+0x6a>
  404192:	6528      	str	r0, [r5, #80]	; 0x50
  404194:	e7b5      	b.n	404102 <__sflush_r+0x6a>
  404196:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404198:	2a00      	cmp	r2, #0
  40419a:	dc8c      	bgt.n	4040b6 <__sflush_r+0x1e>
  40419c:	e7d8      	b.n	404150 <__sflush_r+0xb8>
  40419e:	2301      	movs	r3, #1
  4041a0:	69e9      	ldr	r1, [r5, #28]
  4041a2:	4640      	mov	r0, r8
  4041a4:	47a0      	blx	r4
  4041a6:	1c43      	adds	r3, r0, #1
  4041a8:	4602      	mov	r2, r0
  4041aa:	d002      	beq.n	4041b2 <__sflush_r+0x11a>
  4041ac:	89ab      	ldrh	r3, [r5, #12]
  4041ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4041b0:	e78e      	b.n	4040d0 <__sflush_r+0x38>
  4041b2:	f8d8 3000 	ldr.w	r3, [r8]
  4041b6:	2b00      	cmp	r3, #0
  4041b8:	d0f8      	beq.n	4041ac <__sflush_r+0x114>
  4041ba:	2b1d      	cmp	r3, #29
  4041bc:	d001      	beq.n	4041c2 <__sflush_r+0x12a>
  4041be:	2b16      	cmp	r3, #22
  4041c0:	d102      	bne.n	4041c8 <__sflush_r+0x130>
  4041c2:	f8c8 6000 	str.w	r6, [r8]
  4041c6:	e7c3      	b.n	404150 <__sflush_r+0xb8>
  4041c8:	89ab      	ldrh	r3, [r5, #12]
  4041ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041ce:	81ab      	strh	r3, [r5, #12]
  4041d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041d4:	20400001 	.word	0x20400001

004041d8 <_fflush_r>:
  4041d8:	b538      	push	{r3, r4, r5, lr}
  4041da:	460d      	mov	r5, r1
  4041dc:	4604      	mov	r4, r0
  4041de:	b108      	cbz	r0, 4041e4 <_fflush_r+0xc>
  4041e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4041e2:	b1bb      	cbz	r3, 404214 <_fflush_r+0x3c>
  4041e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4041e8:	b188      	cbz	r0, 40420e <_fflush_r+0x36>
  4041ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4041ec:	07db      	lsls	r3, r3, #31
  4041ee:	d401      	bmi.n	4041f4 <_fflush_r+0x1c>
  4041f0:	0581      	lsls	r1, r0, #22
  4041f2:	d517      	bpl.n	404224 <_fflush_r+0x4c>
  4041f4:	4620      	mov	r0, r4
  4041f6:	4629      	mov	r1, r5
  4041f8:	f7ff ff4e 	bl	404098 <__sflush_r>
  4041fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4041fe:	07da      	lsls	r2, r3, #31
  404200:	4604      	mov	r4, r0
  404202:	d402      	bmi.n	40420a <_fflush_r+0x32>
  404204:	89ab      	ldrh	r3, [r5, #12]
  404206:	059b      	lsls	r3, r3, #22
  404208:	d507      	bpl.n	40421a <_fflush_r+0x42>
  40420a:	4620      	mov	r0, r4
  40420c:	bd38      	pop	{r3, r4, r5, pc}
  40420e:	4604      	mov	r4, r0
  404210:	4620      	mov	r0, r4
  404212:	bd38      	pop	{r3, r4, r5, pc}
  404214:	f000 f838 	bl	404288 <__sinit>
  404218:	e7e4      	b.n	4041e4 <_fflush_r+0xc>
  40421a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40421c:	f000 fbf6 	bl	404a0c <__retarget_lock_release_recursive>
  404220:	4620      	mov	r0, r4
  404222:	bd38      	pop	{r3, r4, r5, pc}
  404224:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404226:	f000 fbef 	bl	404a08 <__retarget_lock_acquire_recursive>
  40422a:	e7e3      	b.n	4041f4 <_fflush_r+0x1c>

0040422c <_cleanup_r>:
  40422c:	4901      	ldr	r1, [pc, #4]	; (404234 <_cleanup_r+0x8>)
  40422e:	f000 bbaf 	b.w	404990 <_fwalk_reent>
  404232:	bf00      	nop
  404234:	004052a1 	.word	0x004052a1

00404238 <std.isra.0>:
  404238:	b510      	push	{r4, lr}
  40423a:	2300      	movs	r3, #0
  40423c:	4604      	mov	r4, r0
  40423e:	8181      	strh	r1, [r0, #12]
  404240:	81c2      	strh	r2, [r0, #14]
  404242:	6003      	str	r3, [r0, #0]
  404244:	6043      	str	r3, [r0, #4]
  404246:	6083      	str	r3, [r0, #8]
  404248:	6643      	str	r3, [r0, #100]	; 0x64
  40424a:	6103      	str	r3, [r0, #16]
  40424c:	6143      	str	r3, [r0, #20]
  40424e:	6183      	str	r3, [r0, #24]
  404250:	4619      	mov	r1, r3
  404252:	2208      	movs	r2, #8
  404254:	305c      	adds	r0, #92	; 0x5c
  404256:	f7fe fe35 	bl	402ec4 <memset>
  40425a:	4807      	ldr	r0, [pc, #28]	; (404278 <std.isra.0+0x40>)
  40425c:	4907      	ldr	r1, [pc, #28]	; (40427c <std.isra.0+0x44>)
  40425e:	4a08      	ldr	r2, [pc, #32]	; (404280 <std.isra.0+0x48>)
  404260:	4b08      	ldr	r3, [pc, #32]	; (404284 <std.isra.0+0x4c>)
  404262:	6220      	str	r0, [r4, #32]
  404264:	61e4      	str	r4, [r4, #28]
  404266:	6261      	str	r1, [r4, #36]	; 0x24
  404268:	62a2      	str	r2, [r4, #40]	; 0x28
  40426a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40426c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404274:	f000 bbc4 	b.w	404a00 <__retarget_lock_init_recursive>
  404278:	00404fe5 	.word	0x00404fe5
  40427c:	00405009 	.word	0x00405009
  404280:	00405045 	.word	0x00405045
  404284:	00405065 	.word	0x00405065

00404288 <__sinit>:
  404288:	b510      	push	{r4, lr}
  40428a:	4604      	mov	r4, r0
  40428c:	4812      	ldr	r0, [pc, #72]	; (4042d8 <__sinit+0x50>)
  40428e:	f000 fbbb 	bl	404a08 <__retarget_lock_acquire_recursive>
  404292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404294:	b9d2      	cbnz	r2, 4042cc <__sinit+0x44>
  404296:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40429a:	4810      	ldr	r0, [pc, #64]	; (4042dc <__sinit+0x54>)
  40429c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4042a0:	2103      	movs	r1, #3
  4042a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4042a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4042a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4042ac:	6860      	ldr	r0, [r4, #4]
  4042ae:	2104      	movs	r1, #4
  4042b0:	f7ff ffc2 	bl	404238 <std.isra.0>
  4042b4:	2201      	movs	r2, #1
  4042b6:	2109      	movs	r1, #9
  4042b8:	68a0      	ldr	r0, [r4, #8]
  4042ba:	f7ff ffbd 	bl	404238 <std.isra.0>
  4042be:	2202      	movs	r2, #2
  4042c0:	2112      	movs	r1, #18
  4042c2:	68e0      	ldr	r0, [r4, #12]
  4042c4:	f7ff ffb8 	bl	404238 <std.isra.0>
  4042c8:	2301      	movs	r3, #1
  4042ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4042cc:	4802      	ldr	r0, [pc, #8]	; (4042d8 <__sinit+0x50>)
  4042ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4042d2:	f000 bb9b 	b.w	404a0c <__retarget_lock_release_recursive>
  4042d6:	bf00      	nop
  4042d8:	20400d44 	.word	0x20400d44
  4042dc:	0040422d 	.word	0x0040422d

004042e0 <__sfp_lock_acquire>:
  4042e0:	4801      	ldr	r0, [pc, #4]	; (4042e8 <__sfp_lock_acquire+0x8>)
  4042e2:	f000 bb91 	b.w	404a08 <__retarget_lock_acquire_recursive>
  4042e6:	bf00      	nop
  4042e8:	20400d58 	.word	0x20400d58

004042ec <__sfp_lock_release>:
  4042ec:	4801      	ldr	r0, [pc, #4]	; (4042f4 <__sfp_lock_release+0x8>)
  4042ee:	f000 bb8d 	b.w	404a0c <__retarget_lock_release_recursive>
  4042f2:	bf00      	nop
  4042f4:	20400d58 	.word	0x20400d58

004042f8 <__libc_fini_array>:
  4042f8:	b538      	push	{r3, r4, r5, lr}
  4042fa:	4c0a      	ldr	r4, [pc, #40]	; (404324 <__libc_fini_array+0x2c>)
  4042fc:	4d0a      	ldr	r5, [pc, #40]	; (404328 <__libc_fini_array+0x30>)
  4042fe:	1b64      	subs	r4, r4, r5
  404300:	10a4      	asrs	r4, r4, #2
  404302:	d00a      	beq.n	40431a <__libc_fini_array+0x22>
  404304:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404308:	3b01      	subs	r3, #1
  40430a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40430e:	3c01      	subs	r4, #1
  404310:	f855 3904 	ldr.w	r3, [r5], #-4
  404314:	4798      	blx	r3
  404316:	2c00      	cmp	r4, #0
  404318:	d1f9      	bne.n	40430e <__libc_fini_array+0x16>
  40431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40431e:	f001 b96d 	b.w	4055fc <_fini>
  404322:	bf00      	nop
  404324:	0040560c 	.word	0x0040560c
  404328:	00405608 	.word	0x00405608

0040432c <__fputwc>:
  40432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404330:	b082      	sub	sp, #8
  404332:	4680      	mov	r8, r0
  404334:	4689      	mov	r9, r1
  404336:	4614      	mov	r4, r2
  404338:	f000 fb54 	bl	4049e4 <__locale_mb_cur_max>
  40433c:	2801      	cmp	r0, #1
  40433e:	d036      	beq.n	4043ae <__fputwc+0x82>
  404340:	464a      	mov	r2, r9
  404342:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404346:	a901      	add	r1, sp, #4
  404348:	4640      	mov	r0, r8
  40434a:	f000 fee7 	bl	40511c <_wcrtomb_r>
  40434e:	1c42      	adds	r2, r0, #1
  404350:	4606      	mov	r6, r0
  404352:	d025      	beq.n	4043a0 <__fputwc+0x74>
  404354:	b3a8      	cbz	r0, 4043c2 <__fputwc+0x96>
  404356:	f89d e004 	ldrb.w	lr, [sp, #4]
  40435a:	2500      	movs	r5, #0
  40435c:	f10d 0a04 	add.w	sl, sp, #4
  404360:	e009      	b.n	404376 <__fputwc+0x4a>
  404362:	6823      	ldr	r3, [r4, #0]
  404364:	1c5a      	adds	r2, r3, #1
  404366:	6022      	str	r2, [r4, #0]
  404368:	f883 e000 	strb.w	lr, [r3]
  40436c:	3501      	adds	r5, #1
  40436e:	42b5      	cmp	r5, r6
  404370:	d227      	bcs.n	4043c2 <__fputwc+0x96>
  404372:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404376:	68a3      	ldr	r3, [r4, #8]
  404378:	3b01      	subs	r3, #1
  40437a:	2b00      	cmp	r3, #0
  40437c:	60a3      	str	r3, [r4, #8]
  40437e:	daf0      	bge.n	404362 <__fputwc+0x36>
  404380:	69a7      	ldr	r7, [r4, #24]
  404382:	42bb      	cmp	r3, r7
  404384:	4671      	mov	r1, lr
  404386:	4622      	mov	r2, r4
  404388:	4640      	mov	r0, r8
  40438a:	db02      	blt.n	404392 <__fputwc+0x66>
  40438c:	f1be 0f0a 	cmp.w	lr, #10
  404390:	d1e7      	bne.n	404362 <__fputwc+0x36>
  404392:	f000 fe6b 	bl	40506c <__swbuf_r>
  404396:	1c43      	adds	r3, r0, #1
  404398:	d1e8      	bne.n	40436c <__fputwc+0x40>
  40439a:	b002      	add	sp, #8
  40439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043a0:	89a3      	ldrh	r3, [r4, #12]
  4043a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043a6:	81a3      	strh	r3, [r4, #12]
  4043a8:	b002      	add	sp, #8
  4043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4043b2:	2bfe      	cmp	r3, #254	; 0xfe
  4043b4:	d8c4      	bhi.n	404340 <__fputwc+0x14>
  4043b6:	fa5f fe89 	uxtb.w	lr, r9
  4043ba:	4606      	mov	r6, r0
  4043bc:	f88d e004 	strb.w	lr, [sp, #4]
  4043c0:	e7cb      	b.n	40435a <__fputwc+0x2e>
  4043c2:	4648      	mov	r0, r9
  4043c4:	b002      	add	sp, #8
  4043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043ca:	bf00      	nop

004043cc <_fputwc_r>:
  4043cc:	b530      	push	{r4, r5, lr}
  4043ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4043d0:	f013 0f01 	tst.w	r3, #1
  4043d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4043d8:	4614      	mov	r4, r2
  4043da:	b083      	sub	sp, #12
  4043dc:	4605      	mov	r5, r0
  4043de:	b29a      	uxth	r2, r3
  4043e0:	d101      	bne.n	4043e6 <_fputwc_r+0x1a>
  4043e2:	0590      	lsls	r0, r2, #22
  4043e4:	d51c      	bpl.n	404420 <_fputwc_r+0x54>
  4043e6:	0490      	lsls	r0, r2, #18
  4043e8:	d406      	bmi.n	4043f8 <_fputwc_r+0x2c>
  4043ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4043ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4043f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4043f4:	81a3      	strh	r3, [r4, #12]
  4043f6:	6662      	str	r2, [r4, #100]	; 0x64
  4043f8:	4628      	mov	r0, r5
  4043fa:	4622      	mov	r2, r4
  4043fc:	f7ff ff96 	bl	40432c <__fputwc>
  404400:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404402:	07da      	lsls	r2, r3, #31
  404404:	4605      	mov	r5, r0
  404406:	d402      	bmi.n	40440e <_fputwc_r+0x42>
  404408:	89a3      	ldrh	r3, [r4, #12]
  40440a:	059b      	lsls	r3, r3, #22
  40440c:	d502      	bpl.n	404414 <_fputwc_r+0x48>
  40440e:	4628      	mov	r0, r5
  404410:	b003      	add	sp, #12
  404412:	bd30      	pop	{r4, r5, pc}
  404414:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404416:	f000 faf9 	bl	404a0c <__retarget_lock_release_recursive>
  40441a:	4628      	mov	r0, r5
  40441c:	b003      	add	sp, #12
  40441e:	bd30      	pop	{r4, r5, pc}
  404420:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404422:	9101      	str	r1, [sp, #4]
  404424:	f000 faf0 	bl	404a08 <__retarget_lock_acquire_recursive>
  404428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40442c:	9901      	ldr	r1, [sp, #4]
  40442e:	b29a      	uxth	r2, r3
  404430:	e7d9      	b.n	4043e6 <_fputwc_r+0x1a>
  404432:	bf00      	nop

00404434 <_malloc_trim_r>:
  404434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404436:	4f24      	ldr	r7, [pc, #144]	; (4044c8 <_malloc_trim_r+0x94>)
  404438:	460c      	mov	r4, r1
  40443a:	4606      	mov	r6, r0
  40443c:	f7fe fd90 	bl	402f60 <__malloc_lock>
  404440:	68bb      	ldr	r3, [r7, #8]
  404442:	685d      	ldr	r5, [r3, #4]
  404444:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404448:	310f      	adds	r1, #15
  40444a:	f025 0503 	bic.w	r5, r5, #3
  40444e:	4429      	add	r1, r5
  404450:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404454:	f021 010f 	bic.w	r1, r1, #15
  404458:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40445c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404460:	db07      	blt.n	404472 <_malloc_trim_r+0x3e>
  404462:	2100      	movs	r1, #0
  404464:	4630      	mov	r0, r6
  404466:	f7fe fd87 	bl	402f78 <_sbrk_r>
  40446a:	68bb      	ldr	r3, [r7, #8]
  40446c:	442b      	add	r3, r5
  40446e:	4298      	cmp	r0, r3
  404470:	d004      	beq.n	40447c <_malloc_trim_r+0x48>
  404472:	4630      	mov	r0, r6
  404474:	f7fe fd7a 	bl	402f6c <__malloc_unlock>
  404478:	2000      	movs	r0, #0
  40447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40447c:	4261      	negs	r1, r4
  40447e:	4630      	mov	r0, r6
  404480:	f7fe fd7a 	bl	402f78 <_sbrk_r>
  404484:	3001      	adds	r0, #1
  404486:	d00d      	beq.n	4044a4 <_malloc_trim_r+0x70>
  404488:	4b10      	ldr	r3, [pc, #64]	; (4044cc <_malloc_trim_r+0x98>)
  40448a:	68ba      	ldr	r2, [r7, #8]
  40448c:	6819      	ldr	r1, [r3, #0]
  40448e:	1b2d      	subs	r5, r5, r4
  404490:	f045 0501 	orr.w	r5, r5, #1
  404494:	4630      	mov	r0, r6
  404496:	1b09      	subs	r1, r1, r4
  404498:	6055      	str	r5, [r2, #4]
  40449a:	6019      	str	r1, [r3, #0]
  40449c:	f7fe fd66 	bl	402f6c <__malloc_unlock>
  4044a0:	2001      	movs	r0, #1
  4044a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044a4:	2100      	movs	r1, #0
  4044a6:	4630      	mov	r0, r6
  4044a8:	f7fe fd66 	bl	402f78 <_sbrk_r>
  4044ac:	68ba      	ldr	r2, [r7, #8]
  4044ae:	1a83      	subs	r3, r0, r2
  4044b0:	2b0f      	cmp	r3, #15
  4044b2:	ddde      	ble.n	404472 <_malloc_trim_r+0x3e>
  4044b4:	4c06      	ldr	r4, [pc, #24]	; (4044d0 <_malloc_trim_r+0x9c>)
  4044b6:	4905      	ldr	r1, [pc, #20]	; (4044cc <_malloc_trim_r+0x98>)
  4044b8:	6824      	ldr	r4, [r4, #0]
  4044ba:	f043 0301 	orr.w	r3, r3, #1
  4044be:	1b00      	subs	r0, r0, r4
  4044c0:	6053      	str	r3, [r2, #4]
  4044c2:	6008      	str	r0, [r1, #0]
  4044c4:	e7d5      	b.n	404472 <_malloc_trim_r+0x3e>
  4044c6:	bf00      	nop
  4044c8:	20400440 	.word	0x20400440
  4044cc:	20400cf8 	.word	0x20400cf8
  4044d0:	20400848 	.word	0x20400848

004044d4 <_free_r>:
  4044d4:	2900      	cmp	r1, #0
  4044d6:	d044      	beq.n	404562 <_free_r+0x8e>
  4044d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044dc:	460d      	mov	r5, r1
  4044de:	4680      	mov	r8, r0
  4044e0:	f7fe fd3e 	bl	402f60 <__malloc_lock>
  4044e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4044e8:	4969      	ldr	r1, [pc, #420]	; (404690 <_free_r+0x1bc>)
  4044ea:	f027 0301 	bic.w	r3, r7, #1
  4044ee:	f1a5 0408 	sub.w	r4, r5, #8
  4044f2:	18e2      	adds	r2, r4, r3
  4044f4:	688e      	ldr	r6, [r1, #8]
  4044f6:	6850      	ldr	r0, [r2, #4]
  4044f8:	42b2      	cmp	r2, r6
  4044fa:	f020 0003 	bic.w	r0, r0, #3
  4044fe:	d05e      	beq.n	4045be <_free_r+0xea>
  404500:	07fe      	lsls	r6, r7, #31
  404502:	6050      	str	r0, [r2, #4]
  404504:	d40b      	bmi.n	40451e <_free_r+0x4a>
  404506:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40450a:	1be4      	subs	r4, r4, r7
  40450c:	f101 0e08 	add.w	lr, r1, #8
  404510:	68a5      	ldr	r5, [r4, #8]
  404512:	4575      	cmp	r5, lr
  404514:	443b      	add	r3, r7
  404516:	d06d      	beq.n	4045f4 <_free_r+0x120>
  404518:	68e7      	ldr	r7, [r4, #12]
  40451a:	60ef      	str	r7, [r5, #12]
  40451c:	60bd      	str	r5, [r7, #8]
  40451e:	1815      	adds	r5, r2, r0
  404520:	686d      	ldr	r5, [r5, #4]
  404522:	07ed      	lsls	r5, r5, #31
  404524:	d53e      	bpl.n	4045a4 <_free_r+0xd0>
  404526:	f043 0201 	orr.w	r2, r3, #1
  40452a:	6062      	str	r2, [r4, #4]
  40452c:	50e3      	str	r3, [r4, r3]
  40452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404532:	d217      	bcs.n	404564 <_free_r+0x90>
  404534:	08db      	lsrs	r3, r3, #3
  404536:	1c58      	adds	r0, r3, #1
  404538:	109a      	asrs	r2, r3, #2
  40453a:	684d      	ldr	r5, [r1, #4]
  40453c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404540:	60a7      	str	r7, [r4, #8]
  404542:	2301      	movs	r3, #1
  404544:	4093      	lsls	r3, r2
  404546:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40454a:	432b      	orrs	r3, r5
  40454c:	3a08      	subs	r2, #8
  40454e:	60e2      	str	r2, [r4, #12]
  404550:	604b      	str	r3, [r1, #4]
  404552:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404556:	60fc      	str	r4, [r7, #12]
  404558:	4640      	mov	r0, r8
  40455a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40455e:	f7fe bd05 	b.w	402f6c <__malloc_unlock>
  404562:	4770      	bx	lr
  404564:	0a5a      	lsrs	r2, r3, #9
  404566:	2a04      	cmp	r2, #4
  404568:	d852      	bhi.n	404610 <_free_r+0x13c>
  40456a:	099a      	lsrs	r2, r3, #6
  40456c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404570:	00ff      	lsls	r7, r7, #3
  404572:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404576:	19c8      	adds	r0, r1, r7
  404578:	59ca      	ldr	r2, [r1, r7]
  40457a:	3808      	subs	r0, #8
  40457c:	4290      	cmp	r0, r2
  40457e:	d04f      	beq.n	404620 <_free_r+0x14c>
  404580:	6851      	ldr	r1, [r2, #4]
  404582:	f021 0103 	bic.w	r1, r1, #3
  404586:	428b      	cmp	r3, r1
  404588:	d232      	bcs.n	4045f0 <_free_r+0x11c>
  40458a:	6892      	ldr	r2, [r2, #8]
  40458c:	4290      	cmp	r0, r2
  40458e:	d1f7      	bne.n	404580 <_free_r+0xac>
  404590:	68c3      	ldr	r3, [r0, #12]
  404592:	60a0      	str	r0, [r4, #8]
  404594:	60e3      	str	r3, [r4, #12]
  404596:	609c      	str	r4, [r3, #8]
  404598:	60c4      	str	r4, [r0, #12]
  40459a:	4640      	mov	r0, r8
  40459c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4045a0:	f7fe bce4 	b.w	402f6c <__malloc_unlock>
  4045a4:	6895      	ldr	r5, [r2, #8]
  4045a6:	4f3b      	ldr	r7, [pc, #236]	; (404694 <_free_r+0x1c0>)
  4045a8:	42bd      	cmp	r5, r7
  4045aa:	4403      	add	r3, r0
  4045ac:	d040      	beq.n	404630 <_free_r+0x15c>
  4045ae:	68d0      	ldr	r0, [r2, #12]
  4045b0:	60e8      	str	r0, [r5, #12]
  4045b2:	f043 0201 	orr.w	r2, r3, #1
  4045b6:	6085      	str	r5, [r0, #8]
  4045b8:	6062      	str	r2, [r4, #4]
  4045ba:	50e3      	str	r3, [r4, r3]
  4045bc:	e7b7      	b.n	40452e <_free_r+0x5a>
  4045be:	07ff      	lsls	r7, r7, #31
  4045c0:	4403      	add	r3, r0
  4045c2:	d407      	bmi.n	4045d4 <_free_r+0x100>
  4045c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4045c8:	1aa4      	subs	r4, r4, r2
  4045ca:	4413      	add	r3, r2
  4045cc:	68a0      	ldr	r0, [r4, #8]
  4045ce:	68e2      	ldr	r2, [r4, #12]
  4045d0:	60c2      	str	r2, [r0, #12]
  4045d2:	6090      	str	r0, [r2, #8]
  4045d4:	4a30      	ldr	r2, [pc, #192]	; (404698 <_free_r+0x1c4>)
  4045d6:	6812      	ldr	r2, [r2, #0]
  4045d8:	f043 0001 	orr.w	r0, r3, #1
  4045dc:	4293      	cmp	r3, r2
  4045de:	6060      	str	r0, [r4, #4]
  4045e0:	608c      	str	r4, [r1, #8]
  4045e2:	d3b9      	bcc.n	404558 <_free_r+0x84>
  4045e4:	4b2d      	ldr	r3, [pc, #180]	; (40469c <_free_r+0x1c8>)
  4045e6:	4640      	mov	r0, r8
  4045e8:	6819      	ldr	r1, [r3, #0]
  4045ea:	f7ff ff23 	bl	404434 <_malloc_trim_r>
  4045ee:	e7b3      	b.n	404558 <_free_r+0x84>
  4045f0:	4610      	mov	r0, r2
  4045f2:	e7cd      	b.n	404590 <_free_r+0xbc>
  4045f4:	1811      	adds	r1, r2, r0
  4045f6:	6849      	ldr	r1, [r1, #4]
  4045f8:	07c9      	lsls	r1, r1, #31
  4045fa:	d444      	bmi.n	404686 <_free_r+0x1b2>
  4045fc:	6891      	ldr	r1, [r2, #8]
  4045fe:	68d2      	ldr	r2, [r2, #12]
  404600:	60ca      	str	r2, [r1, #12]
  404602:	4403      	add	r3, r0
  404604:	f043 0001 	orr.w	r0, r3, #1
  404608:	6091      	str	r1, [r2, #8]
  40460a:	6060      	str	r0, [r4, #4]
  40460c:	50e3      	str	r3, [r4, r3]
  40460e:	e7a3      	b.n	404558 <_free_r+0x84>
  404610:	2a14      	cmp	r2, #20
  404612:	d816      	bhi.n	404642 <_free_r+0x16e>
  404614:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404618:	00ff      	lsls	r7, r7, #3
  40461a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40461e:	e7aa      	b.n	404576 <_free_r+0xa2>
  404620:	10aa      	asrs	r2, r5, #2
  404622:	2301      	movs	r3, #1
  404624:	684d      	ldr	r5, [r1, #4]
  404626:	4093      	lsls	r3, r2
  404628:	432b      	orrs	r3, r5
  40462a:	604b      	str	r3, [r1, #4]
  40462c:	4603      	mov	r3, r0
  40462e:	e7b0      	b.n	404592 <_free_r+0xbe>
  404630:	f043 0201 	orr.w	r2, r3, #1
  404634:	614c      	str	r4, [r1, #20]
  404636:	610c      	str	r4, [r1, #16]
  404638:	60e5      	str	r5, [r4, #12]
  40463a:	60a5      	str	r5, [r4, #8]
  40463c:	6062      	str	r2, [r4, #4]
  40463e:	50e3      	str	r3, [r4, r3]
  404640:	e78a      	b.n	404558 <_free_r+0x84>
  404642:	2a54      	cmp	r2, #84	; 0x54
  404644:	d806      	bhi.n	404654 <_free_r+0x180>
  404646:	0b1a      	lsrs	r2, r3, #12
  404648:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40464c:	00ff      	lsls	r7, r7, #3
  40464e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404652:	e790      	b.n	404576 <_free_r+0xa2>
  404654:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404658:	d806      	bhi.n	404668 <_free_r+0x194>
  40465a:	0bda      	lsrs	r2, r3, #15
  40465c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404660:	00ff      	lsls	r7, r7, #3
  404662:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404666:	e786      	b.n	404576 <_free_r+0xa2>
  404668:	f240 5054 	movw	r0, #1364	; 0x554
  40466c:	4282      	cmp	r2, r0
  40466e:	d806      	bhi.n	40467e <_free_r+0x1aa>
  404670:	0c9a      	lsrs	r2, r3, #18
  404672:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404676:	00ff      	lsls	r7, r7, #3
  404678:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40467c:	e77b      	b.n	404576 <_free_r+0xa2>
  40467e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404682:	257e      	movs	r5, #126	; 0x7e
  404684:	e777      	b.n	404576 <_free_r+0xa2>
  404686:	f043 0101 	orr.w	r1, r3, #1
  40468a:	6061      	str	r1, [r4, #4]
  40468c:	6013      	str	r3, [r2, #0]
  40468e:	e763      	b.n	404558 <_free_r+0x84>
  404690:	20400440 	.word	0x20400440
  404694:	20400448 	.word	0x20400448
  404698:	2040084c 	.word	0x2040084c
  40469c:	20400d28 	.word	0x20400d28

004046a0 <__sfvwrite_r>:
  4046a0:	6893      	ldr	r3, [r2, #8]
  4046a2:	2b00      	cmp	r3, #0
  4046a4:	d073      	beq.n	40478e <__sfvwrite_r+0xee>
  4046a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046aa:	898b      	ldrh	r3, [r1, #12]
  4046ac:	b083      	sub	sp, #12
  4046ae:	460c      	mov	r4, r1
  4046b0:	0719      	lsls	r1, r3, #28
  4046b2:	9000      	str	r0, [sp, #0]
  4046b4:	4616      	mov	r6, r2
  4046b6:	d526      	bpl.n	404706 <__sfvwrite_r+0x66>
  4046b8:	6922      	ldr	r2, [r4, #16]
  4046ba:	b322      	cbz	r2, 404706 <__sfvwrite_r+0x66>
  4046bc:	f013 0002 	ands.w	r0, r3, #2
  4046c0:	6835      	ldr	r5, [r6, #0]
  4046c2:	d02c      	beq.n	40471e <__sfvwrite_r+0x7e>
  4046c4:	f04f 0900 	mov.w	r9, #0
  4046c8:	4fb0      	ldr	r7, [pc, #704]	; (40498c <__sfvwrite_r+0x2ec>)
  4046ca:	46c8      	mov	r8, r9
  4046cc:	46b2      	mov	sl, r6
  4046ce:	45b8      	cmp	r8, r7
  4046d0:	4643      	mov	r3, r8
  4046d2:	464a      	mov	r2, r9
  4046d4:	bf28      	it	cs
  4046d6:	463b      	movcs	r3, r7
  4046d8:	9800      	ldr	r0, [sp, #0]
  4046da:	f1b8 0f00 	cmp.w	r8, #0
  4046de:	d050      	beq.n	404782 <__sfvwrite_r+0xe2>
  4046e0:	69e1      	ldr	r1, [r4, #28]
  4046e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4046e4:	47b0      	blx	r6
  4046e6:	2800      	cmp	r0, #0
  4046e8:	dd58      	ble.n	40479c <__sfvwrite_r+0xfc>
  4046ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4046ee:	1a1b      	subs	r3, r3, r0
  4046f0:	4481      	add	r9, r0
  4046f2:	eba8 0800 	sub.w	r8, r8, r0
  4046f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	d1e7      	bne.n	4046ce <__sfvwrite_r+0x2e>
  4046fe:	2000      	movs	r0, #0
  404700:	b003      	add	sp, #12
  404702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404706:	4621      	mov	r1, r4
  404708:	9800      	ldr	r0, [sp, #0]
  40470a:	f7ff fc51 	bl	403fb0 <__swsetup_r>
  40470e:	2800      	cmp	r0, #0
  404710:	f040 8133 	bne.w	40497a <__sfvwrite_r+0x2da>
  404714:	89a3      	ldrh	r3, [r4, #12]
  404716:	6835      	ldr	r5, [r6, #0]
  404718:	f013 0002 	ands.w	r0, r3, #2
  40471c:	d1d2      	bne.n	4046c4 <__sfvwrite_r+0x24>
  40471e:	f013 0901 	ands.w	r9, r3, #1
  404722:	d145      	bne.n	4047b0 <__sfvwrite_r+0x110>
  404724:	464f      	mov	r7, r9
  404726:	9601      	str	r6, [sp, #4]
  404728:	b337      	cbz	r7, 404778 <__sfvwrite_r+0xd8>
  40472a:	059a      	lsls	r2, r3, #22
  40472c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404730:	f140 8083 	bpl.w	40483a <__sfvwrite_r+0x19a>
  404734:	4547      	cmp	r7, r8
  404736:	46c3      	mov	fp, r8
  404738:	f0c0 80ab 	bcc.w	404892 <__sfvwrite_r+0x1f2>
  40473c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404740:	f040 80ac 	bne.w	40489c <__sfvwrite_r+0x1fc>
  404744:	6820      	ldr	r0, [r4, #0]
  404746:	46ba      	mov	sl, r7
  404748:	465a      	mov	r2, fp
  40474a:	4649      	mov	r1, r9
  40474c:	f000 fa40 	bl	404bd0 <memmove>
  404750:	68a2      	ldr	r2, [r4, #8]
  404752:	6823      	ldr	r3, [r4, #0]
  404754:	eba2 0208 	sub.w	r2, r2, r8
  404758:	445b      	add	r3, fp
  40475a:	60a2      	str	r2, [r4, #8]
  40475c:	6023      	str	r3, [r4, #0]
  40475e:	9a01      	ldr	r2, [sp, #4]
  404760:	6893      	ldr	r3, [r2, #8]
  404762:	eba3 030a 	sub.w	r3, r3, sl
  404766:	44d1      	add	r9, sl
  404768:	eba7 070a 	sub.w	r7, r7, sl
  40476c:	6093      	str	r3, [r2, #8]
  40476e:	2b00      	cmp	r3, #0
  404770:	d0c5      	beq.n	4046fe <__sfvwrite_r+0x5e>
  404772:	89a3      	ldrh	r3, [r4, #12]
  404774:	2f00      	cmp	r7, #0
  404776:	d1d8      	bne.n	40472a <__sfvwrite_r+0x8a>
  404778:	f8d5 9000 	ldr.w	r9, [r5]
  40477c:	686f      	ldr	r7, [r5, #4]
  40477e:	3508      	adds	r5, #8
  404780:	e7d2      	b.n	404728 <__sfvwrite_r+0x88>
  404782:	f8d5 9000 	ldr.w	r9, [r5]
  404786:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40478a:	3508      	adds	r5, #8
  40478c:	e79f      	b.n	4046ce <__sfvwrite_r+0x2e>
  40478e:	2000      	movs	r0, #0
  404790:	4770      	bx	lr
  404792:	4621      	mov	r1, r4
  404794:	9800      	ldr	r0, [sp, #0]
  404796:	f7ff fd1f 	bl	4041d8 <_fflush_r>
  40479a:	b370      	cbz	r0, 4047fa <__sfvwrite_r+0x15a>
  40479c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047a4:	f04f 30ff 	mov.w	r0, #4294967295
  4047a8:	81a3      	strh	r3, [r4, #12]
  4047aa:	b003      	add	sp, #12
  4047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047b0:	4681      	mov	r9, r0
  4047b2:	4633      	mov	r3, r6
  4047b4:	464e      	mov	r6, r9
  4047b6:	46a8      	mov	r8, r5
  4047b8:	469a      	mov	sl, r3
  4047ba:	464d      	mov	r5, r9
  4047bc:	b34e      	cbz	r6, 404812 <__sfvwrite_r+0x172>
  4047be:	b380      	cbz	r0, 404822 <__sfvwrite_r+0x182>
  4047c0:	6820      	ldr	r0, [r4, #0]
  4047c2:	6923      	ldr	r3, [r4, #16]
  4047c4:	6962      	ldr	r2, [r4, #20]
  4047c6:	45b1      	cmp	r9, r6
  4047c8:	46cb      	mov	fp, r9
  4047ca:	bf28      	it	cs
  4047cc:	46b3      	movcs	fp, r6
  4047ce:	4298      	cmp	r0, r3
  4047d0:	465f      	mov	r7, fp
  4047d2:	d904      	bls.n	4047de <__sfvwrite_r+0x13e>
  4047d4:	68a3      	ldr	r3, [r4, #8]
  4047d6:	4413      	add	r3, r2
  4047d8:	459b      	cmp	fp, r3
  4047da:	f300 80a6 	bgt.w	40492a <__sfvwrite_r+0x28a>
  4047de:	4593      	cmp	fp, r2
  4047e0:	db4b      	blt.n	40487a <__sfvwrite_r+0x1da>
  4047e2:	4613      	mov	r3, r2
  4047e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4047e6:	69e1      	ldr	r1, [r4, #28]
  4047e8:	9800      	ldr	r0, [sp, #0]
  4047ea:	462a      	mov	r2, r5
  4047ec:	47b8      	blx	r7
  4047ee:	1e07      	subs	r7, r0, #0
  4047f0:	ddd4      	ble.n	40479c <__sfvwrite_r+0xfc>
  4047f2:	ebb9 0907 	subs.w	r9, r9, r7
  4047f6:	d0cc      	beq.n	404792 <__sfvwrite_r+0xf2>
  4047f8:	2001      	movs	r0, #1
  4047fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4047fe:	1bdb      	subs	r3, r3, r7
  404800:	443d      	add	r5, r7
  404802:	1bf6      	subs	r6, r6, r7
  404804:	f8ca 3008 	str.w	r3, [sl, #8]
  404808:	2b00      	cmp	r3, #0
  40480a:	f43f af78 	beq.w	4046fe <__sfvwrite_r+0x5e>
  40480e:	2e00      	cmp	r6, #0
  404810:	d1d5      	bne.n	4047be <__sfvwrite_r+0x11e>
  404812:	f108 0308 	add.w	r3, r8, #8
  404816:	e913 0060 	ldmdb	r3, {r5, r6}
  40481a:	4698      	mov	r8, r3
  40481c:	3308      	adds	r3, #8
  40481e:	2e00      	cmp	r6, #0
  404820:	d0f9      	beq.n	404816 <__sfvwrite_r+0x176>
  404822:	4632      	mov	r2, r6
  404824:	210a      	movs	r1, #10
  404826:	4628      	mov	r0, r5
  404828:	f000 f982 	bl	404b30 <memchr>
  40482c:	2800      	cmp	r0, #0
  40482e:	f000 80a1 	beq.w	404974 <__sfvwrite_r+0x2d4>
  404832:	3001      	adds	r0, #1
  404834:	eba0 0905 	sub.w	r9, r0, r5
  404838:	e7c2      	b.n	4047c0 <__sfvwrite_r+0x120>
  40483a:	6820      	ldr	r0, [r4, #0]
  40483c:	6923      	ldr	r3, [r4, #16]
  40483e:	4298      	cmp	r0, r3
  404840:	d802      	bhi.n	404848 <__sfvwrite_r+0x1a8>
  404842:	6963      	ldr	r3, [r4, #20]
  404844:	429f      	cmp	r7, r3
  404846:	d25d      	bcs.n	404904 <__sfvwrite_r+0x264>
  404848:	45b8      	cmp	r8, r7
  40484a:	bf28      	it	cs
  40484c:	46b8      	movcs	r8, r7
  40484e:	4642      	mov	r2, r8
  404850:	4649      	mov	r1, r9
  404852:	f000 f9bd 	bl	404bd0 <memmove>
  404856:	68a3      	ldr	r3, [r4, #8]
  404858:	6822      	ldr	r2, [r4, #0]
  40485a:	eba3 0308 	sub.w	r3, r3, r8
  40485e:	4442      	add	r2, r8
  404860:	60a3      	str	r3, [r4, #8]
  404862:	6022      	str	r2, [r4, #0]
  404864:	b10b      	cbz	r3, 40486a <__sfvwrite_r+0x1ca>
  404866:	46c2      	mov	sl, r8
  404868:	e779      	b.n	40475e <__sfvwrite_r+0xbe>
  40486a:	4621      	mov	r1, r4
  40486c:	9800      	ldr	r0, [sp, #0]
  40486e:	f7ff fcb3 	bl	4041d8 <_fflush_r>
  404872:	2800      	cmp	r0, #0
  404874:	d192      	bne.n	40479c <__sfvwrite_r+0xfc>
  404876:	46c2      	mov	sl, r8
  404878:	e771      	b.n	40475e <__sfvwrite_r+0xbe>
  40487a:	465a      	mov	r2, fp
  40487c:	4629      	mov	r1, r5
  40487e:	f000 f9a7 	bl	404bd0 <memmove>
  404882:	68a2      	ldr	r2, [r4, #8]
  404884:	6823      	ldr	r3, [r4, #0]
  404886:	eba2 020b 	sub.w	r2, r2, fp
  40488a:	445b      	add	r3, fp
  40488c:	60a2      	str	r2, [r4, #8]
  40488e:	6023      	str	r3, [r4, #0]
  404890:	e7af      	b.n	4047f2 <__sfvwrite_r+0x152>
  404892:	6820      	ldr	r0, [r4, #0]
  404894:	46b8      	mov	r8, r7
  404896:	46ba      	mov	sl, r7
  404898:	46bb      	mov	fp, r7
  40489a:	e755      	b.n	404748 <__sfvwrite_r+0xa8>
  40489c:	6962      	ldr	r2, [r4, #20]
  40489e:	6820      	ldr	r0, [r4, #0]
  4048a0:	6921      	ldr	r1, [r4, #16]
  4048a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4048a6:	eba0 0a01 	sub.w	sl, r0, r1
  4048aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4048ae:	f10a 0001 	add.w	r0, sl, #1
  4048b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4048b6:	4438      	add	r0, r7
  4048b8:	4540      	cmp	r0, r8
  4048ba:	4642      	mov	r2, r8
  4048bc:	bf84      	itt	hi
  4048be:	4680      	movhi	r8, r0
  4048c0:	4642      	movhi	r2, r8
  4048c2:	055b      	lsls	r3, r3, #21
  4048c4:	d544      	bpl.n	404950 <__sfvwrite_r+0x2b0>
  4048c6:	4611      	mov	r1, r2
  4048c8:	9800      	ldr	r0, [sp, #0]
  4048ca:	f7fd ffb1 	bl	402830 <_malloc_r>
  4048ce:	4683      	mov	fp, r0
  4048d0:	2800      	cmp	r0, #0
  4048d2:	d055      	beq.n	404980 <__sfvwrite_r+0x2e0>
  4048d4:	4652      	mov	r2, sl
  4048d6:	6921      	ldr	r1, [r4, #16]
  4048d8:	f7fe fa5a 	bl	402d90 <memcpy>
  4048dc:	89a3      	ldrh	r3, [r4, #12]
  4048de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4048e6:	81a3      	strh	r3, [r4, #12]
  4048e8:	eb0b 000a 	add.w	r0, fp, sl
  4048ec:	eba8 030a 	sub.w	r3, r8, sl
  4048f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4048f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4048f8:	6020      	str	r0, [r4, #0]
  4048fa:	60a3      	str	r3, [r4, #8]
  4048fc:	46b8      	mov	r8, r7
  4048fe:	46ba      	mov	sl, r7
  404900:	46bb      	mov	fp, r7
  404902:	e721      	b.n	404748 <__sfvwrite_r+0xa8>
  404904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404908:	42b9      	cmp	r1, r7
  40490a:	bf28      	it	cs
  40490c:	4639      	movcs	r1, r7
  40490e:	464a      	mov	r2, r9
  404910:	fb91 f1f3 	sdiv	r1, r1, r3
  404914:	9800      	ldr	r0, [sp, #0]
  404916:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404918:	fb03 f301 	mul.w	r3, r3, r1
  40491c:	69e1      	ldr	r1, [r4, #28]
  40491e:	47b0      	blx	r6
  404920:	f1b0 0a00 	subs.w	sl, r0, #0
  404924:	f73f af1b 	bgt.w	40475e <__sfvwrite_r+0xbe>
  404928:	e738      	b.n	40479c <__sfvwrite_r+0xfc>
  40492a:	461a      	mov	r2, r3
  40492c:	4629      	mov	r1, r5
  40492e:	9301      	str	r3, [sp, #4]
  404930:	f000 f94e 	bl	404bd0 <memmove>
  404934:	6822      	ldr	r2, [r4, #0]
  404936:	9b01      	ldr	r3, [sp, #4]
  404938:	9800      	ldr	r0, [sp, #0]
  40493a:	441a      	add	r2, r3
  40493c:	6022      	str	r2, [r4, #0]
  40493e:	4621      	mov	r1, r4
  404940:	f7ff fc4a 	bl	4041d8 <_fflush_r>
  404944:	9b01      	ldr	r3, [sp, #4]
  404946:	2800      	cmp	r0, #0
  404948:	f47f af28 	bne.w	40479c <__sfvwrite_r+0xfc>
  40494c:	461f      	mov	r7, r3
  40494e:	e750      	b.n	4047f2 <__sfvwrite_r+0x152>
  404950:	9800      	ldr	r0, [sp, #0]
  404952:	f000 f9a1 	bl	404c98 <_realloc_r>
  404956:	4683      	mov	fp, r0
  404958:	2800      	cmp	r0, #0
  40495a:	d1c5      	bne.n	4048e8 <__sfvwrite_r+0x248>
  40495c:	9d00      	ldr	r5, [sp, #0]
  40495e:	6921      	ldr	r1, [r4, #16]
  404960:	4628      	mov	r0, r5
  404962:	f7ff fdb7 	bl	4044d4 <_free_r>
  404966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40496a:	220c      	movs	r2, #12
  40496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404970:	602a      	str	r2, [r5, #0]
  404972:	e715      	b.n	4047a0 <__sfvwrite_r+0x100>
  404974:	f106 0901 	add.w	r9, r6, #1
  404978:	e722      	b.n	4047c0 <__sfvwrite_r+0x120>
  40497a:	f04f 30ff 	mov.w	r0, #4294967295
  40497e:	e6bf      	b.n	404700 <__sfvwrite_r+0x60>
  404980:	9a00      	ldr	r2, [sp, #0]
  404982:	230c      	movs	r3, #12
  404984:	6013      	str	r3, [r2, #0]
  404986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40498a:	e709      	b.n	4047a0 <__sfvwrite_r+0x100>
  40498c:	7ffffc00 	.word	0x7ffffc00

00404990 <_fwalk_reent>:
  404990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404994:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404998:	d01f      	beq.n	4049da <_fwalk_reent+0x4a>
  40499a:	4688      	mov	r8, r1
  40499c:	4606      	mov	r6, r0
  40499e:	f04f 0900 	mov.w	r9, #0
  4049a2:	687d      	ldr	r5, [r7, #4]
  4049a4:	68bc      	ldr	r4, [r7, #8]
  4049a6:	3d01      	subs	r5, #1
  4049a8:	d411      	bmi.n	4049ce <_fwalk_reent+0x3e>
  4049aa:	89a3      	ldrh	r3, [r4, #12]
  4049ac:	2b01      	cmp	r3, #1
  4049ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4049b2:	d908      	bls.n	4049c6 <_fwalk_reent+0x36>
  4049b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4049b8:	3301      	adds	r3, #1
  4049ba:	4621      	mov	r1, r4
  4049bc:	4630      	mov	r0, r6
  4049be:	d002      	beq.n	4049c6 <_fwalk_reent+0x36>
  4049c0:	47c0      	blx	r8
  4049c2:	ea49 0900 	orr.w	r9, r9, r0
  4049c6:	1c6b      	adds	r3, r5, #1
  4049c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4049cc:	d1ed      	bne.n	4049aa <_fwalk_reent+0x1a>
  4049ce:	683f      	ldr	r7, [r7, #0]
  4049d0:	2f00      	cmp	r7, #0
  4049d2:	d1e6      	bne.n	4049a2 <_fwalk_reent+0x12>
  4049d4:	4648      	mov	r0, r9
  4049d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049da:	46b9      	mov	r9, r7
  4049dc:	4648      	mov	r0, r9
  4049de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049e2:	bf00      	nop

004049e4 <__locale_mb_cur_max>:
  4049e4:	4b04      	ldr	r3, [pc, #16]	; (4049f8 <__locale_mb_cur_max+0x14>)
  4049e6:	4a05      	ldr	r2, [pc, #20]	; (4049fc <__locale_mb_cur_max+0x18>)
  4049e8:	681b      	ldr	r3, [r3, #0]
  4049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4049ec:	2b00      	cmp	r3, #0
  4049ee:	bf08      	it	eq
  4049f0:	4613      	moveq	r3, r2
  4049f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4049f6:	4770      	bx	lr
  4049f8:	20400010 	.word	0x20400010
  4049fc:	20400854 	.word	0x20400854

00404a00 <__retarget_lock_init_recursive>:
  404a00:	4770      	bx	lr
  404a02:	bf00      	nop

00404a04 <__retarget_lock_close_recursive>:
  404a04:	4770      	bx	lr
  404a06:	bf00      	nop

00404a08 <__retarget_lock_acquire_recursive>:
  404a08:	4770      	bx	lr
  404a0a:	bf00      	nop

00404a0c <__retarget_lock_release_recursive>:
  404a0c:	4770      	bx	lr
  404a0e:	bf00      	nop

00404a10 <__swhatbuf_r>:
  404a10:	b570      	push	{r4, r5, r6, lr}
  404a12:	460c      	mov	r4, r1
  404a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a18:	2900      	cmp	r1, #0
  404a1a:	b090      	sub	sp, #64	; 0x40
  404a1c:	4615      	mov	r5, r2
  404a1e:	461e      	mov	r6, r3
  404a20:	db14      	blt.n	404a4c <__swhatbuf_r+0x3c>
  404a22:	aa01      	add	r2, sp, #4
  404a24:	f000 fc9e 	bl	405364 <_fstat_r>
  404a28:	2800      	cmp	r0, #0
  404a2a:	db0f      	blt.n	404a4c <__swhatbuf_r+0x3c>
  404a2c:	9a02      	ldr	r2, [sp, #8]
  404a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404a32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404a36:	fab2 f282 	clz	r2, r2
  404a3a:	0952      	lsrs	r2, r2, #5
  404a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404a44:	6032      	str	r2, [r6, #0]
  404a46:	602b      	str	r3, [r5, #0]
  404a48:	b010      	add	sp, #64	; 0x40
  404a4a:	bd70      	pop	{r4, r5, r6, pc}
  404a4c:	89a2      	ldrh	r2, [r4, #12]
  404a4e:	2300      	movs	r3, #0
  404a50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404a54:	6033      	str	r3, [r6, #0]
  404a56:	d004      	beq.n	404a62 <__swhatbuf_r+0x52>
  404a58:	2240      	movs	r2, #64	; 0x40
  404a5a:	4618      	mov	r0, r3
  404a5c:	602a      	str	r2, [r5, #0]
  404a5e:	b010      	add	sp, #64	; 0x40
  404a60:	bd70      	pop	{r4, r5, r6, pc}
  404a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a66:	602b      	str	r3, [r5, #0]
  404a68:	b010      	add	sp, #64	; 0x40
  404a6a:	bd70      	pop	{r4, r5, r6, pc}

00404a6c <__smakebuf_r>:
  404a6c:	898a      	ldrh	r2, [r1, #12]
  404a6e:	0792      	lsls	r2, r2, #30
  404a70:	460b      	mov	r3, r1
  404a72:	d506      	bpl.n	404a82 <__smakebuf_r+0x16>
  404a74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404a78:	2101      	movs	r1, #1
  404a7a:	601a      	str	r2, [r3, #0]
  404a7c:	611a      	str	r2, [r3, #16]
  404a7e:	6159      	str	r1, [r3, #20]
  404a80:	4770      	bx	lr
  404a82:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a84:	b083      	sub	sp, #12
  404a86:	ab01      	add	r3, sp, #4
  404a88:	466a      	mov	r2, sp
  404a8a:	460c      	mov	r4, r1
  404a8c:	4606      	mov	r6, r0
  404a8e:	f7ff ffbf 	bl	404a10 <__swhatbuf_r>
  404a92:	9900      	ldr	r1, [sp, #0]
  404a94:	4605      	mov	r5, r0
  404a96:	4630      	mov	r0, r6
  404a98:	f7fd feca 	bl	402830 <_malloc_r>
  404a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404aa0:	b1d8      	cbz	r0, 404ada <__smakebuf_r+0x6e>
  404aa2:	9a01      	ldr	r2, [sp, #4]
  404aa4:	4f15      	ldr	r7, [pc, #84]	; (404afc <__smakebuf_r+0x90>)
  404aa6:	9900      	ldr	r1, [sp, #0]
  404aa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  404aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404aae:	81a3      	strh	r3, [r4, #12]
  404ab0:	6020      	str	r0, [r4, #0]
  404ab2:	6120      	str	r0, [r4, #16]
  404ab4:	6161      	str	r1, [r4, #20]
  404ab6:	b91a      	cbnz	r2, 404ac0 <__smakebuf_r+0x54>
  404ab8:	432b      	orrs	r3, r5
  404aba:	81a3      	strh	r3, [r4, #12]
  404abc:	b003      	add	sp, #12
  404abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404ac0:	4630      	mov	r0, r6
  404ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404ac6:	f000 fc61 	bl	40538c <_isatty_r>
  404aca:	b1a0      	cbz	r0, 404af6 <__smakebuf_r+0x8a>
  404acc:	89a3      	ldrh	r3, [r4, #12]
  404ace:	f023 0303 	bic.w	r3, r3, #3
  404ad2:	f043 0301 	orr.w	r3, r3, #1
  404ad6:	b21b      	sxth	r3, r3
  404ad8:	e7ee      	b.n	404ab8 <__smakebuf_r+0x4c>
  404ada:	059a      	lsls	r2, r3, #22
  404adc:	d4ee      	bmi.n	404abc <__smakebuf_r+0x50>
  404ade:	f023 0303 	bic.w	r3, r3, #3
  404ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404ae6:	f043 0302 	orr.w	r3, r3, #2
  404aea:	2101      	movs	r1, #1
  404aec:	81a3      	strh	r3, [r4, #12]
  404aee:	6022      	str	r2, [r4, #0]
  404af0:	6122      	str	r2, [r4, #16]
  404af2:	6161      	str	r1, [r4, #20]
  404af4:	e7e2      	b.n	404abc <__smakebuf_r+0x50>
  404af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404afa:	e7dd      	b.n	404ab8 <__smakebuf_r+0x4c>
  404afc:	0040422d 	.word	0x0040422d

00404b00 <__ascii_mbtowc>:
  404b00:	b082      	sub	sp, #8
  404b02:	b149      	cbz	r1, 404b18 <__ascii_mbtowc+0x18>
  404b04:	b15a      	cbz	r2, 404b1e <__ascii_mbtowc+0x1e>
  404b06:	b16b      	cbz	r3, 404b24 <__ascii_mbtowc+0x24>
  404b08:	7813      	ldrb	r3, [r2, #0]
  404b0a:	600b      	str	r3, [r1, #0]
  404b0c:	7812      	ldrb	r2, [r2, #0]
  404b0e:	1c10      	adds	r0, r2, #0
  404b10:	bf18      	it	ne
  404b12:	2001      	movne	r0, #1
  404b14:	b002      	add	sp, #8
  404b16:	4770      	bx	lr
  404b18:	a901      	add	r1, sp, #4
  404b1a:	2a00      	cmp	r2, #0
  404b1c:	d1f3      	bne.n	404b06 <__ascii_mbtowc+0x6>
  404b1e:	4610      	mov	r0, r2
  404b20:	b002      	add	sp, #8
  404b22:	4770      	bx	lr
  404b24:	f06f 0001 	mvn.w	r0, #1
  404b28:	e7f4      	b.n	404b14 <__ascii_mbtowc+0x14>
  404b2a:	bf00      	nop
  404b2c:	0000      	movs	r0, r0
	...

00404b30 <memchr>:
  404b30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404b34:	2a10      	cmp	r2, #16
  404b36:	db2b      	blt.n	404b90 <memchr+0x60>
  404b38:	f010 0f07 	tst.w	r0, #7
  404b3c:	d008      	beq.n	404b50 <memchr+0x20>
  404b3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b42:	3a01      	subs	r2, #1
  404b44:	428b      	cmp	r3, r1
  404b46:	d02d      	beq.n	404ba4 <memchr+0x74>
  404b48:	f010 0f07 	tst.w	r0, #7
  404b4c:	b342      	cbz	r2, 404ba0 <memchr+0x70>
  404b4e:	d1f6      	bne.n	404b3e <memchr+0xe>
  404b50:	b4f0      	push	{r4, r5, r6, r7}
  404b52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404b56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404b5a:	f022 0407 	bic.w	r4, r2, #7
  404b5e:	f07f 0700 	mvns.w	r7, #0
  404b62:	2300      	movs	r3, #0
  404b64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404b68:	3c08      	subs	r4, #8
  404b6a:	ea85 0501 	eor.w	r5, r5, r1
  404b6e:	ea86 0601 	eor.w	r6, r6, r1
  404b72:	fa85 f547 	uadd8	r5, r5, r7
  404b76:	faa3 f587 	sel	r5, r3, r7
  404b7a:	fa86 f647 	uadd8	r6, r6, r7
  404b7e:	faa5 f687 	sel	r6, r5, r7
  404b82:	b98e      	cbnz	r6, 404ba8 <memchr+0x78>
  404b84:	d1ee      	bne.n	404b64 <memchr+0x34>
  404b86:	bcf0      	pop	{r4, r5, r6, r7}
  404b88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404b8c:	f002 0207 	and.w	r2, r2, #7
  404b90:	b132      	cbz	r2, 404ba0 <memchr+0x70>
  404b92:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b96:	3a01      	subs	r2, #1
  404b98:	ea83 0301 	eor.w	r3, r3, r1
  404b9c:	b113      	cbz	r3, 404ba4 <memchr+0x74>
  404b9e:	d1f8      	bne.n	404b92 <memchr+0x62>
  404ba0:	2000      	movs	r0, #0
  404ba2:	4770      	bx	lr
  404ba4:	3801      	subs	r0, #1
  404ba6:	4770      	bx	lr
  404ba8:	2d00      	cmp	r5, #0
  404baa:	bf06      	itte	eq
  404bac:	4635      	moveq	r5, r6
  404bae:	3803      	subeq	r0, #3
  404bb0:	3807      	subne	r0, #7
  404bb2:	f015 0f01 	tst.w	r5, #1
  404bb6:	d107      	bne.n	404bc8 <memchr+0x98>
  404bb8:	3001      	adds	r0, #1
  404bba:	f415 7f80 	tst.w	r5, #256	; 0x100
  404bbe:	bf02      	ittt	eq
  404bc0:	3001      	addeq	r0, #1
  404bc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404bc6:	3001      	addeq	r0, #1
  404bc8:	bcf0      	pop	{r4, r5, r6, r7}
  404bca:	3801      	subs	r0, #1
  404bcc:	4770      	bx	lr
  404bce:	bf00      	nop

00404bd0 <memmove>:
  404bd0:	4288      	cmp	r0, r1
  404bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  404bd4:	d90d      	bls.n	404bf2 <memmove+0x22>
  404bd6:	188b      	adds	r3, r1, r2
  404bd8:	4298      	cmp	r0, r3
  404bda:	d20a      	bcs.n	404bf2 <memmove+0x22>
  404bdc:	1884      	adds	r4, r0, r2
  404bde:	2a00      	cmp	r2, #0
  404be0:	d051      	beq.n	404c86 <memmove+0xb6>
  404be2:	4622      	mov	r2, r4
  404be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404be8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404bec:	4299      	cmp	r1, r3
  404bee:	d1f9      	bne.n	404be4 <memmove+0x14>
  404bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404bf2:	2a0f      	cmp	r2, #15
  404bf4:	d948      	bls.n	404c88 <memmove+0xb8>
  404bf6:	ea41 0300 	orr.w	r3, r1, r0
  404bfa:	079b      	lsls	r3, r3, #30
  404bfc:	d146      	bne.n	404c8c <memmove+0xbc>
  404bfe:	f100 0410 	add.w	r4, r0, #16
  404c02:	f101 0310 	add.w	r3, r1, #16
  404c06:	4615      	mov	r5, r2
  404c08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404c0c:	f844 6c10 	str.w	r6, [r4, #-16]
  404c10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404c14:	f844 6c0c 	str.w	r6, [r4, #-12]
  404c18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404c1c:	f844 6c08 	str.w	r6, [r4, #-8]
  404c20:	3d10      	subs	r5, #16
  404c22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404c26:	f844 6c04 	str.w	r6, [r4, #-4]
  404c2a:	2d0f      	cmp	r5, #15
  404c2c:	f103 0310 	add.w	r3, r3, #16
  404c30:	f104 0410 	add.w	r4, r4, #16
  404c34:	d8e8      	bhi.n	404c08 <memmove+0x38>
  404c36:	f1a2 0310 	sub.w	r3, r2, #16
  404c3a:	f023 030f 	bic.w	r3, r3, #15
  404c3e:	f002 0e0f 	and.w	lr, r2, #15
  404c42:	3310      	adds	r3, #16
  404c44:	f1be 0f03 	cmp.w	lr, #3
  404c48:	4419      	add	r1, r3
  404c4a:	4403      	add	r3, r0
  404c4c:	d921      	bls.n	404c92 <memmove+0xc2>
  404c4e:	1f1e      	subs	r6, r3, #4
  404c50:	460d      	mov	r5, r1
  404c52:	4674      	mov	r4, lr
  404c54:	3c04      	subs	r4, #4
  404c56:	f855 7b04 	ldr.w	r7, [r5], #4
  404c5a:	f846 7f04 	str.w	r7, [r6, #4]!
  404c5e:	2c03      	cmp	r4, #3
  404c60:	d8f8      	bhi.n	404c54 <memmove+0x84>
  404c62:	f1ae 0404 	sub.w	r4, lr, #4
  404c66:	f024 0403 	bic.w	r4, r4, #3
  404c6a:	3404      	adds	r4, #4
  404c6c:	4421      	add	r1, r4
  404c6e:	4423      	add	r3, r4
  404c70:	f002 0203 	and.w	r2, r2, #3
  404c74:	b162      	cbz	r2, 404c90 <memmove+0xc0>
  404c76:	3b01      	subs	r3, #1
  404c78:	440a      	add	r2, r1
  404c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  404c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404c82:	428a      	cmp	r2, r1
  404c84:	d1f9      	bne.n	404c7a <memmove+0xaa>
  404c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c88:	4603      	mov	r3, r0
  404c8a:	e7f3      	b.n	404c74 <memmove+0xa4>
  404c8c:	4603      	mov	r3, r0
  404c8e:	e7f2      	b.n	404c76 <memmove+0xa6>
  404c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c92:	4672      	mov	r2, lr
  404c94:	e7ee      	b.n	404c74 <memmove+0xa4>
  404c96:	bf00      	nop

00404c98 <_realloc_r>:
  404c98:	2900      	cmp	r1, #0
  404c9a:	f000 8095 	beq.w	404dc8 <_realloc_r+0x130>
  404c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ca2:	460d      	mov	r5, r1
  404ca4:	4616      	mov	r6, r2
  404ca6:	b083      	sub	sp, #12
  404ca8:	4680      	mov	r8, r0
  404caa:	f106 070b 	add.w	r7, r6, #11
  404cae:	f7fe f957 	bl	402f60 <__malloc_lock>
  404cb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404cb6:	2f16      	cmp	r7, #22
  404cb8:	f02e 0403 	bic.w	r4, lr, #3
  404cbc:	f1a5 0908 	sub.w	r9, r5, #8
  404cc0:	d83c      	bhi.n	404d3c <_realloc_r+0xa4>
  404cc2:	2210      	movs	r2, #16
  404cc4:	4617      	mov	r7, r2
  404cc6:	42be      	cmp	r6, r7
  404cc8:	d83d      	bhi.n	404d46 <_realloc_r+0xae>
  404cca:	4294      	cmp	r4, r2
  404ccc:	da43      	bge.n	404d56 <_realloc_r+0xbe>
  404cce:	4bc4      	ldr	r3, [pc, #784]	; (404fe0 <_realloc_r+0x348>)
  404cd0:	6899      	ldr	r1, [r3, #8]
  404cd2:	eb09 0004 	add.w	r0, r9, r4
  404cd6:	4288      	cmp	r0, r1
  404cd8:	f000 80b4 	beq.w	404e44 <_realloc_r+0x1ac>
  404cdc:	6843      	ldr	r3, [r0, #4]
  404cde:	f023 0101 	bic.w	r1, r3, #1
  404ce2:	4401      	add	r1, r0
  404ce4:	6849      	ldr	r1, [r1, #4]
  404ce6:	07c9      	lsls	r1, r1, #31
  404ce8:	d54c      	bpl.n	404d84 <_realloc_r+0xec>
  404cea:	f01e 0f01 	tst.w	lr, #1
  404cee:	f000 809b 	beq.w	404e28 <_realloc_r+0x190>
  404cf2:	4631      	mov	r1, r6
  404cf4:	4640      	mov	r0, r8
  404cf6:	f7fd fd9b 	bl	402830 <_malloc_r>
  404cfa:	4606      	mov	r6, r0
  404cfc:	2800      	cmp	r0, #0
  404cfe:	d03a      	beq.n	404d76 <_realloc_r+0xde>
  404d00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404d04:	f023 0301 	bic.w	r3, r3, #1
  404d08:	444b      	add	r3, r9
  404d0a:	f1a0 0208 	sub.w	r2, r0, #8
  404d0e:	429a      	cmp	r2, r3
  404d10:	f000 8121 	beq.w	404f56 <_realloc_r+0x2be>
  404d14:	1f22      	subs	r2, r4, #4
  404d16:	2a24      	cmp	r2, #36	; 0x24
  404d18:	f200 8107 	bhi.w	404f2a <_realloc_r+0x292>
  404d1c:	2a13      	cmp	r2, #19
  404d1e:	f200 80db 	bhi.w	404ed8 <_realloc_r+0x240>
  404d22:	4603      	mov	r3, r0
  404d24:	462a      	mov	r2, r5
  404d26:	6811      	ldr	r1, [r2, #0]
  404d28:	6019      	str	r1, [r3, #0]
  404d2a:	6851      	ldr	r1, [r2, #4]
  404d2c:	6059      	str	r1, [r3, #4]
  404d2e:	6892      	ldr	r2, [r2, #8]
  404d30:	609a      	str	r2, [r3, #8]
  404d32:	4629      	mov	r1, r5
  404d34:	4640      	mov	r0, r8
  404d36:	f7ff fbcd 	bl	4044d4 <_free_r>
  404d3a:	e01c      	b.n	404d76 <_realloc_r+0xde>
  404d3c:	f027 0707 	bic.w	r7, r7, #7
  404d40:	2f00      	cmp	r7, #0
  404d42:	463a      	mov	r2, r7
  404d44:	dabf      	bge.n	404cc6 <_realloc_r+0x2e>
  404d46:	2600      	movs	r6, #0
  404d48:	230c      	movs	r3, #12
  404d4a:	4630      	mov	r0, r6
  404d4c:	f8c8 3000 	str.w	r3, [r8]
  404d50:	b003      	add	sp, #12
  404d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d56:	462e      	mov	r6, r5
  404d58:	1be3      	subs	r3, r4, r7
  404d5a:	2b0f      	cmp	r3, #15
  404d5c:	d81e      	bhi.n	404d9c <_realloc_r+0x104>
  404d5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404d62:	f003 0301 	and.w	r3, r3, #1
  404d66:	4323      	orrs	r3, r4
  404d68:	444c      	add	r4, r9
  404d6a:	f8c9 3004 	str.w	r3, [r9, #4]
  404d6e:	6863      	ldr	r3, [r4, #4]
  404d70:	f043 0301 	orr.w	r3, r3, #1
  404d74:	6063      	str	r3, [r4, #4]
  404d76:	4640      	mov	r0, r8
  404d78:	f7fe f8f8 	bl	402f6c <__malloc_unlock>
  404d7c:	4630      	mov	r0, r6
  404d7e:	b003      	add	sp, #12
  404d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d84:	f023 0303 	bic.w	r3, r3, #3
  404d88:	18e1      	adds	r1, r4, r3
  404d8a:	4291      	cmp	r1, r2
  404d8c:	db1f      	blt.n	404dce <_realloc_r+0x136>
  404d8e:	68c3      	ldr	r3, [r0, #12]
  404d90:	6882      	ldr	r2, [r0, #8]
  404d92:	462e      	mov	r6, r5
  404d94:	60d3      	str	r3, [r2, #12]
  404d96:	460c      	mov	r4, r1
  404d98:	609a      	str	r2, [r3, #8]
  404d9a:	e7dd      	b.n	404d58 <_realloc_r+0xc0>
  404d9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404da0:	eb09 0107 	add.w	r1, r9, r7
  404da4:	f002 0201 	and.w	r2, r2, #1
  404da8:	444c      	add	r4, r9
  404daa:	f043 0301 	orr.w	r3, r3, #1
  404dae:	4317      	orrs	r7, r2
  404db0:	f8c9 7004 	str.w	r7, [r9, #4]
  404db4:	604b      	str	r3, [r1, #4]
  404db6:	6863      	ldr	r3, [r4, #4]
  404db8:	f043 0301 	orr.w	r3, r3, #1
  404dbc:	3108      	adds	r1, #8
  404dbe:	6063      	str	r3, [r4, #4]
  404dc0:	4640      	mov	r0, r8
  404dc2:	f7ff fb87 	bl	4044d4 <_free_r>
  404dc6:	e7d6      	b.n	404d76 <_realloc_r+0xde>
  404dc8:	4611      	mov	r1, r2
  404dca:	f7fd bd31 	b.w	402830 <_malloc_r>
  404dce:	f01e 0f01 	tst.w	lr, #1
  404dd2:	d18e      	bne.n	404cf2 <_realloc_r+0x5a>
  404dd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404dd8:	eba9 0a01 	sub.w	sl, r9, r1
  404ddc:	f8da 1004 	ldr.w	r1, [sl, #4]
  404de0:	f021 0103 	bic.w	r1, r1, #3
  404de4:	440b      	add	r3, r1
  404de6:	4423      	add	r3, r4
  404de8:	4293      	cmp	r3, r2
  404dea:	db25      	blt.n	404e38 <_realloc_r+0x1a0>
  404dec:	68c2      	ldr	r2, [r0, #12]
  404dee:	6881      	ldr	r1, [r0, #8]
  404df0:	4656      	mov	r6, sl
  404df2:	60ca      	str	r2, [r1, #12]
  404df4:	6091      	str	r1, [r2, #8]
  404df6:	f8da 100c 	ldr.w	r1, [sl, #12]
  404dfa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404dfe:	1f22      	subs	r2, r4, #4
  404e00:	2a24      	cmp	r2, #36	; 0x24
  404e02:	60c1      	str	r1, [r0, #12]
  404e04:	6088      	str	r0, [r1, #8]
  404e06:	f200 8094 	bhi.w	404f32 <_realloc_r+0x29a>
  404e0a:	2a13      	cmp	r2, #19
  404e0c:	d96f      	bls.n	404eee <_realloc_r+0x256>
  404e0e:	6829      	ldr	r1, [r5, #0]
  404e10:	f8ca 1008 	str.w	r1, [sl, #8]
  404e14:	6869      	ldr	r1, [r5, #4]
  404e16:	f8ca 100c 	str.w	r1, [sl, #12]
  404e1a:	2a1b      	cmp	r2, #27
  404e1c:	f200 80a2 	bhi.w	404f64 <_realloc_r+0x2cc>
  404e20:	3508      	adds	r5, #8
  404e22:	f10a 0210 	add.w	r2, sl, #16
  404e26:	e063      	b.n	404ef0 <_realloc_r+0x258>
  404e28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404e2c:	eba9 0a03 	sub.w	sl, r9, r3
  404e30:	f8da 1004 	ldr.w	r1, [sl, #4]
  404e34:	f021 0103 	bic.w	r1, r1, #3
  404e38:	1863      	adds	r3, r4, r1
  404e3a:	4293      	cmp	r3, r2
  404e3c:	f6ff af59 	blt.w	404cf2 <_realloc_r+0x5a>
  404e40:	4656      	mov	r6, sl
  404e42:	e7d8      	b.n	404df6 <_realloc_r+0x15e>
  404e44:	6841      	ldr	r1, [r0, #4]
  404e46:	f021 0b03 	bic.w	fp, r1, #3
  404e4a:	44a3      	add	fp, r4
  404e4c:	f107 0010 	add.w	r0, r7, #16
  404e50:	4583      	cmp	fp, r0
  404e52:	da56      	bge.n	404f02 <_realloc_r+0x26a>
  404e54:	f01e 0f01 	tst.w	lr, #1
  404e58:	f47f af4b 	bne.w	404cf2 <_realloc_r+0x5a>
  404e5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404e60:	eba9 0a01 	sub.w	sl, r9, r1
  404e64:	f8da 1004 	ldr.w	r1, [sl, #4]
  404e68:	f021 0103 	bic.w	r1, r1, #3
  404e6c:	448b      	add	fp, r1
  404e6e:	4558      	cmp	r0, fp
  404e70:	dce2      	bgt.n	404e38 <_realloc_r+0x1a0>
  404e72:	4656      	mov	r6, sl
  404e74:	f8da 100c 	ldr.w	r1, [sl, #12]
  404e78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404e7c:	1f22      	subs	r2, r4, #4
  404e7e:	2a24      	cmp	r2, #36	; 0x24
  404e80:	60c1      	str	r1, [r0, #12]
  404e82:	6088      	str	r0, [r1, #8]
  404e84:	f200 808f 	bhi.w	404fa6 <_realloc_r+0x30e>
  404e88:	2a13      	cmp	r2, #19
  404e8a:	f240 808a 	bls.w	404fa2 <_realloc_r+0x30a>
  404e8e:	6829      	ldr	r1, [r5, #0]
  404e90:	f8ca 1008 	str.w	r1, [sl, #8]
  404e94:	6869      	ldr	r1, [r5, #4]
  404e96:	f8ca 100c 	str.w	r1, [sl, #12]
  404e9a:	2a1b      	cmp	r2, #27
  404e9c:	f200 808a 	bhi.w	404fb4 <_realloc_r+0x31c>
  404ea0:	3508      	adds	r5, #8
  404ea2:	f10a 0210 	add.w	r2, sl, #16
  404ea6:	6829      	ldr	r1, [r5, #0]
  404ea8:	6011      	str	r1, [r2, #0]
  404eaa:	6869      	ldr	r1, [r5, #4]
  404eac:	6051      	str	r1, [r2, #4]
  404eae:	68a9      	ldr	r1, [r5, #8]
  404eb0:	6091      	str	r1, [r2, #8]
  404eb2:	eb0a 0107 	add.w	r1, sl, r7
  404eb6:	ebab 0207 	sub.w	r2, fp, r7
  404eba:	f042 0201 	orr.w	r2, r2, #1
  404ebe:	6099      	str	r1, [r3, #8]
  404ec0:	604a      	str	r2, [r1, #4]
  404ec2:	f8da 3004 	ldr.w	r3, [sl, #4]
  404ec6:	f003 0301 	and.w	r3, r3, #1
  404eca:	431f      	orrs	r7, r3
  404ecc:	4640      	mov	r0, r8
  404ece:	f8ca 7004 	str.w	r7, [sl, #4]
  404ed2:	f7fe f84b 	bl	402f6c <__malloc_unlock>
  404ed6:	e751      	b.n	404d7c <_realloc_r+0xe4>
  404ed8:	682b      	ldr	r3, [r5, #0]
  404eda:	6003      	str	r3, [r0, #0]
  404edc:	686b      	ldr	r3, [r5, #4]
  404ede:	6043      	str	r3, [r0, #4]
  404ee0:	2a1b      	cmp	r2, #27
  404ee2:	d82d      	bhi.n	404f40 <_realloc_r+0x2a8>
  404ee4:	f100 0308 	add.w	r3, r0, #8
  404ee8:	f105 0208 	add.w	r2, r5, #8
  404eec:	e71b      	b.n	404d26 <_realloc_r+0x8e>
  404eee:	4632      	mov	r2, r6
  404ef0:	6829      	ldr	r1, [r5, #0]
  404ef2:	6011      	str	r1, [r2, #0]
  404ef4:	6869      	ldr	r1, [r5, #4]
  404ef6:	6051      	str	r1, [r2, #4]
  404ef8:	68a9      	ldr	r1, [r5, #8]
  404efa:	6091      	str	r1, [r2, #8]
  404efc:	461c      	mov	r4, r3
  404efe:	46d1      	mov	r9, sl
  404f00:	e72a      	b.n	404d58 <_realloc_r+0xc0>
  404f02:	eb09 0107 	add.w	r1, r9, r7
  404f06:	ebab 0b07 	sub.w	fp, fp, r7
  404f0a:	f04b 0201 	orr.w	r2, fp, #1
  404f0e:	6099      	str	r1, [r3, #8]
  404f10:	604a      	str	r2, [r1, #4]
  404f12:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404f16:	f003 0301 	and.w	r3, r3, #1
  404f1a:	431f      	orrs	r7, r3
  404f1c:	4640      	mov	r0, r8
  404f1e:	f845 7c04 	str.w	r7, [r5, #-4]
  404f22:	f7fe f823 	bl	402f6c <__malloc_unlock>
  404f26:	462e      	mov	r6, r5
  404f28:	e728      	b.n	404d7c <_realloc_r+0xe4>
  404f2a:	4629      	mov	r1, r5
  404f2c:	f7ff fe50 	bl	404bd0 <memmove>
  404f30:	e6ff      	b.n	404d32 <_realloc_r+0x9a>
  404f32:	4629      	mov	r1, r5
  404f34:	4630      	mov	r0, r6
  404f36:	461c      	mov	r4, r3
  404f38:	46d1      	mov	r9, sl
  404f3a:	f7ff fe49 	bl	404bd0 <memmove>
  404f3e:	e70b      	b.n	404d58 <_realloc_r+0xc0>
  404f40:	68ab      	ldr	r3, [r5, #8]
  404f42:	6083      	str	r3, [r0, #8]
  404f44:	68eb      	ldr	r3, [r5, #12]
  404f46:	60c3      	str	r3, [r0, #12]
  404f48:	2a24      	cmp	r2, #36	; 0x24
  404f4a:	d017      	beq.n	404f7c <_realloc_r+0x2e4>
  404f4c:	f100 0310 	add.w	r3, r0, #16
  404f50:	f105 0210 	add.w	r2, r5, #16
  404f54:	e6e7      	b.n	404d26 <_realloc_r+0x8e>
  404f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404f5a:	f023 0303 	bic.w	r3, r3, #3
  404f5e:	441c      	add	r4, r3
  404f60:	462e      	mov	r6, r5
  404f62:	e6f9      	b.n	404d58 <_realloc_r+0xc0>
  404f64:	68a9      	ldr	r1, [r5, #8]
  404f66:	f8ca 1010 	str.w	r1, [sl, #16]
  404f6a:	68e9      	ldr	r1, [r5, #12]
  404f6c:	f8ca 1014 	str.w	r1, [sl, #20]
  404f70:	2a24      	cmp	r2, #36	; 0x24
  404f72:	d00c      	beq.n	404f8e <_realloc_r+0x2f6>
  404f74:	3510      	adds	r5, #16
  404f76:	f10a 0218 	add.w	r2, sl, #24
  404f7a:	e7b9      	b.n	404ef0 <_realloc_r+0x258>
  404f7c:	692b      	ldr	r3, [r5, #16]
  404f7e:	6103      	str	r3, [r0, #16]
  404f80:	696b      	ldr	r3, [r5, #20]
  404f82:	6143      	str	r3, [r0, #20]
  404f84:	f105 0218 	add.w	r2, r5, #24
  404f88:	f100 0318 	add.w	r3, r0, #24
  404f8c:	e6cb      	b.n	404d26 <_realloc_r+0x8e>
  404f8e:	692a      	ldr	r2, [r5, #16]
  404f90:	f8ca 2018 	str.w	r2, [sl, #24]
  404f94:	696a      	ldr	r2, [r5, #20]
  404f96:	f8ca 201c 	str.w	r2, [sl, #28]
  404f9a:	3518      	adds	r5, #24
  404f9c:	f10a 0220 	add.w	r2, sl, #32
  404fa0:	e7a6      	b.n	404ef0 <_realloc_r+0x258>
  404fa2:	4632      	mov	r2, r6
  404fa4:	e77f      	b.n	404ea6 <_realloc_r+0x20e>
  404fa6:	4629      	mov	r1, r5
  404fa8:	4630      	mov	r0, r6
  404faa:	9301      	str	r3, [sp, #4]
  404fac:	f7ff fe10 	bl	404bd0 <memmove>
  404fb0:	9b01      	ldr	r3, [sp, #4]
  404fb2:	e77e      	b.n	404eb2 <_realloc_r+0x21a>
  404fb4:	68a9      	ldr	r1, [r5, #8]
  404fb6:	f8ca 1010 	str.w	r1, [sl, #16]
  404fba:	68e9      	ldr	r1, [r5, #12]
  404fbc:	f8ca 1014 	str.w	r1, [sl, #20]
  404fc0:	2a24      	cmp	r2, #36	; 0x24
  404fc2:	d003      	beq.n	404fcc <_realloc_r+0x334>
  404fc4:	3510      	adds	r5, #16
  404fc6:	f10a 0218 	add.w	r2, sl, #24
  404fca:	e76c      	b.n	404ea6 <_realloc_r+0x20e>
  404fcc:	692a      	ldr	r2, [r5, #16]
  404fce:	f8ca 2018 	str.w	r2, [sl, #24]
  404fd2:	696a      	ldr	r2, [r5, #20]
  404fd4:	f8ca 201c 	str.w	r2, [sl, #28]
  404fd8:	3518      	adds	r5, #24
  404fda:	f10a 0220 	add.w	r2, sl, #32
  404fde:	e762      	b.n	404ea6 <_realloc_r+0x20e>
  404fe0:	20400440 	.word	0x20400440

00404fe4 <__sread>:
  404fe4:	b510      	push	{r4, lr}
  404fe6:	460c      	mov	r4, r1
  404fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fec:	f000 f9f6 	bl	4053dc <_read_r>
  404ff0:	2800      	cmp	r0, #0
  404ff2:	db03      	blt.n	404ffc <__sread+0x18>
  404ff4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404ff6:	4403      	add	r3, r0
  404ff8:	6523      	str	r3, [r4, #80]	; 0x50
  404ffa:	bd10      	pop	{r4, pc}
  404ffc:	89a3      	ldrh	r3, [r4, #12]
  404ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405002:	81a3      	strh	r3, [r4, #12]
  405004:	bd10      	pop	{r4, pc}
  405006:	bf00      	nop

00405008 <__swrite>:
  405008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40500c:	4616      	mov	r6, r2
  40500e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405012:	461f      	mov	r7, r3
  405014:	05d3      	lsls	r3, r2, #23
  405016:	460c      	mov	r4, r1
  405018:	4605      	mov	r5, r0
  40501a:	d507      	bpl.n	40502c <__swrite+0x24>
  40501c:	2200      	movs	r2, #0
  40501e:	2302      	movs	r3, #2
  405020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405024:	f000 f9c4 	bl	4053b0 <_lseek_r>
  405028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40502c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405034:	81a2      	strh	r2, [r4, #12]
  405036:	463b      	mov	r3, r7
  405038:	4632      	mov	r2, r6
  40503a:	4628      	mov	r0, r5
  40503c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405040:	f000 b8a4 	b.w	40518c <_write_r>

00405044 <__sseek>:
  405044:	b510      	push	{r4, lr}
  405046:	460c      	mov	r4, r1
  405048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40504c:	f000 f9b0 	bl	4053b0 <_lseek_r>
  405050:	89a3      	ldrh	r3, [r4, #12]
  405052:	1c42      	adds	r2, r0, #1
  405054:	bf0e      	itee	eq
  405056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40505a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40505e:	6520      	strne	r0, [r4, #80]	; 0x50
  405060:	81a3      	strh	r3, [r4, #12]
  405062:	bd10      	pop	{r4, pc}

00405064 <__sclose>:
  405064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405068:	f000 b908 	b.w	40527c <_close_r>

0040506c <__swbuf_r>:
  40506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40506e:	460d      	mov	r5, r1
  405070:	4614      	mov	r4, r2
  405072:	4606      	mov	r6, r0
  405074:	b110      	cbz	r0, 40507c <__swbuf_r+0x10>
  405076:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405078:	2b00      	cmp	r3, #0
  40507a:	d04b      	beq.n	405114 <__swbuf_r+0xa8>
  40507c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405080:	69a3      	ldr	r3, [r4, #24]
  405082:	60a3      	str	r3, [r4, #8]
  405084:	b291      	uxth	r1, r2
  405086:	0708      	lsls	r0, r1, #28
  405088:	d539      	bpl.n	4050fe <__swbuf_r+0x92>
  40508a:	6923      	ldr	r3, [r4, #16]
  40508c:	2b00      	cmp	r3, #0
  40508e:	d036      	beq.n	4050fe <__swbuf_r+0x92>
  405090:	b2ed      	uxtb	r5, r5
  405092:	0489      	lsls	r1, r1, #18
  405094:	462f      	mov	r7, r5
  405096:	d515      	bpl.n	4050c4 <__swbuf_r+0x58>
  405098:	6822      	ldr	r2, [r4, #0]
  40509a:	6961      	ldr	r1, [r4, #20]
  40509c:	1ad3      	subs	r3, r2, r3
  40509e:	428b      	cmp	r3, r1
  4050a0:	da1c      	bge.n	4050dc <__swbuf_r+0x70>
  4050a2:	3301      	adds	r3, #1
  4050a4:	68a1      	ldr	r1, [r4, #8]
  4050a6:	1c50      	adds	r0, r2, #1
  4050a8:	3901      	subs	r1, #1
  4050aa:	60a1      	str	r1, [r4, #8]
  4050ac:	6020      	str	r0, [r4, #0]
  4050ae:	7015      	strb	r5, [r2, #0]
  4050b0:	6962      	ldr	r2, [r4, #20]
  4050b2:	429a      	cmp	r2, r3
  4050b4:	d01a      	beq.n	4050ec <__swbuf_r+0x80>
  4050b6:	89a3      	ldrh	r3, [r4, #12]
  4050b8:	07db      	lsls	r3, r3, #31
  4050ba:	d501      	bpl.n	4050c0 <__swbuf_r+0x54>
  4050bc:	2d0a      	cmp	r5, #10
  4050be:	d015      	beq.n	4050ec <__swbuf_r+0x80>
  4050c0:	4638      	mov	r0, r7
  4050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4050c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4050ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4050ce:	81a2      	strh	r2, [r4, #12]
  4050d0:	6822      	ldr	r2, [r4, #0]
  4050d2:	6661      	str	r1, [r4, #100]	; 0x64
  4050d4:	6961      	ldr	r1, [r4, #20]
  4050d6:	1ad3      	subs	r3, r2, r3
  4050d8:	428b      	cmp	r3, r1
  4050da:	dbe2      	blt.n	4050a2 <__swbuf_r+0x36>
  4050dc:	4621      	mov	r1, r4
  4050de:	4630      	mov	r0, r6
  4050e0:	f7ff f87a 	bl	4041d8 <_fflush_r>
  4050e4:	b940      	cbnz	r0, 4050f8 <__swbuf_r+0x8c>
  4050e6:	6822      	ldr	r2, [r4, #0]
  4050e8:	2301      	movs	r3, #1
  4050ea:	e7db      	b.n	4050a4 <__swbuf_r+0x38>
  4050ec:	4621      	mov	r1, r4
  4050ee:	4630      	mov	r0, r6
  4050f0:	f7ff f872 	bl	4041d8 <_fflush_r>
  4050f4:	2800      	cmp	r0, #0
  4050f6:	d0e3      	beq.n	4050c0 <__swbuf_r+0x54>
  4050f8:	f04f 37ff 	mov.w	r7, #4294967295
  4050fc:	e7e0      	b.n	4050c0 <__swbuf_r+0x54>
  4050fe:	4621      	mov	r1, r4
  405100:	4630      	mov	r0, r6
  405102:	f7fe ff55 	bl	403fb0 <__swsetup_r>
  405106:	2800      	cmp	r0, #0
  405108:	d1f6      	bne.n	4050f8 <__swbuf_r+0x8c>
  40510a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40510e:	6923      	ldr	r3, [r4, #16]
  405110:	b291      	uxth	r1, r2
  405112:	e7bd      	b.n	405090 <__swbuf_r+0x24>
  405114:	f7ff f8b8 	bl	404288 <__sinit>
  405118:	e7b0      	b.n	40507c <__swbuf_r+0x10>
  40511a:	bf00      	nop

0040511c <_wcrtomb_r>:
  40511c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40511e:	4606      	mov	r6, r0
  405120:	b085      	sub	sp, #20
  405122:	461f      	mov	r7, r3
  405124:	b189      	cbz	r1, 40514a <_wcrtomb_r+0x2e>
  405126:	4c10      	ldr	r4, [pc, #64]	; (405168 <_wcrtomb_r+0x4c>)
  405128:	4d10      	ldr	r5, [pc, #64]	; (40516c <_wcrtomb_r+0x50>)
  40512a:	6824      	ldr	r4, [r4, #0]
  40512c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40512e:	2c00      	cmp	r4, #0
  405130:	bf08      	it	eq
  405132:	462c      	moveq	r4, r5
  405134:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405138:	47a0      	blx	r4
  40513a:	1c43      	adds	r3, r0, #1
  40513c:	d103      	bne.n	405146 <_wcrtomb_r+0x2a>
  40513e:	2200      	movs	r2, #0
  405140:	238a      	movs	r3, #138	; 0x8a
  405142:	603a      	str	r2, [r7, #0]
  405144:	6033      	str	r3, [r6, #0]
  405146:	b005      	add	sp, #20
  405148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40514a:	460c      	mov	r4, r1
  40514c:	4906      	ldr	r1, [pc, #24]	; (405168 <_wcrtomb_r+0x4c>)
  40514e:	4a07      	ldr	r2, [pc, #28]	; (40516c <_wcrtomb_r+0x50>)
  405150:	6809      	ldr	r1, [r1, #0]
  405152:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405154:	2900      	cmp	r1, #0
  405156:	bf08      	it	eq
  405158:	4611      	moveq	r1, r2
  40515a:	4622      	mov	r2, r4
  40515c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405160:	a901      	add	r1, sp, #4
  405162:	47a0      	blx	r4
  405164:	e7e9      	b.n	40513a <_wcrtomb_r+0x1e>
  405166:	bf00      	nop
  405168:	20400010 	.word	0x20400010
  40516c:	20400854 	.word	0x20400854

00405170 <__ascii_wctomb>:
  405170:	b121      	cbz	r1, 40517c <__ascii_wctomb+0xc>
  405172:	2aff      	cmp	r2, #255	; 0xff
  405174:	d804      	bhi.n	405180 <__ascii_wctomb+0x10>
  405176:	700a      	strb	r2, [r1, #0]
  405178:	2001      	movs	r0, #1
  40517a:	4770      	bx	lr
  40517c:	4608      	mov	r0, r1
  40517e:	4770      	bx	lr
  405180:	238a      	movs	r3, #138	; 0x8a
  405182:	6003      	str	r3, [r0, #0]
  405184:	f04f 30ff 	mov.w	r0, #4294967295
  405188:	4770      	bx	lr
  40518a:	bf00      	nop

0040518c <_write_r>:
  40518c:	b570      	push	{r4, r5, r6, lr}
  40518e:	460d      	mov	r5, r1
  405190:	4c08      	ldr	r4, [pc, #32]	; (4051b4 <_write_r+0x28>)
  405192:	4611      	mov	r1, r2
  405194:	4606      	mov	r6, r0
  405196:	461a      	mov	r2, r3
  405198:	4628      	mov	r0, r5
  40519a:	2300      	movs	r3, #0
  40519c:	6023      	str	r3, [r4, #0]
  40519e:	f7fb fce3 	bl	400b68 <_write>
  4051a2:	1c43      	adds	r3, r0, #1
  4051a4:	d000      	beq.n	4051a8 <_write_r+0x1c>
  4051a6:	bd70      	pop	{r4, r5, r6, pc}
  4051a8:	6823      	ldr	r3, [r4, #0]
  4051aa:	2b00      	cmp	r3, #0
  4051ac:	d0fb      	beq.n	4051a6 <_write_r+0x1a>
  4051ae:	6033      	str	r3, [r6, #0]
  4051b0:	bd70      	pop	{r4, r5, r6, pc}
  4051b2:	bf00      	nop
  4051b4:	20400d5c 	.word	0x20400d5c

004051b8 <__register_exitproc>:
  4051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051bc:	4d2c      	ldr	r5, [pc, #176]	; (405270 <__register_exitproc+0xb8>)
  4051be:	4606      	mov	r6, r0
  4051c0:	6828      	ldr	r0, [r5, #0]
  4051c2:	4698      	mov	r8, r3
  4051c4:	460f      	mov	r7, r1
  4051c6:	4691      	mov	r9, r2
  4051c8:	f7ff fc1e 	bl	404a08 <__retarget_lock_acquire_recursive>
  4051cc:	4b29      	ldr	r3, [pc, #164]	; (405274 <__register_exitproc+0xbc>)
  4051ce:	681c      	ldr	r4, [r3, #0]
  4051d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4051d4:	2b00      	cmp	r3, #0
  4051d6:	d03e      	beq.n	405256 <__register_exitproc+0x9e>
  4051d8:	685a      	ldr	r2, [r3, #4]
  4051da:	2a1f      	cmp	r2, #31
  4051dc:	dc1c      	bgt.n	405218 <__register_exitproc+0x60>
  4051de:	f102 0e01 	add.w	lr, r2, #1
  4051e2:	b176      	cbz	r6, 405202 <__register_exitproc+0x4a>
  4051e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4051e8:	2401      	movs	r4, #1
  4051ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4051ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4051f2:	4094      	lsls	r4, r2
  4051f4:	4320      	orrs	r0, r4
  4051f6:	2e02      	cmp	r6, #2
  4051f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4051fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405200:	d023      	beq.n	40524a <__register_exitproc+0x92>
  405202:	3202      	adds	r2, #2
  405204:	f8c3 e004 	str.w	lr, [r3, #4]
  405208:	6828      	ldr	r0, [r5, #0]
  40520a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40520e:	f7ff fbfd 	bl	404a0c <__retarget_lock_release_recursive>
  405212:	2000      	movs	r0, #0
  405214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405218:	4b17      	ldr	r3, [pc, #92]	; (405278 <__register_exitproc+0xc0>)
  40521a:	b30b      	cbz	r3, 405260 <__register_exitproc+0xa8>
  40521c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405220:	f7fd fafe 	bl	402820 <malloc>
  405224:	4603      	mov	r3, r0
  405226:	b1d8      	cbz	r0, 405260 <__register_exitproc+0xa8>
  405228:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40522c:	6002      	str	r2, [r0, #0]
  40522e:	2100      	movs	r1, #0
  405230:	6041      	str	r1, [r0, #4]
  405232:	460a      	mov	r2, r1
  405234:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405238:	f04f 0e01 	mov.w	lr, #1
  40523c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405240:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405244:	2e00      	cmp	r6, #0
  405246:	d0dc      	beq.n	405202 <__register_exitproc+0x4a>
  405248:	e7cc      	b.n	4051e4 <__register_exitproc+0x2c>
  40524a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40524e:	430c      	orrs	r4, r1
  405250:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405254:	e7d5      	b.n	405202 <__register_exitproc+0x4a>
  405256:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40525a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40525e:	e7bb      	b.n	4051d8 <__register_exitproc+0x20>
  405260:	6828      	ldr	r0, [r5, #0]
  405262:	f7ff fbd3 	bl	404a0c <__retarget_lock_release_recursive>
  405266:	f04f 30ff 	mov.w	r0, #4294967295
  40526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40526e:	bf00      	nop
  405270:	20400850 	.word	0x20400850
  405274:	00405480 	.word	0x00405480
  405278:	00402821 	.word	0x00402821

0040527c <_close_r>:
  40527c:	b538      	push	{r3, r4, r5, lr}
  40527e:	4c07      	ldr	r4, [pc, #28]	; (40529c <_close_r+0x20>)
  405280:	2300      	movs	r3, #0
  405282:	4605      	mov	r5, r0
  405284:	4608      	mov	r0, r1
  405286:	6023      	str	r3, [r4, #0]
  405288:	f7fc faf0 	bl	40186c <_close>
  40528c:	1c43      	adds	r3, r0, #1
  40528e:	d000      	beq.n	405292 <_close_r+0x16>
  405290:	bd38      	pop	{r3, r4, r5, pc}
  405292:	6823      	ldr	r3, [r4, #0]
  405294:	2b00      	cmp	r3, #0
  405296:	d0fb      	beq.n	405290 <_close_r+0x14>
  405298:	602b      	str	r3, [r5, #0]
  40529a:	bd38      	pop	{r3, r4, r5, pc}
  40529c:	20400d5c 	.word	0x20400d5c

004052a0 <_fclose_r>:
  4052a0:	b570      	push	{r4, r5, r6, lr}
  4052a2:	b159      	cbz	r1, 4052bc <_fclose_r+0x1c>
  4052a4:	4605      	mov	r5, r0
  4052a6:	460c      	mov	r4, r1
  4052a8:	b110      	cbz	r0, 4052b0 <_fclose_r+0x10>
  4052aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4052ac:	2b00      	cmp	r3, #0
  4052ae:	d03c      	beq.n	40532a <_fclose_r+0x8a>
  4052b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4052b2:	07d8      	lsls	r0, r3, #31
  4052b4:	d505      	bpl.n	4052c2 <_fclose_r+0x22>
  4052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052ba:	b92b      	cbnz	r3, 4052c8 <_fclose_r+0x28>
  4052bc:	2600      	movs	r6, #0
  4052be:	4630      	mov	r0, r6
  4052c0:	bd70      	pop	{r4, r5, r6, pc}
  4052c2:	89a3      	ldrh	r3, [r4, #12]
  4052c4:	0599      	lsls	r1, r3, #22
  4052c6:	d53c      	bpl.n	405342 <_fclose_r+0xa2>
  4052c8:	4621      	mov	r1, r4
  4052ca:	4628      	mov	r0, r5
  4052cc:	f7fe fee4 	bl	404098 <__sflush_r>
  4052d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4052d2:	4606      	mov	r6, r0
  4052d4:	b133      	cbz	r3, 4052e4 <_fclose_r+0x44>
  4052d6:	69e1      	ldr	r1, [r4, #28]
  4052d8:	4628      	mov	r0, r5
  4052da:	4798      	blx	r3
  4052dc:	2800      	cmp	r0, #0
  4052de:	bfb8      	it	lt
  4052e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4052e4:	89a3      	ldrh	r3, [r4, #12]
  4052e6:	061a      	lsls	r2, r3, #24
  4052e8:	d422      	bmi.n	405330 <_fclose_r+0x90>
  4052ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4052ec:	b141      	cbz	r1, 405300 <_fclose_r+0x60>
  4052ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4052f2:	4299      	cmp	r1, r3
  4052f4:	d002      	beq.n	4052fc <_fclose_r+0x5c>
  4052f6:	4628      	mov	r0, r5
  4052f8:	f7ff f8ec 	bl	4044d4 <_free_r>
  4052fc:	2300      	movs	r3, #0
  4052fe:	6323      	str	r3, [r4, #48]	; 0x30
  405300:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405302:	b121      	cbz	r1, 40530e <_fclose_r+0x6e>
  405304:	4628      	mov	r0, r5
  405306:	f7ff f8e5 	bl	4044d4 <_free_r>
  40530a:	2300      	movs	r3, #0
  40530c:	6463      	str	r3, [r4, #68]	; 0x44
  40530e:	f7fe ffe7 	bl	4042e0 <__sfp_lock_acquire>
  405312:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405314:	2200      	movs	r2, #0
  405316:	07db      	lsls	r3, r3, #31
  405318:	81a2      	strh	r2, [r4, #12]
  40531a:	d50e      	bpl.n	40533a <_fclose_r+0x9a>
  40531c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40531e:	f7ff fb71 	bl	404a04 <__retarget_lock_close_recursive>
  405322:	f7fe ffe3 	bl	4042ec <__sfp_lock_release>
  405326:	4630      	mov	r0, r6
  405328:	bd70      	pop	{r4, r5, r6, pc}
  40532a:	f7fe ffad 	bl	404288 <__sinit>
  40532e:	e7bf      	b.n	4052b0 <_fclose_r+0x10>
  405330:	6921      	ldr	r1, [r4, #16]
  405332:	4628      	mov	r0, r5
  405334:	f7ff f8ce 	bl	4044d4 <_free_r>
  405338:	e7d7      	b.n	4052ea <_fclose_r+0x4a>
  40533a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40533c:	f7ff fb66 	bl	404a0c <__retarget_lock_release_recursive>
  405340:	e7ec      	b.n	40531c <_fclose_r+0x7c>
  405342:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405344:	f7ff fb60 	bl	404a08 <__retarget_lock_acquire_recursive>
  405348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40534c:	2b00      	cmp	r3, #0
  40534e:	d1bb      	bne.n	4052c8 <_fclose_r+0x28>
  405350:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405352:	f016 0601 	ands.w	r6, r6, #1
  405356:	d1b1      	bne.n	4052bc <_fclose_r+0x1c>
  405358:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40535a:	f7ff fb57 	bl	404a0c <__retarget_lock_release_recursive>
  40535e:	4630      	mov	r0, r6
  405360:	bd70      	pop	{r4, r5, r6, pc}
  405362:	bf00      	nop

00405364 <_fstat_r>:
  405364:	b538      	push	{r3, r4, r5, lr}
  405366:	460b      	mov	r3, r1
  405368:	4c07      	ldr	r4, [pc, #28]	; (405388 <_fstat_r+0x24>)
  40536a:	4605      	mov	r5, r0
  40536c:	4611      	mov	r1, r2
  40536e:	4618      	mov	r0, r3
  405370:	2300      	movs	r3, #0
  405372:	6023      	str	r3, [r4, #0]
  405374:	f7fc fa7d 	bl	401872 <_fstat>
  405378:	1c43      	adds	r3, r0, #1
  40537a:	d000      	beq.n	40537e <_fstat_r+0x1a>
  40537c:	bd38      	pop	{r3, r4, r5, pc}
  40537e:	6823      	ldr	r3, [r4, #0]
  405380:	2b00      	cmp	r3, #0
  405382:	d0fb      	beq.n	40537c <_fstat_r+0x18>
  405384:	602b      	str	r3, [r5, #0]
  405386:	bd38      	pop	{r3, r4, r5, pc}
  405388:	20400d5c 	.word	0x20400d5c

0040538c <_isatty_r>:
  40538c:	b538      	push	{r3, r4, r5, lr}
  40538e:	4c07      	ldr	r4, [pc, #28]	; (4053ac <_isatty_r+0x20>)
  405390:	2300      	movs	r3, #0
  405392:	4605      	mov	r5, r0
  405394:	4608      	mov	r0, r1
  405396:	6023      	str	r3, [r4, #0]
  405398:	f7fc fa70 	bl	40187c <_isatty>
  40539c:	1c43      	adds	r3, r0, #1
  40539e:	d000      	beq.n	4053a2 <_isatty_r+0x16>
  4053a0:	bd38      	pop	{r3, r4, r5, pc}
  4053a2:	6823      	ldr	r3, [r4, #0]
  4053a4:	2b00      	cmp	r3, #0
  4053a6:	d0fb      	beq.n	4053a0 <_isatty_r+0x14>
  4053a8:	602b      	str	r3, [r5, #0]
  4053aa:	bd38      	pop	{r3, r4, r5, pc}
  4053ac:	20400d5c 	.word	0x20400d5c

004053b0 <_lseek_r>:
  4053b0:	b570      	push	{r4, r5, r6, lr}
  4053b2:	460d      	mov	r5, r1
  4053b4:	4c08      	ldr	r4, [pc, #32]	; (4053d8 <_lseek_r+0x28>)
  4053b6:	4611      	mov	r1, r2
  4053b8:	4606      	mov	r6, r0
  4053ba:	461a      	mov	r2, r3
  4053bc:	4628      	mov	r0, r5
  4053be:	2300      	movs	r3, #0
  4053c0:	6023      	str	r3, [r4, #0]
  4053c2:	f7fc fa5d 	bl	401880 <_lseek>
  4053c6:	1c43      	adds	r3, r0, #1
  4053c8:	d000      	beq.n	4053cc <_lseek_r+0x1c>
  4053ca:	bd70      	pop	{r4, r5, r6, pc}
  4053cc:	6823      	ldr	r3, [r4, #0]
  4053ce:	2b00      	cmp	r3, #0
  4053d0:	d0fb      	beq.n	4053ca <_lseek_r+0x1a>
  4053d2:	6033      	str	r3, [r6, #0]
  4053d4:	bd70      	pop	{r4, r5, r6, pc}
  4053d6:	bf00      	nop
  4053d8:	20400d5c 	.word	0x20400d5c

004053dc <_read_r>:
  4053dc:	b570      	push	{r4, r5, r6, lr}
  4053de:	460d      	mov	r5, r1
  4053e0:	4c08      	ldr	r4, [pc, #32]	; (405404 <_read_r+0x28>)
  4053e2:	4611      	mov	r1, r2
  4053e4:	4606      	mov	r6, r0
  4053e6:	461a      	mov	r2, r3
  4053e8:	4628      	mov	r0, r5
  4053ea:	2300      	movs	r3, #0
  4053ec:	6023      	str	r3, [r4, #0]
  4053ee:	f7fb fb9d 	bl	400b2c <_read>
  4053f2:	1c43      	adds	r3, r0, #1
  4053f4:	d000      	beq.n	4053f8 <_read_r+0x1c>
  4053f6:	bd70      	pop	{r4, r5, r6, pc}
  4053f8:	6823      	ldr	r3, [r4, #0]
  4053fa:	2b00      	cmp	r3, #0
  4053fc:	d0fb      	beq.n	4053f6 <_read_r+0x1a>
  4053fe:	6033      	str	r3, [r6, #0]
  405400:	bd70      	pop	{r4, r5, r6, pc}
  405402:	bf00      	nop
  405404:	20400d5c 	.word	0x20400d5c
  405408:	000007e2 	.word	0x000007e2
  40540c:	00000003 	.word	0x00000003
  405410:	00000013 	.word	0x00000013
  405414:	0000000c 	.word	0x0000000c
  405418:	0000000f 	.word	0x0000000f
  40541c:	0000002d 	.word	0x0000002d
  405420:	00000001 	.word	0x00000001
  405424:	74696e49 	.word	0x74696e49
  405428:	206f6420 	.word	0x206f6420
  40542c:	20435452 	.word	0x20435452
  405430:	0000000a 	.word	0x0000000a
  405434:	6c6c6143 	.word	0x6c6c6143
  405438:	6b636162 	.word	0x6b636162
  40543c:	69746120 	.word	0x69746120
  405440:	6f646176 	.word	0x6f646176
  405444:	000a2121 	.word	0x000a2121
  405448:	72746e45 	.word	0x72746e45
  40544c:	6e20756f 	.word	0x6e20756f
  405450:	616d2061 	.word	0x616d2061
  405454:	0a206e69 	.word	0x0a206e69
  405458:	00000000 	.word	0x00000000
  40545c:	63736950 	.word	0x63736950
  405460:	3a20756f 	.word	0x3a20756f
  405464:	000a2029 	.word	0x000a2029
  405468:	63617473 	.word	0x63617473
  40546c:	766f206b 	.word	0x766f206b
  405470:	6c667265 	.word	0x6c667265
  405474:	2520776f 	.word	0x2520776f
  405478:	73252078 	.word	0x73252078
  40547c:	00000a0d 	.word	0x00000a0d

00405480 <_global_impure_ptr>:
  405480:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  405490:	46454443 00000000 33323130 37363534     CDEF....01234567
  4054a0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4054b0:	0000296c                                l)..

004054b4 <blanks.7217>:
  4054b4:	20202020 20202020 20202020 20202020                     

004054c4 <zeroes.7218>:
  4054c4:	30303030 30303030 30303030 30303030     0000000000000000
  4054d4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004054e4 <_ctype_>:
  4054e4:	20202000 20202020 28282020 20282828     .         ((((( 
  4054f4:	20202020 20202020 20202020 20202020                     
  405504:	10108820 10101010 10101010 10101010      ...............
  405514:	04040410 04040404 10040404 10101010     ................
  405524:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405534:	01010101 01010101 01010101 10101010     ................
  405544:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405554:	02020202 02020202 02020202 10101010     ................
  405564:	00000020 00000000 00000000 00000000      ...............
	...

004055e8 <_init>:
  4055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055ea:	bf00      	nop
  4055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4055ee:	bc08      	pop	{r3}
  4055f0:	469e      	mov	lr, r3
  4055f2:	4770      	bx	lr

004055f4 <__init_array_start>:
  4055f4:	00404079 	.word	0x00404079

004055f8 <__frame_dummy_init_array_entry>:
  4055f8:	00400165                                e.@.

004055fc <_fini>:
  4055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055fe:	bf00      	nop
  405600:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405602:	bc08      	pop	{r3}
  405604:	469e      	mov	lr, r3
  405606:	4770      	bx	lr

00405608 <__fini_array_start>:
  405608:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0d38 2040                                   8.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	5171 0040 4b01 0040 0000 0000 54e4 0040     qQ@..K@......T@.
20400944:	54e0 0040 5458 0040 5458 0040 5458 0040     .T@.XT@.XT@.XT@.
20400954:	5458 0040 5458 0040 5458 0040 5458 0040     XT@.XT@.XT@.XT@.
20400964:	5458 0040 5458 0040 ffff ffff ffff ffff     XT@.XT@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
